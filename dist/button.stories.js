"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/@storybook+global@5.0.0/node_modules/@storybook/global/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/@storybook+global@5.0.0/node_modules/@storybook/global/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key2 of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key2) && key2 !== except)
            __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      global: () => scope
    });
    module2.exports = __toCommonJS2(src_exports);
    var scope = (() => {
      let win;
      if (typeof window !== "undefined") {
        win = window;
      } else if (typeof globalThis !== "undefined") {
        win = globalThis;
      } else if (typeof global !== "undefined") {
        win = global;
      } else if (typeof self !== "undefined") {
        win = self;
      } else {
        win = {};
      }
      return win;
    })();
  }
});

// node_modules/.pnpm/@storybook+core-events@8.1.5/node_modules/@storybook/core-events/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/.pnpm/@storybook+core-events@8.1.5/node_modules/@storybook/core-events/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, { ARGTYPES_INFO_REQUEST: () => ARGTYPES_INFO_REQUEST, ARGTYPES_INFO_RESPONSE: () => ARGTYPES_INFO_RESPONSE, CHANNEL_CREATED: () => CHANNEL_CREATED, CHANNEL_WS_DISCONNECT: () => CHANNEL_WS_DISCONNECT, CONFIG_ERROR: () => CONFIG_ERROR, CREATE_NEW_STORYFILE_REQUEST: () => CREATE_NEW_STORYFILE_REQUEST, CREATE_NEW_STORYFILE_RESPONSE: () => CREATE_NEW_STORYFILE_RESPONSE, CURRENT_STORY_WAS_SET: () => CURRENT_STORY_WAS_SET, DOCS_PREPARED: () => DOCS_PREPARED, DOCS_RENDERED: () => DOCS_RENDERED, FILE_COMPONENT_SEARCH_REQUEST: () => FILE_COMPONENT_SEARCH_REQUEST, FILE_COMPONENT_SEARCH_RESPONSE: () => FILE_COMPONENT_SEARCH_RESPONSE, FORCE_REMOUNT: () => FORCE_REMOUNT, FORCE_RE_RENDER: () => FORCE_RE_RENDER, GLOBALS_UPDATED: () => GLOBALS_UPDATED, NAVIGATE_URL: () => NAVIGATE_URL, PLAY_FUNCTION_THREW_EXCEPTION: () => PLAY_FUNCTION_THREW_EXCEPTION, PRELOAD_ENTRIES: () => PRELOAD_ENTRIES, PREVIEW_BUILDER_PROGRESS: () => PREVIEW_BUILDER_PROGRESS, PREVIEW_KEYDOWN: () => PREVIEW_KEYDOWN, REGISTER_SUBSCRIPTION: () => REGISTER_SUBSCRIPTION, REQUEST_WHATS_NEW_DATA: () => REQUEST_WHATS_NEW_DATA, RESET_STORY_ARGS: () => RESET_STORY_ARGS, RESULT_WHATS_NEW_DATA: () => RESULT_WHATS_NEW_DATA, SAVE_STORY_REQUEST: () => SAVE_STORY_REQUEST, SAVE_STORY_RESPONSE: () => SAVE_STORY_RESPONSE, SELECT_STORY: () => SELECT_STORY, SET_CONFIG: () => SET_CONFIG, SET_CURRENT_STORY: () => SET_CURRENT_STORY, SET_GLOBALS: () => SET_GLOBALS, SET_INDEX: () => SET_INDEX, SET_STORIES: () => SET_STORIES, SET_WHATS_NEW_CACHE: () => SET_WHATS_NEW_CACHE, SHARED_STATE_CHANGED: () => SHARED_STATE_CHANGED, SHARED_STATE_SET: () => SHARED_STATE_SET, STORIES_COLLAPSE_ALL: () => STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL: () => STORIES_EXPAND_ALL, STORY_ARGS_UPDATED: () => STORY_ARGS_UPDATED, STORY_CHANGED: () => STORY_CHANGED, STORY_ERRORED: () => STORY_ERRORED, STORY_INDEX_INVALIDATED: () => STORY_INDEX_INVALIDATED, STORY_MISSING: () => STORY_MISSING, STORY_PREPARED: () => STORY_PREPARED, STORY_RENDERED: () => STORY_RENDERED, STORY_RENDER_PHASE_CHANGED: () => STORY_RENDER_PHASE_CHANGED, STORY_SPECIFIED: () => STORY_SPECIFIED, STORY_THREW_EXCEPTION: () => STORY_THREW_EXCEPTION, STORY_UNCHANGED: () => STORY_UNCHANGED, TELEMETRY_ERROR: () => TELEMETRY_ERROR, TOGGLE_WHATS_NEW_NOTIFICATIONS: () => TOGGLE_WHATS_NEW_NOTIFICATIONS, UNHANDLED_ERRORS_WHILE_PLAYING: () => UNHANDLED_ERRORS_WHILE_PLAYING, UPDATE_GLOBALS: () => UPDATE_GLOBALS, UPDATE_QUERY_PARAMS: () => UPDATE_QUERY_PARAMS, UPDATE_STORY_ARGS: () => UPDATE_STORY_ARGS, default: () => src_default });
    module2.exports = __toCommonJS2(src_exports);
    var events = ((events2) => (events2.CHANNEL_WS_DISCONNECT = "channelWSDisconnect", events2.CHANNEL_CREATED = "channelCreated", events2.CONFIG_ERROR = "configError", events2.STORY_INDEX_INVALIDATED = "storyIndexInvalidated", events2.STORY_SPECIFIED = "storySpecified", events2.SET_CONFIG = "setConfig", events2.SET_STORIES = "setStories", events2.SET_INDEX = "setIndex", events2.SET_CURRENT_STORY = "setCurrentStory", events2.CURRENT_STORY_WAS_SET = "currentStoryWasSet", events2.FORCE_RE_RENDER = "forceReRender", events2.FORCE_REMOUNT = "forceRemount", events2.PRELOAD_ENTRIES = "preloadStories", events2.STORY_PREPARED = "storyPrepared", events2.DOCS_PREPARED = "docsPrepared", events2.STORY_CHANGED = "storyChanged", events2.STORY_UNCHANGED = "storyUnchanged", events2.STORY_RENDERED = "storyRendered", events2.STORY_MISSING = "storyMissing", events2.STORY_ERRORED = "storyErrored", events2.STORY_THREW_EXCEPTION = "storyThrewException", events2.STORY_RENDER_PHASE_CHANGED = "storyRenderPhaseChanged", events2.PLAY_FUNCTION_THREW_EXCEPTION = "playFunctionThrewException", events2.UNHANDLED_ERRORS_WHILE_PLAYING = "unhandledErrorsWhilePlaying", events2.UPDATE_STORY_ARGS = "updateStoryArgs", events2.STORY_ARGS_UPDATED = "storyArgsUpdated", events2.RESET_STORY_ARGS = "resetStoryArgs", events2.SET_GLOBALS = "setGlobals", events2.UPDATE_GLOBALS = "updateGlobals", events2.GLOBALS_UPDATED = "globalsUpdated", events2.REGISTER_SUBSCRIPTION = "registerSubscription", events2.PREVIEW_KEYDOWN = "previewKeydown", events2.PREVIEW_BUILDER_PROGRESS = "preview_builder_progress", events2.SELECT_STORY = "selectStory", events2.STORIES_COLLAPSE_ALL = "storiesCollapseAll", events2.STORIES_EXPAND_ALL = "storiesExpandAll", events2.DOCS_RENDERED = "docsRendered", events2.SHARED_STATE_CHANGED = "sharedStateChanged", events2.SHARED_STATE_SET = "sharedStateSet", events2.NAVIGATE_URL = "navigateUrl", events2.UPDATE_QUERY_PARAMS = "updateQueryParams", events2.REQUEST_WHATS_NEW_DATA = "requestWhatsNewData", events2.RESULT_WHATS_NEW_DATA = "resultWhatsNewData", events2.SET_WHATS_NEW_CACHE = "setWhatsNewCache", events2.TOGGLE_WHATS_NEW_NOTIFICATIONS = "toggleWhatsNewNotifications", events2.TELEMETRY_ERROR = "telemetryError", events2.FILE_COMPONENT_SEARCH_REQUEST = "fileComponentSearchRequest", events2.FILE_COMPONENT_SEARCH_RESPONSE = "fileComponentSearchResponse", events2.SAVE_STORY_REQUEST = "saveStoryRequest", events2.SAVE_STORY_RESPONSE = "saveStoryResponse", events2.ARGTYPES_INFO_REQUEST = "argtypesInfoRequest", events2.ARGTYPES_INFO_RESPONSE = "argtypesInfoResponse", events2.CREATE_NEW_STORYFILE_REQUEST = "createNewStoryfileRequest", events2.CREATE_NEW_STORYFILE_RESPONSE = "createNewStoryfileResponse", events2))(events || {});
    var src_default = events;
    var { CHANNEL_WS_DISCONNECT, CHANNEL_CREATED, CONFIG_ERROR, CREATE_NEW_STORYFILE_REQUEST, CREATE_NEW_STORYFILE_RESPONSE, CURRENT_STORY_WAS_SET, DOCS_PREPARED, DOCS_RENDERED, FILE_COMPONENT_SEARCH_REQUEST, FILE_COMPONENT_SEARCH_RESPONSE, FORCE_RE_RENDER, FORCE_REMOUNT, GLOBALS_UPDATED, NAVIGATE_URL, PLAY_FUNCTION_THREW_EXCEPTION, UNHANDLED_ERRORS_WHILE_PLAYING, PRELOAD_ENTRIES, PREVIEW_BUILDER_PROGRESS, PREVIEW_KEYDOWN, REGISTER_SUBSCRIPTION, RESET_STORY_ARGS, SELECT_STORY, SET_CONFIG, SET_CURRENT_STORY, SET_GLOBALS, SET_INDEX, SET_STORIES, SHARED_STATE_CHANGED, SHARED_STATE_SET, STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL, STORY_ARGS_UPDATED, STORY_CHANGED, STORY_ERRORED, STORY_INDEX_INVALIDATED, STORY_MISSING, STORY_PREPARED, STORY_RENDER_PHASE_CHANGED, STORY_RENDERED, STORY_SPECIFIED, STORY_THREW_EXCEPTION, STORY_UNCHANGED, UPDATE_GLOBALS, UPDATE_QUERY_PARAMS, UPDATE_STORY_ARGS, REQUEST_WHATS_NEW_DATA, RESULT_WHATS_NEW_DATA, SET_WHATS_NEW_CACHE, TOGGLE_WHATS_NEW_NOTIFICATIONS, TELEMETRY_ERROR, SAVE_STORY_REQUEST, SAVE_STORY_RESPONSE, ARGTYPES_INFO_REQUEST, ARGTYPES_INFO_RESPONSE } = events;
  }
});

// node_modules/.pnpm/@storybook+client-logger@8.1.5/node_modules/@storybook/client-logger/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/.pnpm/@storybook+client-logger@8.1.5/node_modules/@storybook/client-logger/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, { deprecate: () => deprecate, logger: () => logger, once: () => once, pretty: () => pretty });
    module2.exports = __toCommonJS2(src_exports);
    var import_global = require_dist();
    var { LOGLEVEL } = import_global.global;
    var levels = { trace: 1, debug: 2, info: 3, warn: 4, error: 5, silent: 10 };
    var currentLogLevelString = LOGLEVEL;
    var currentLogLevelNumber = levels[currentLogLevelString] || levels.info;
    var logger = { trace: (message, ...rest) => {
      currentLogLevelNumber <= levels.trace && console.trace(message, ...rest);
    }, debug: (message, ...rest) => {
      currentLogLevelNumber <= levels.debug && console.debug(message, ...rest);
    }, info: (message, ...rest) => {
      currentLogLevelNumber <= levels.info && console.info(message, ...rest);
    }, warn: (message, ...rest) => {
      currentLogLevelNumber <= levels.warn && console.warn(message, ...rest);
    }, error: (message, ...rest) => {
      currentLogLevelNumber <= levels.error && console.error(message, ...rest);
    }, log: (message, ...rest) => {
      currentLogLevelNumber < levels.silent && console.log(message, ...rest);
    } };
    var logged = /* @__PURE__ */ new Set();
    var once = (type) => (message, ...rest) => {
      if (!logged.has(message))
        return logged.add(message), logger[type](message, ...rest);
    };
    once.clear = () => logged.clear();
    once.trace = once("trace");
    once.debug = once("debug");
    once.info = once("info");
    once.warn = once("warn");
    once.error = once("error");
    once.log = once("log");
    var deprecate = once("warn");
    var pretty = (type) => (...args2) => {
      let argArray = [];
      if (args2.length) {
        let startTagRe = /<span\s+style=(['"])([^'"]*)\1\s*>/gi, endTagRe = /<\/span>/gi, reResultArray;
        for (argArray.push(args2[0].replace(startTagRe, "%c").replace(endTagRe, "%c")); reResultArray = startTagRe.exec(args2[0]); )
          argArray.push(reResultArray[2]), argArray.push("");
        for (let j = 1; j < args2.length; j++)
          argArray.push(args2[j]);
      }
      logger[type].apply(logger, argArray);
    };
    pretty.trace = pretty("trace");
    pretty.debug = pretty("debug");
    pretty.info = pretty("info");
    pretty.warn = pretty("warn");
    pretty.error = pretty("error");
  }
});

// node_modules/.pnpm/telejson@7.2.0/node_modules/telejson/dist/chunk-465TF3XA.mjs
function extractEventHiddenProperties(event) {
  const rebuildEvent = eventProperties.filter((value2) => event[value2] !== void 0).reduce((acc, value2) => {
    return { ...acc, [value2]: event[value2] };
  }, {});
  if (event instanceof CustomEvent) {
    customEventSpecificProperties.filter((value2) => event[value2] !== void 0).forEach((value2) => {
      rebuildEvent[value2] = event[value2];
    });
  }
  return rebuildEvent;
}
var __create2, __defProp2, __getOwnPropDesc2, __getOwnPropNames2, __getProtoOf2, __hasOwnProp2, __commonJS2, __copyProps2, __toESM2, eventProperties, customEventSpecificProperties;
var init_chunk_465TF3XA = __esm({
  "node_modules/.pnpm/telejson@7.2.0/node_modules/telejson/dist/chunk-465TF3XA.mjs"() {
    "use strict";
    __create2 = Object.create;
    __defProp2 = Object.defineProperty;
    __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    __getOwnPropNames2 = Object.getOwnPropertyNames;
    __getProtoOf2 = Object.getPrototypeOf;
    __hasOwnProp2 = Object.prototype.hasOwnProperty;
    __commonJS2 = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key2 of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key2) && key2 !== except)
            __defProp2(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc2(from, key2)) || desc.enumerable });
      }
      return to;
    };
    __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    eventProperties = [
      "bubbles",
      "cancelBubble",
      "cancelable",
      "composed",
      "currentTarget",
      "defaultPrevented",
      "eventPhase",
      "isTrusted",
      "returnValue",
      "srcElement",
      "target",
      "timeStamp",
      "type"
    ];
    customEventSpecificProperties = ["detail"];
  }
});

// node_modules/.pnpm/map-or-similar@1.5.0/node_modules/map-or-similar/src/similar.js
var require_similar = __commonJS({
  "node_modules/.pnpm/map-or-similar@1.5.0/node_modules/map-or-similar/src/similar.js"(exports2, module2) {
    "use strict";
    function Similar() {
      this.list = [];
      this.lastItem = void 0;
      this.size = 0;
      return this;
    }
    Similar.prototype.get = function(key2) {
      var index;
      if (this.lastItem && this.isEqual(this.lastItem.key, key2)) {
        return this.lastItem.val;
      }
      index = this.indexOf(key2);
      if (index >= 0) {
        this.lastItem = this.list[index];
        return this.list[index].val;
      }
      return void 0;
    };
    Similar.prototype.set = function(key2, val) {
      var index;
      if (this.lastItem && this.isEqual(this.lastItem.key, key2)) {
        this.lastItem.val = val;
        return this;
      }
      index = this.indexOf(key2);
      if (index >= 0) {
        this.lastItem = this.list[index];
        this.list[index].val = val;
        return this;
      }
      this.lastItem = { key: key2, val };
      this.list.push(this.lastItem);
      this.size++;
      return this;
    };
    Similar.prototype.delete = function(key2) {
      var index;
      if (this.lastItem && this.isEqual(this.lastItem.key, key2)) {
        this.lastItem = void 0;
      }
      index = this.indexOf(key2);
      if (index >= 0) {
        this.size--;
        return this.list.splice(index, 1)[0];
      }
      return void 0;
    };
    Similar.prototype.has = function(key2) {
      var index;
      if (this.lastItem && this.isEqual(this.lastItem.key, key2)) {
        return true;
      }
      index = this.indexOf(key2);
      if (index >= 0) {
        this.lastItem = this.list[index];
        return true;
      }
      return false;
    };
    Similar.prototype.forEach = function(callback, thisArg) {
      var i;
      for (i = 0; i < this.size; i++) {
        callback.call(thisArg || this, this.list[i].val, this.list[i].key, this);
      }
    };
    Similar.prototype.indexOf = function(key2) {
      var i;
      for (i = 0; i < this.size; i++) {
        if (this.isEqual(this.list[i].key, key2)) {
          return i;
        }
      }
      return -1;
    };
    Similar.prototype.isEqual = function(val1, val2) {
      return val1 === val2 || val1 !== val1 && val2 !== val2;
    };
    module2.exports = Similar;
  }
});

// node_modules/.pnpm/map-or-similar@1.5.0/node_modules/map-or-similar/src/map-or-similar.js
var require_map_or_similar = __commonJS({
  "node_modules/.pnpm/map-or-similar@1.5.0/node_modules/map-or-similar/src/map-or-similar.js"(exports2, module2) {
    "use strict";
    module2.exports = function(forceSimilar) {
      if (typeof Map !== "function" || forceSimilar) {
        var Similar = require_similar();
        return new Similar();
      } else {
        return /* @__PURE__ */ new Map();
      }
    };
  }
});

// node_modules/.pnpm/memoizerific@1.11.3/node_modules/memoizerific/src/memoizerific.js
var require_memoizerific = __commonJS({
  "node_modules/.pnpm/memoizerific@1.11.3/node_modules/memoizerific/src/memoizerific.js"(exports2, module2) {
    "use strict";
    var MapOrSimilar = require_map_or_similar();
    module2.exports = function(limit) {
      var cache = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === "true"), lru = [];
      return function(fn2) {
        var memoizerific = function() {
          var currentCache = cache, newMap, fnResult, argsLengthMinusOne = arguments.length - 1, lruPath = Array(argsLengthMinusOne + 1), isMemoized = true, i;
          if ((memoizerific.numArgs || memoizerific.numArgs === 0) && memoizerific.numArgs !== argsLengthMinusOne + 1) {
            throw new Error("Memoizerific functions should always be called with the same number of arguments");
          }
          for (i = 0; i < argsLengthMinusOne; i++) {
            lruPath[i] = {
              cacheItem: currentCache,
              arg: arguments[i]
            };
            if (currentCache.has(arguments[i])) {
              currentCache = currentCache.get(arguments[i]);
              continue;
            }
            isMemoized = false;
            newMap = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === "true");
            currentCache.set(arguments[i], newMap);
            currentCache = newMap;
          }
          if (isMemoized) {
            if (currentCache.has(arguments[argsLengthMinusOne])) {
              fnResult = currentCache.get(arguments[argsLengthMinusOne]);
            } else {
              isMemoized = false;
            }
          }
          if (!isMemoized) {
            fnResult = fn2.apply(null, arguments);
            currentCache.set(arguments[argsLengthMinusOne], fnResult);
          }
          if (limit > 0) {
            lruPath[argsLengthMinusOne] = {
              cacheItem: currentCache,
              arg: arguments[argsLengthMinusOne]
            };
            if (isMemoized) {
              moveToMostRecentLru(lru, lruPath);
            } else {
              lru.push(lruPath);
            }
            if (lru.length > limit) {
              removeCachedResult(lru.shift());
            }
          }
          memoizerific.wasMemoized = isMemoized;
          memoizerific.numArgs = argsLengthMinusOne + 1;
          return fnResult;
        };
        memoizerific.limit = limit;
        memoizerific.wasMemoized = false;
        memoizerific.cache = cache;
        memoizerific.lru = lru;
        return memoizerific;
      };
    };
    function moveToMostRecentLru(lru, lruPath) {
      var lruLen = lru.length, lruPathLen = lruPath.length, isMatch, i, ii;
      for (i = 0; i < lruLen; i++) {
        isMatch = true;
        for (ii = 0; ii < lruPathLen; ii++) {
          if (!isEqual(lru[i][ii].arg, lruPath[ii].arg)) {
            isMatch = false;
            break;
          }
        }
        if (isMatch) {
          break;
        }
      }
      lru.push(lru.splice(i, 1)[0]);
    }
    function removeCachedResult(removedLru) {
      var removedLruLen = removedLru.length, currentLru = removedLru[removedLruLen - 1], tmp, i;
      currentLru.cacheItem.delete(currentLru.arg);
      for (i = removedLruLen - 2; i >= 0; i--) {
        currentLru = removedLru[i];
        tmp = currentLru.cacheItem.get(currentLru.arg);
        if (!tmp || !tmp.size) {
          currentLru.cacheItem.delete(currentLru.arg);
        } else {
          break;
        }
      }
    }
    function isEqual(val1, val2) {
      return val1 === val2 || val1 !== val1 && val2 !== val2;
    }
  }
});

// node_modules/.pnpm/telejson@7.2.0/node_modules/telejson/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  isJSON: () => isJSON,
  parse: () => parse,
  replacer: () => replacer,
  reviver: () => reviver2,
  stringify: () => stringify
});
function isObject(val) {
  return val != null && typeof val === "object" && Array.isArray(val) === false;
}
function getRawTag(value2) {
  var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
  try {
    value2[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result2 = nativeObjectToString.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag] = tag;
    } else {
      delete value2[symToStringTag];
    }
  }
  return result2;
}
function objectToString(value2) {
  return nativeObjectToString2.call(value2);
}
function baseGetTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag_default(value2) : objectToString_default(value2);
}
function isObjectLike(value2) {
  return value2 != null && typeof value2 == "object";
}
function isSymbol(value2) {
  return typeof value2 == "symbol" || isObjectLike_default(value2) && baseGetTag_default(value2) == symbolTag;
}
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
  while (++index < length) {
    result2[index] = iteratee(array[index], index, array);
  }
  return result2;
}
function baseToString(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray_default(value2)) {
    return arrayMap_default(value2, baseToString) + "";
  }
  if (isSymbol_default(value2)) {
    return symbolToString ? symbolToString.call(value2) : "";
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
}
function isObject2(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
function isFunction(value2) {
  if (!isObject_default(value2)) {
    return false;
  }
  var tag = baseGetTag_default(value2);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
function baseIsNative(value2) {
  if (!isObject_default(value2) || isMasked_default(value2)) {
    return false;
  }
  var pattern = isFunction_default(value2) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value2));
}
function getValue(object, key2) {
  return object == null ? void 0 : object[key2];
}
function getNative(object, key2) {
  var value2 = getValue_default(object, key2);
  return baseIsNative_default(value2) ? value2 : void 0;
}
function eq(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
function isKey(value2, object) {
  if (isArray_default(value2)) {
    return false;
  }
  var type = typeof value2;
  if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol_default(value2)) {
    return true;
  }
  return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
}
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
function hashDelete(key2) {
  var result2 = this.has(key2) && delete this.__data__[key2];
  this.size -= result2 ? 1 : 0;
  return result2;
}
function hashGet(key2) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result2 = data[key2];
    return result2 === HASH_UNDEFINED ? void 0 : result2;
  }
  return hasOwnProperty3.call(data, key2) ? data[key2] : void 0;
}
function hashHas(key2) {
  var data = this.__data__;
  return nativeCreate_default ? data[key2] !== void 0 : hasOwnProperty4.call(data, key2);
}
function hashSet(key2, value2) {
  var data = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data[key2] = nativeCreate_default && value2 === void 0 ? HASH_UNDEFINED2 : value2;
  return this;
}
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function assocIndexOf(array, key2) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key2)) {
      return length;
    }
  }
  return -1;
}
function listCacheDelete(key2) {
  var data = this.__data__, index = assocIndexOf_default(data, key2);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key2) {
  var data = this.__data__, index = assocIndexOf_default(data, key2);
  return index < 0 ? void 0 : data[index][1];
}
function listCacheHas(key2) {
  return assocIndexOf_default(this.__data__, key2) > -1;
}
function listCacheSet(key2, value2) {
  var data = this.__data__, index = assocIndexOf_default(data, key2);
  if (index < 0) {
    ++this.size;
    data.push([key2, value2]);
  } else {
    data[index][1] = value2;
  }
  return this;
}
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
function isKeyable(value2) {
  var type = typeof value2;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
}
function getMapData(map, key2) {
  var data = map.__data__;
  return isKeyable_default(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
}
function mapCacheDelete(key2) {
  var result2 = getMapData_default(this, key2)["delete"](key2);
  this.size -= result2 ? 1 : 0;
  return result2;
}
function mapCacheGet(key2) {
  return getMapData_default(this, key2).get(key2);
}
function mapCacheHas(key2) {
  return getMapData_default(this, key2).has(key2);
}
function mapCacheSet(key2, value2) {
  var data = getMapData_default(this, key2), size = data.size;
  data.set(key2, value2);
  this.size += data.size == size ? 0 : 1;
  return this;
}
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args2 = arguments, key2 = resolver ? resolver.apply(this, args2) : args2[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result2 = func.apply(this, args2);
    memoized.cache = cache.set(key2, result2) || cache;
    return result2;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
function memoizeCapped(func) {
  var result2 = memoize_default(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key2;
  });
  var cache = result2.cache;
  return result2;
}
function toString(value2) {
  return value2 == null ? "" : baseToString_default(value2);
}
function castPath(value2, object) {
  if (isArray_default(value2)) {
    return value2;
  }
  return isKey_default(value2, object) ? [value2] : stringToPath_default(toString_default(value2));
}
function toKey(value2) {
  if (typeof value2 == "string" || isSymbol_default(value2)) {
    return value2;
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY2 ? "-0" : result2;
}
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
function get(object, path, defaultValue) {
  var result2 = object == null ? void 0 : baseGet_default(object, path);
  return result2 === void 0 ? defaultValue : result2;
}
function convertUnconventionalData(data) {
  if (!isObject3(data)) {
    return data;
  }
  let result2 = data;
  let wasMutated = false;
  if (typeof Event !== "undefined" && data instanceof Event) {
    result2 = extractEventHiddenProperties(result2);
    wasMutated = true;
  }
  result2 = Object.keys(result2).reduce((acc, key2) => {
    try {
      if (result2[key2]) {
        result2[key2].toJSON;
      }
      acc[key2] = result2[key2];
    } catch (err) {
      wasMutated = true;
    }
    return acc;
  }, {});
  return wasMutated ? result2 : data;
}
var import_memoizerific, require_shams, require_has_symbols, require_implementation, require_function_bind, require_src, require_get_intrinsic, require_call_bind, require_callBound, require_shams2, require_is_regex, require_is_function, require_is_symbol, import_is_regex, import_is_function, import_is_symbol, freeGlobal, freeGlobal_default, freeSelf, root2, root_default, Symbol2, Symbol_default, objectProto, hasOwnProperty, nativeObjectToString, symToStringTag, getRawTag_default, objectProto2, nativeObjectToString2, objectToString_default, nullTag, undefinedTag, symToStringTag2, baseGetTag_default, isObjectLike_default, symbolTag, isSymbol_default, arrayMap_default, isArray, isArray_default, INFINITY, symbolProto, symbolToString, baseToString_default, isObject_default, asyncTag, funcTag, genTag, proxyTag, isFunction_default, coreJsData, coreJsData_default, maskSrcKey, isMasked_default, funcProto, funcToString, toSource_default, reRegExpChar, reIsHostCtor, funcProto2, objectProto3, funcToString2, hasOwnProperty2, reIsNative, baseIsNative_default, getValue_default, getNative_default, eq_default, reIsDeepProp, reIsPlainProp, isKey_default, nativeCreate, nativeCreate_default, hashClear_default, hashDelete_default, HASH_UNDEFINED, objectProto4, hasOwnProperty3, hashGet_default, objectProto5, hasOwnProperty4, hashHas_default, HASH_UNDEFINED2, hashSet_default, Hash_default, listCacheClear_default, assocIndexOf_default, arrayProto, splice, listCacheDelete_default, listCacheGet_default, listCacheHas_default, listCacheSet_default, ListCache_default, Map2, Map_default, mapCacheClear_default, isKeyable_default, getMapData_default, mapCacheDelete_default, mapCacheGet_default, mapCacheHas_default, mapCacheSet_default, MapCache_default, FUNC_ERROR_TEXT, memoize_default, MAX_MEMOIZE_SIZE, memoizeCapped_default, rePropName, reEscapeChar, stringToPath, stringToPath_default, toString_default, castPath_default, INFINITY2, toKey_default, baseGet_default, get_default, isObject3, removeCodeComments, cleanCode, convertShorthandMethods, dateFormat, isJSON, replacer, reviver2, defaultOptions, stringify, mutator, parse;
var init_dist = __esm({
  "node_modules/.pnpm/telejson@7.2.0/node_modules/telejson/dist/index.mjs"() {
    "use strict";
    init_chunk_465TF3XA();
    import_memoizerific = __toESM(require_memoizerific(), 1);
    require_shams = __commonJS2({
      "node_modules/has-symbols/shams.js"(exports2, module2) {
        "use strict";
        module2.exports = function hasSymbols() {
          if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
            return false;
          }
          if (typeof Symbol.iterator === "symbol") {
            return true;
          }
          var obj = {};
          var sym = Symbol("test");
          var symObj = Object(sym);
          if (typeof sym === "string") {
            return false;
          }
          if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
            return false;
          }
          if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
            return false;
          }
          var symVal = 42;
          obj[sym] = symVal;
          for (sym in obj) {
            return false;
          }
          if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
            return false;
          }
          if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
            return false;
          }
          var syms = Object.getOwnPropertySymbols(obj);
          if (syms.length !== 1 || syms[0] !== sym) {
            return false;
          }
          if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
            return false;
          }
          if (typeof Object.getOwnPropertyDescriptor === "function") {
            var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
            if (descriptor.value !== symVal || descriptor.enumerable !== true) {
              return false;
            }
          }
          return true;
        };
      }
    });
    require_has_symbols = __commonJS2({
      "node_modules/has-symbols/index.js"(exports2, module2) {
        "use strict";
        var origSymbol = typeof Symbol !== "undefined" && Symbol;
        var hasSymbolSham = require_shams();
        module2.exports = function hasNativeSymbols() {
          if (typeof origSymbol !== "function") {
            return false;
          }
          if (typeof Symbol !== "function") {
            return false;
          }
          if (typeof origSymbol("foo") !== "symbol") {
            return false;
          }
          if (typeof Symbol("bar") !== "symbol") {
            return false;
          }
          return hasSymbolSham();
        };
      }
    });
    require_implementation = __commonJS2({
      "node_modules/function-bind/implementation.js"(exports2, module2) {
        "use strict";
        var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
        var slice = Array.prototype.slice;
        var toStr = Object.prototype.toString;
        var funcType = "[object Function]";
        module2.exports = function bind(that) {
          var target = this;
          if (typeof target !== "function" || toStr.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
          }
          var args2 = slice.call(arguments, 1);
          var bound;
          var binder = function() {
            if (this instanceof bound) {
              var result2 = target.apply(
                this,
                args2.concat(slice.call(arguments))
              );
              if (Object(result2) === result2) {
                return result2;
              }
              return this;
            } else {
              return target.apply(
                that,
                args2.concat(slice.call(arguments))
              );
            }
          };
          var boundLength = Math.max(0, target.length - args2.length);
          var boundArgs = [];
          for (var i = 0; i < boundLength; i++) {
            boundArgs.push("$" + i);
          }
          bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
          if (target.prototype) {
            var Empty = function Empty2() {
            };
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
          }
          return bound;
        };
      }
    });
    require_function_bind = __commonJS2({
      "node_modules/function-bind/index.js"(exports2, module2) {
        "use strict";
        var implementation = require_implementation();
        module2.exports = Function.prototype.bind || implementation;
      }
    });
    require_src = __commonJS2({
      "node_modules/has/src/index.js"(exports2, module2) {
        "use strict";
        var bind = require_function_bind();
        module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
      }
    });
    require_get_intrinsic = __commonJS2({
      "node_modules/get-intrinsic/index.js"(exports2, module2) {
        "use strict";
        var undefined2;
        var $SyntaxError = SyntaxError;
        var $Function = Function;
        var $TypeError = TypeError;
        var getEvalledConstructor = function(expressionSyntax) {
          try {
            return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
          } catch (e) {
          }
        };
        var $gOPD = Object.getOwnPropertyDescriptor;
        if ($gOPD) {
          try {
            $gOPD({}, "");
          } catch (e) {
            $gOPD = null;
          }
        }
        var throwTypeError = function() {
          throw new $TypeError();
        };
        var ThrowTypeError = $gOPD ? function() {
          try {
            arguments.callee;
            return throwTypeError;
          } catch (calleeThrows) {
            try {
              return $gOPD(arguments, "callee").get;
            } catch (gOPDthrows) {
              return throwTypeError;
            }
          }
        }() : throwTypeError;
        var hasSymbols = require_has_symbols()();
        var getProto = Object.getPrototypeOf || function(x) {
          return x.__proto__;
        };
        var needsEval = {};
        var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
        var INTRINSICS = {
          "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
          "%Array%": Array,
          "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
          "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
          "%AsyncFromSyncIteratorPrototype%": undefined2,
          "%AsyncFunction%": needsEval,
          "%AsyncGenerator%": needsEval,
          "%AsyncGeneratorFunction%": needsEval,
          "%AsyncIteratorPrototype%": needsEval,
          "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
          "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
          "%Boolean%": Boolean,
          "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
          "%Date%": Date,
          "%decodeURI%": decodeURI,
          "%decodeURIComponent%": decodeURIComponent,
          "%encodeURI%": encodeURI,
          "%encodeURIComponent%": encodeURIComponent,
          "%Error%": Error,
          "%eval%": eval,
          "%EvalError%": EvalError,
          "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
          "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
          "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
          "%Function%": $Function,
          "%GeneratorFunction%": needsEval,
          "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
          "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
          "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
          "%isFinite%": isFinite,
          "%isNaN%": isNaN,
          "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
          "%JSON%": typeof JSON === "object" ? JSON : undefined2,
          "%Map%": typeof Map === "undefined" ? undefined2 : Map,
          "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
          "%Math%": Math,
          "%Number%": Number,
          "%Object%": Object,
          "%parseFloat%": parseFloat,
          "%parseInt%": parseInt,
          "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
          "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
          "%RangeError%": RangeError,
          "%ReferenceError%": ReferenceError,
          "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
          "%RegExp%": RegExp,
          "%Set%": typeof Set === "undefined" ? undefined2 : Set,
          "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
          "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
          "%String%": String,
          "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
          "%Symbol%": hasSymbols ? Symbol : undefined2,
          "%SyntaxError%": $SyntaxError,
          "%ThrowTypeError%": ThrowTypeError,
          "%TypedArray%": TypedArray,
          "%TypeError%": $TypeError,
          "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
          "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
          "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
          "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
          "%URIError%": URIError,
          "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
          "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
          "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
        };
        var doEval = function doEval2(name2) {
          var value2;
          if (name2 === "%AsyncFunction%") {
            value2 = getEvalledConstructor("async function () {}");
          } else if (name2 === "%GeneratorFunction%") {
            value2 = getEvalledConstructor("function* () {}");
          } else if (name2 === "%AsyncGeneratorFunction%") {
            value2 = getEvalledConstructor("async function* () {}");
          } else if (name2 === "%AsyncGenerator%") {
            var fn2 = doEval2("%AsyncGeneratorFunction%");
            if (fn2) {
              value2 = fn2.prototype;
            }
          } else if (name2 === "%AsyncIteratorPrototype%") {
            var gen = doEval2("%AsyncGenerator%");
            if (gen) {
              value2 = getProto(gen.prototype);
            }
          }
          INTRINSICS[name2] = value2;
          return value2;
        };
        var LEGACY_ALIASES = {
          "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
          "%ArrayPrototype%": ["Array", "prototype"],
          "%ArrayProto_entries%": ["Array", "prototype", "entries"],
          "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
          "%ArrayProto_keys%": ["Array", "prototype", "keys"],
          "%ArrayProto_values%": ["Array", "prototype", "values"],
          "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
          "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
          "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
          "%BooleanPrototype%": ["Boolean", "prototype"],
          "%DataViewPrototype%": ["DataView", "prototype"],
          "%DatePrototype%": ["Date", "prototype"],
          "%ErrorPrototype%": ["Error", "prototype"],
          "%EvalErrorPrototype%": ["EvalError", "prototype"],
          "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
          "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
          "%FunctionPrototype%": ["Function", "prototype"],
          "%Generator%": ["GeneratorFunction", "prototype"],
          "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
          "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
          "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
          "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
          "%JSONParse%": ["JSON", "parse"],
          "%JSONStringify%": ["JSON", "stringify"],
          "%MapPrototype%": ["Map", "prototype"],
          "%NumberPrototype%": ["Number", "prototype"],
          "%ObjectPrototype%": ["Object", "prototype"],
          "%ObjProto_toString%": ["Object", "prototype", "toString"],
          "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
          "%PromisePrototype%": ["Promise", "prototype"],
          "%PromiseProto_then%": ["Promise", "prototype", "then"],
          "%Promise_all%": ["Promise", "all"],
          "%Promise_reject%": ["Promise", "reject"],
          "%Promise_resolve%": ["Promise", "resolve"],
          "%RangeErrorPrototype%": ["RangeError", "prototype"],
          "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
          "%RegExpPrototype%": ["RegExp", "prototype"],
          "%SetPrototype%": ["Set", "prototype"],
          "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
          "%StringPrototype%": ["String", "prototype"],
          "%SymbolPrototype%": ["Symbol", "prototype"],
          "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
          "%TypedArrayPrototype%": ["TypedArray", "prototype"],
          "%TypeErrorPrototype%": ["TypeError", "prototype"],
          "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
          "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
          "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
          "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
          "%URIErrorPrototype%": ["URIError", "prototype"],
          "%WeakMapPrototype%": ["WeakMap", "prototype"],
          "%WeakSetPrototype%": ["WeakSet", "prototype"]
        };
        var bind = require_function_bind();
        var hasOwn = require_src();
        var $concat = bind.call(Function.call, Array.prototype.concat);
        var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
        var $replace = bind.call(Function.call, String.prototype.replace);
        var $strSlice = bind.call(Function.call, String.prototype.slice);
        var $exec = bind.call(Function.call, RegExp.prototype.exec);
        var rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
        var reEscapeChar2 = /\\(\\)?/g;
        var stringToPath2 = function stringToPath3(string) {
          var first = $strSlice(string, 0, 1);
          var last = $strSlice(string, -1);
          if (first === "%" && last !== "%") {
            throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
          } else if (last === "%" && first !== "%") {
            throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
          }
          var result2 = [];
          $replace(string, rePropName2, function(match, number, quote, subString) {
            result2[result2.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number || match;
          });
          return result2;
        };
        var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
          var intrinsicName = name2;
          var alias;
          if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
            alias = LEGACY_ALIASES[intrinsicName];
            intrinsicName = "%" + alias[0] + "%";
          }
          if (hasOwn(INTRINSICS, intrinsicName)) {
            var value2 = INTRINSICS[intrinsicName];
            if (value2 === needsEval) {
              value2 = doEval(intrinsicName);
            }
            if (typeof value2 === "undefined" && !allowMissing) {
              throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
            }
            return {
              alias,
              name: intrinsicName,
              value: value2
            };
          }
          throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
        };
        module2.exports = function GetIntrinsic(name2, allowMissing) {
          if (typeof name2 !== "string" || name2.length === 0) {
            throw new $TypeError("intrinsic name must be a non-empty string");
          }
          if (arguments.length > 1 && typeof allowMissing !== "boolean") {
            throw new $TypeError('"allowMissing" argument must be a boolean');
          }
          if ($exec(/^%?[^%]*%?$/, name2) === null) {
            throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
          }
          var parts = stringToPath2(name2);
          var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
          var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
          var intrinsicRealName = intrinsic.name;
          var value2 = intrinsic.value;
          var skipFurtherCaching = false;
          var alias = intrinsic.alias;
          if (alias) {
            intrinsicBaseName = alias[0];
            $spliceApply(parts, $concat([0, 1], alias));
          }
          for (var i = 1, isOwn = true; i < parts.length; i += 1) {
            var part = parts[i];
            var first = $strSlice(part, 0, 1);
            var last = $strSlice(part, -1);
            if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
              throw new $SyntaxError("property names with quotes must have matching quotes");
            }
            if (part === "constructor" || !isOwn) {
              skipFurtherCaching = true;
            }
            intrinsicBaseName += "." + part;
            intrinsicRealName = "%" + intrinsicBaseName + "%";
            if (hasOwn(INTRINSICS, intrinsicRealName)) {
              value2 = INTRINSICS[intrinsicRealName];
            } else if (value2 != null) {
              if (!(part in value2)) {
                if (!allowMissing) {
                  throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
                }
                return void 0;
              }
              if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value2, part);
                isOwn = !!desc;
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                  value2 = desc.get;
                } else {
                  value2 = value2[part];
                }
              } else {
                isOwn = hasOwn(value2, part);
                value2 = value2[part];
              }
              if (isOwn && !skipFurtherCaching) {
                INTRINSICS[intrinsicRealName] = value2;
              }
            }
          }
          return value2;
        };
      }
    });
    require_call_bind = __commonJS2({
      "node_modules/call-bind/index.js"(exports2, module2) {
        "use strict";
        var bind = require_function_bind();
        var GetIntrinsic = require_get_intrinsic();
        var $apply = GetIntrinsic("%Function.prototype.apply%");
        var $call = GetIntrinsic("%Function.prototype.call%");
        var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
        var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
        var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
        var $max = GetIntrinsic("%Math.max%");
        if ($defineProperty) {
          try {
            $defineProperty({}, "a", { value: 1 });
          } catch (e) {
            $defineProperty = null;
          }
        }
        module2.exports = function callBind(originalFunction) {
          var func = $reflectApply(bind, $call, arguments);
          if ($gOPD && $defineProperty) {
            var desc = $gOPD(func, "length");
            if (desc.configurable) {
              $defineProperty(
                func,
                "length",
                { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
              );
            }
          }
          return func;
        };
        var applyBind = function applyBind2() {
          return $reflectApply(bind, $apply, arguments);
        };
        if ($defineProperty) {
          $defineProperty(module2.exports, "apply", { value: applyBind });
        } else {
          module2.exports.apply = applyBind;
        }
      }
    });
    require_callBound = __commonJS2({
      "node_modules/call-bind/callBound.js"(exports2, module2) {
        "use strict";
        var GetIntrinsic = require_get_intrinsic();
        var callBind = require_call_bind();
        var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
        module2.exports = function callBoundIntrinsic(name2, allowMissing) {
          var intrinsic = GetIntrinsic(name2, !!allowMissing);
          if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
            return callBind(intrinsic);
          }
          return intrinsic;
        };
      }
    });
    require_shams2 = __commonJS2({
      "node_modules/has-tostringtag/shams.js"(exports2, module2) {
        "use strict";
        var hasSymbols = require_shams();
        module2.exports = function hasToStringTagShams() {
          return hasSymbols() && !!Symbol.toStringTag;
        };
      }
    });
    require_is_regex = __commonJS2({
      "node_modules/is-regex/index.js"(exports2, module2) {
        "use strict";
        var callBound = require_callBound();
        var hasToStringTag = require_shams2()();
        var has;
        var $exec;
        var isRegexMarker;
        var badStringifier;
        if (hasToStringTag) {
          has = callBound("Object.prototype.hasOwnProperty");
          $exec = callBound("RegExp.prototype.exec");
          isRegexMarker = {};
          throwRegexMarker = function() {
            throw isRegexMarker;
          };
          badStringifier = {
            toString: throwRegexMarker,
            valueOf: throwRegexMarker
          };
          if (typeof Symbol.toPrimitive === "symbol") {
            badStringifier[Symbol.toPrimitive] = throwRegexMarker;
          }
        }
        var throwRegexMarker;
        var $toString = callBound("Object.prototype.toString");
        var gOPD = Object.getOwnPropertyDescriptor;
        var regexClass = "[object RegExp]";
        module2.exports = hasToStringTag ? function isRegex(value2) {
          if (!value2 || typeof value2 !== "object") {
            return false;
          }
          var descriptor = gOPD(value2, "lastIndex");
          var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
          if (!hasLastIndexDataProperty) {
            return false;
          }
          try {
            $exec(value2, badStringifier);
          } catch (e) {
            return e === isRegexMarker;
          }
        } : function isRegex(value2) {
          if (!value2 || typeof value2 !== "object" && typeof value2 !== "function") {
            return false;
          }
          return $toString(value2) === regexClass;
        };
      }
    });
    require_is_function = __commonJS2({
      "node_modules/is-function/index.js"(exports2, module2) {
        module2.exports = isFunction3;
        var toString2 = Object.prototype.toString;
        function isFunction3(fn2) {
          if (!fn2) {
            return false;
          }
          var string = toString2.call(fn2);
          return string === "[object Function]" || typeof fn2 === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && (fn2 === window.setTimeout || fn2 === window.alert || fn2 === window.confirm || fn2 === window.prompt);
        }
      }
    });
    require_is_symbol = __commonJS2({
      "node_modules/is-symbol/index.js"(exports2, module2) {
        "use strict";
        var toStr = Object.prototype.toString;
        var hasSymbols = require_has_symbols()();
        if (hasSymbols) {
          symToStr = Symbol.prototype.toString;
          symStringRegex = /^Symbol\(.*\)$/;
          isSymbolObject = function isRealSymbolObject(value2) {
            if (typeof value2.valueOf() !== "symbol") {
              return false;
            }
            return symStringRegex.test(symToStr.call(value2));
          };
          module2.exports = function isSymbol3(value2) {
            if (typeof value2 === "symbol") {
              return true;
            }
            if (toStr.call(value2) !== "[object Symbol]") {
              return false;
            }
            try {
              return isSymbolObject(value2);
            } catch (e) {
              return false;
            }
          };
        } else {
          module2.exports = function isSymbol3(value2) {
            return false;
          };
        }
        var symToStr;
        var symStringRegex;
        var isSymbolObject;
      }
    });
    import_is_regex = __toESM2(require_is_regex());
    import_is_function = __toESM2(require_is_function());
    import_is_symbol = __toESM2(require_is_symbol());
    freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    freeGlobal_default = freeGlobal;
    freeSelf = typeof self == "object" && self && self.Object === Object && self;
    root2 = freeGlobal_default || freeSelf || Function("return this")();
    root_default = root2;
    Symbol2 = root_default.Symbol;
    Symbol_default = Symbol2;
    objectProto = Object.prototype;
    hasOwnProperty = objectProto.hasOwnProperty;
    nativeObjectToString = objectProto.toString;
    symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
    getRawTag_default = getRawTag;
    objectProto2 = Object.prototype;
    nativeObjectToString2 = objectProto2.toString;
    objectToString_default = objectToString;
    nullTag = "[object Null]";
    undefinedTag = "[object Undefined]";
    symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
    baseGetTag_default = baseGetTag;
    isObjectLike_default = isObjectLike;
    symbolTag = "[object Symbol]";
    isSymbol_default = isSymbol;
    arrayMap_default = arrayMap;
    isArray = Array.isArray;
    isArray_default = isArray;
    INFINITY = 1 / 0;
    symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
    symbolToString = symbolProto ? symbolProto.toString : void 0;
    baseToString_default = baseToString;
    isObject_default = isObject2;
    asyncTag = "[object AsyncFunction]";
    funcTag = "[object Function]";
    genTag = "[object GeneratorFunction]";
    proxyTag = "[object Proxy]";
    isFunction_default = isFunction;
    coreJsData = root_default["__core-js_shared__"];
    coreJsData_default = coreJsData;
    maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    isMasked_default = isMasked;
    funcProto = Function.prototype;
    funcToString = funcProto.toString;
    toSource_default = toSource;
    reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    reIsHostCtor = /^\[object .+?Constructor\]$/;
    funcProto2 = Function.prototype;
    objectProto3 = Object.prototype;
    funcToString2 = funcProto2.toString;
    hasOwnProperty2 = objectProto3.hasOwnProperty;
    reIsNative = RegExp(
      "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    baseIsNative_default = baseIsNative;
    getValue_default = getValue;
    getNative_default = getNative;
    eq_default = eq;
    reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    reIsPlainProp = /^\w*$/;
    isKey_default = isKey;
    nativeCreate = getNative_default(Object, "create");
    nativeCreate_default = nativeCreate;
    hashClear_default = hashClear;
    hashDelete_default = hashDelete;
    HASH_UNDEFINED = "__lodash_hash_undefined__";
    objectProto4 = Object.prototype;
    hasOwnProperty3 = objectProto4.hasOwnProperty;
    hashGet_default = hashGet;
    objectProto5 = Object.prototype;
    hasOwnProperty4 = objectProto5.hasOwnProperty;
    hashHas_default = hashHas;
    HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    hashSet_default = hashSet;
    Hash.prototype.clear = hashClear_default;
    Hash.prototype["delete"] = hashDelete_default;
    Hash.prototype.get = hashGet_default;
    Hash.prototype.has = hashHas_default;
    Hash.prototype.set = hashSet_default;
    Hash_default = Hash;
    listCacheClear_default = listCacheClear;
    assocIndexOf_default = assocIndexOf;
    arrayProto = Array.prototype;
    splice = arrayProto.splice;
    listCacheDelete_default = listCacheDelete;
    listCacheGet_default = listCacheGet;
    listCacheHas_default = listCacheHas;
    listCacheSet_default = listCacheSet;
    ListCache.prototype.clear = listCacheClear_default;
    ListCache.prototype["delete"] = listCacheDelete_default;
    ListCache.prototype.get = listCacheGet_default;
    ListCache.prototype.has = listCacheHas_default;
    ListCache.prototype.set = listCacheSet_default;
    ListCache_default = ListCache;
    Map2 = getNative_default(root_default, "Map");
    Map_default = Map2;
    mapCacheClear_default = mapCacheClear;
    isKeyable_default = isKeyable;
    getMapData_default = getMapData;
    mapCacheDelete_default = mapCacheDelete;
    mapCacheGet_default = mapCacheGet;
    mapCacheHas_default = mapCacheHas;
    mapCacheSet_default = mapCacheSet;
    MapCache.prototype.clear = mapCacheClear_default;
    MapCache.prototype["delete"] = mapCacheDelete_default;
    MapCache.prototype.get = mapCacheGet_default;
    MapCache.prototype.has = mapCacheHas_default;
    MapCache.prototype.set = mapCacheSet_default;
    MapCache_default = MapCache;
    FUNC_ERROR_TEXT = "Expected a function";
    memoize.Cache = MapCache_default;
    memoize_default = memoize;
    MAX_MEMOIZE_SIZE = 500;
    memoizeCapped_default = memoizeCapped;
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    reEscapeChar = /\\(\\)?/g;
    stringToPath = memoizeCapped_default(function(string) {
      var result2 = [];
      if (string.charCodeAt(0) === 46) {
        result2.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result2;
    });
    stringToPath_default = stringToPath;
    toString_default = toString;
    castPath_default = castPath;
    INFINITY2 = 1 / 0;
    toKey_default = toKey;
    baseGet_default = baseGet;
    get_default = get;
    isObject3 = isObject;
    removeCodeComments = (code) => {
      let inQuoteChar = null;
      let inBlockComment = false;
      let inLineComment = false;
      let inRegexLiteral = false;
      let newCode = "";
      if (code.indexOf("//") >= 0 || code.indexOf("/*") >= 0) {
        for (let i = 0; i < code.length; i += 1) {
          if (!inQuoteChar && !inBlockComment && !inLineComment && !inRegexLiteral) {
            if (code[i] === '"' || code[i] === "'" || code[i] === "`") {
              inQuoteChar = code[i];
            } else if (code[i] === "/" && code[i + 1] === "*") {
              inBlockComment = true;
            } else if (code[i] === "/" && code[i + 1] === "/") {
              inLineComment = true;
            } else if (code[i] === "/" && code[i + 1] !== "/") {
              inRegexLiteral = true;
            }
          } else {
            if (inQuoteChar && (code[i] === inQuoteChar && code[i - 1] !== "\\" || code[i] === "\n" && inQuoteChar !== "`")) {
              inQuoteChar = null;
            }
            if (inRegexLiteral && (code[i] === "/" && code[i - 1] !== "\\" || code[i] === "\n")) {
              inRegexLiteral = false;
            }
            if (inBlockComment && code[i - 1] === "/" && code[i - 2] === "*") {
              inBlockComment = false;
            }
            if (inLineComment && code[i] === "\n") {
              inLineComment = false;
            }
          }
          if (!inBlockComment && !inLineComment) {
            newCode += code[i];
          }
        }
      } else {
        newCode = code;
      }
      return newCode;
    };
    cleanCode = (0, import_memoizerific.default)(1e4)(
      (code) => removeCodeComments(code).replace(/\n\s*/g, "").trim()
    );
    convertShorthandMethods = function convertShorthandMethods2(key2, stringified) {
      const fnHead = stringified.slice(0, stringified.indexOf("{"));
      const fnBody = stringified.slice(stringified.indexOf("{"));
      if (fnHead.includes("=>")) {
        return stringified;
      }
      if (fnHead.includes("function")) {
        return stringified;
      }
      let modifiedHead = fnHead;
      modifiedHead = modifiedHead.replace(key2, "function");
      return modifiedHead + fnBody;
    };
    dateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$/;
    isJSON = (input) => input.match(/^[\[\{\"\}].*[\]\}\"]$/);
    replacer = function replacer2(options2) {
      let objects;
      let map;
      let stack;
      let keys;
      return function replace(key2, value2) {
        try {
          if (key2 === "") {
            keys = [];
            objects = /* @__PURE__ */ new Map([[value2, "[]"]]);
            map = /* @__PURE__ */ new Map();
            stack = [];
            return value2;
          }
          const origin = map.get(this) || this;
          while (stack.length && origin !== stack[0]) {
            stack.shift();
            keys.pop();
          }
          if (typeof value2 === "boolean") {
            return value2;
          }
          if (value2 === void 0) {
            if (!options2.allowUndefined) {
              return void 0;
            }
            return "_undefined_";
          }
          if (value2 === null) {
            return null;
          }
          if (typeof value2 === "number") {
            if (value2 === -Infinity) {
              return "_-Infinity_";
            }
            if (value2 === Infinity) {
              return "_Infinity_";
            }
            if (Number.isNaN(value2)) {
              return "_NaN_";
            }
            return value2;
          }
          if (typeof value2 === "bigint") {
            return `_bigint_${value2.toString()}`;
          }
          if (typeof value2 === "string") {
            if (dateFormat.test(value2)) {
              if (!options2.allowDate) {
                return void 0;
              }
              return `_date_${value2}`;
            }
            return value2;
          }
          if ((0, import_is_regex.default)(value2)) {
            if (!options2.allowRegExp) {
              return void 0;
            }
            return `_regexp_${value2.flags}|${value2.source}`;
          }
          if ((0, import_is_function.default)(value2)) {
            if (!options2.allowFunction) {
              return void 0;
            }
            const { name: name2 } = value2;
            const stringified = value2.toString();
            if (!stringified.match(
              /(\[native code\]|WEBPACK_IMPORTED_MODULE|__webpack_exports__|__webpack_require__)/
            )) {
              return `_function_${name2}|${cleanCode(convertShorthandMethods(key2, stringified))}`;
            }
            return `_function_${name2}|${(() => {
            }).toString()}`;
          }
          if ((0, import_is_symbol.default)(value2)) {
            if (!options2.allowSymbol) {
              return void 0;
            }
            const globalRegistryKey = Symbol.keyFor(value2);
            if (globalRegistryKey !== void 0) {
              return `_gsymbol_${globalRegistryKey}`;
            }
            return `_symbol_${value2.toString().slice(7, -1)}`;
          }
          if (stack.length >= options2.maxDepth) {
            if (Array.isArray(value2)) {
              return `[Array(${value2.length})]`;
            }
            return "[Object]";
          }
          if (value2 === this) {
            return `_duplicate_${JSON.stringify(keys)}`;
          }
          if (value2 instanceof Error && options2.allowError) {
            return {
              __isConvertedError__: true,
              errorProperties: {
                ...value2.cause ? { cause: value2.cause } : {},
                ...value2,
                name: value2.name,
                message: value2.message,
                stack: value2.stack,
                "_constructor-name_": value2.constructor.name
              }
            };
          }
          if (value2.constructor && value2.constructor.name && value2.constructor.name !== "Object" && !Array.isArray(value2) && !options2.allowClass) {
            return void 0;
          }
          const found = objects.get(value2);
          if (!found) {
            const converted = Array.isArray(value2) ? value2 : convertUnconventionalData(value2);
            if (value2.constructor && value2.constructor.name && value2.constructor.name !== "Object" && !Array.isArray(value2) && options2.allowClass) {
              try {
                Object.assign(converted, { "_constructor-name_": value2.constructor.name });
              } catch (e) {
              }
            }
            keys.push(key2);
            stack.unshift(converted);
            objects.set(value2, JSON.stringify(keys));
            if (value2 !== converted) {
              map.set(value2, converted);
            }
            return converted;
          }
          return `_duplicate_${found}`;
        } catch (e) {
          return void 0;
        }
      };
    };
    reviver2 = function reviver(options) {
      const refs = [];
      let root;
      return function revive(key, value) {
        if (key === "") {
          root = value;
          refs.forEach(({ target, container, replacement }) => {
            const replacementArr = isJSON(replacement) ? JSON.parse(replacement) : replacement.split(".");
            if (replacementArr.length === 0) {
              container[target] = root;
            } else {
              container[target] = get_default(root, replacementArr);
            }
          });
        }
        if (key === "_constructor-name_") {
          return value;
        }
        if (isObject3(value) && value.__isConvertedError__) {
          const { message, ...properties } = value.errorProperties;
          const error = new Error(message);
          Object.assign(error, properties);
          return error;
        }
        if (isObject3(value) && value["_constructor-name_"] && options.allowFunction) {
          const name2 = value["_constructor-name_"];
          if (name2 !== "Object") {
            const Fn = new Function(`return function ${name2.replace(/[^a-zA-Z0-9$_]+/g, "")}(){}`)();
            Object.setPrototypeOf(value, new Fn());
          }
          delete value["_constructor-name_"];
          return value;
        }
        if (typeof value === "string" && value.startsWith("_function_") && options.allowFunction) {
          const [, name, source] = value.match(/_function_([^|]*)\|(.*)/) || [];
          const sourceSanitized = source.replace(/[(\(\))|\\| |\]|`]*$/, "");
          if (!options.lazyEval) {
            return eval(`(${sourceSanitized})`);
          }
          const result = (...args) => {
            const f = eval(`(${sourceSanitized})`);
            return f(...args);
          };
          Object.defineProperty(result, "toString", {
            value: () => sourceSanitized
          });
          Object.defineProperty(result, "name", {
            value: name
          });
          return result;
        }
        if (typeof value === "string" && value.startsWith("_regexp_") && options.allowRegExp) {
          const [, flags, source2] = value.match(/_regexp_([^|]*)\|(.*)/) || [];
          return new RegExp(source2, flags);
        }
        if (typeof value === "string" && value.startsWith("_date_") && options.allowDate) {
          return new Date(value.replace("_date_", ""));
        }
        if (typeof value === "string" && value.startsWith("_duplicate_")) {
          refs.push({ target: key, container: this, replacement: value.replace(/^_duplicate_/, "") });
          return null;
        }
        if (typeof value === "string" && value.startsWith("_symbol_") && options.allowSymbol) {
          return Symbol(value.replace("_symbol_", ""));
        }
        if (typeof value === "string" && value.startsWith("_gsymbol_") && options.allowSymbol) {
          return Symbol.for(value.replace("_gsymbol_", ""));
        }
        if (typeof value === "string" && value === "_-Infinity_") {
          return -Infinity;
        }
        if (typeof value === "string" && value === "_Infinity_") {
          return Infinity;
        }
        if (typeof value === "string" && value === "_NaN_") {
          return NaN;
        }
        if (typeof value === "string" && value.startsWith("_bigint_") && typeof BigInt === "function") {
          return BigInt(value.replace("_bigint_", ""));
        }
        return value;
      };
    };
    defaultOptions = {
      maxDepth: 10,
      space: void 0,
      allowFunction: true,
      allowRegExp: true,
      allowDate: true,
      allowClass: true,
      allowError: true,
      allowUndefined: true,
      allowSymbol: true,
      lazyEval: true
    };
    stringify = (data, options2 = {}) => {
      const mergedOptions = { ...defaultOptions, ...options2 };
      return JSON.stringify(convertUnconventionalData(data), replacer(mergedOptions), options2.space);
    };
    mutator = () => {
      const mutated = /* @__PURE__ */ new Map();
      return function mutateUndefined(value2) {
        if (isObject3(value2)) {
          Object.entries(value2).forEach(([k, v]) => {
            if (v === "_undefined_") {
              value2[k] = void 0;
            } else if (!mutated.get(v)) {
              mutated.set(v, true);
              mutateUndefined(v);
            }
          });
        }
        if (Array.isArray(value2)) {
          value2.forEach((v, index) => {
            if (v === "_undefined_") {
              mutated.set(v, true);
              value2[index] = void 0;
            } else if (!mutated.get(v)) {
              mutated.set(v, true);
              mutateUndefined(v);
            }
          });
        }
      };
    };
    parse = (data, options2 = {}) => {
      const mergedOptions = { ...defaultOptions, ...options2 };
      const result2 = JSON.parse(data, reviver2(mergedOptions));
      mutator()(result2);
      return result2;
    };
  }
});

// node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/tiny-invariant.cjs.js
var require_tiny_invariant_cjs = __commonJS({
  "node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/tiny-invariant.cjs.js"(exports2, module2) {
    "use strict";
    var isProduction = process.env.NODE_ENV === "production";
    var prefix = "Invariant failed";
    function invariant(condition, message) {
      if (condition) {
        return;
      }
      if (isProduction) {
        throw new Error(prefix);
      }
      var provided = typeof message === "function" ? message() : message;
      var value2 = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
      throw new Error(value2);
    }
    module2.exports = invariant;
  }
});

// node_modules/.pnpm/@storybook+channels@8.1.5/node_modules/@storybook/channels/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/.pnpm/@storybook+channels@8.1.5/node_modules/@storybook/channels/dist/index.js"(exports2, module2) {
    "use strict";
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, { Channel: () => Channel, PostMessageTransport: () => PostMessageTransport, WebsocketTransport: () => WebsocketTransport, createBrowserChannel: () => createBrowserChannel, default: () => src_default });
    module2.exports = __toCommonJS2(src_exports);
    var import_global3 = require_dist();
    var isMulti = (args2) => args2.transports !== void 0;
    var generateRandomId = () => Math.random().toString(16).slice(2);
    var Channel = class {
      constructor(input = {}) {
        this.sender = generateRandomId();
        this.events = {};
        this.data = {};
        this.transports = [];
        this.isAsync = input.async || false, isMulti(input) ? (this.transports = input.transports || [], this.transports.forEach((t) => {
          t.setHandler((event) => this.handleEvent(event));
        })) : this.transports = input.transport ? [input.transport] : [], this.transports.forEach((t) => {
          t.setHandler((event) => this.handleEvent(event));
        });
      }
      get hasTransport() {
        return this.transports.length > 0;
      }
      addListener(eventName, listener) {
        this.events[eventName] = this.events[eventName] || [], this.events[eventName].push(listener);
      }
      emit(eventName, ...args2) {
        let event = { type: eventName, args: args2, from: this.sender }, options2 = {};
        args2.length >= 1 && args2[0] && args2[0].options && (options2 = args2[0].options);
        let handler = () => {
          this.transports.forEach((t) => {
            t.send(event, options2);
          }), this.handleEvent(event);
        };
        this.isAsync ? setImmediate(handler) : handler();
      }
      last(eventName) {
        return this.data[eventName];
      }
      eventNames() {
        return Object.keys(this.events);
      }
      listenerCount(eventName) {
        let listeners = this.listeners(eventName);
        return listeners ? listeners.length : 0;
      }
      listeners(eventName) {
        return this.events[eventName] || void 0;
      }
      once(eventName, listener) {
        let onceListener = this.onceListener(eventName, listener);
        this.addListener(eventName, onceListener);
      }
      removeAllListeners(eventName) {
        eventName ? this.events[eventName] && delete this.events[eventName] : this.events = {};
      }
      removeListener(eventName, listener) {
        let listeners = this.listeners(eventName);
        listeners && (this.events[eventName] = listeners.filter((l) => l !== listener));
      }
      on(eventName, listener) {
        this.addListener(eventName, listener);
      }
      off(eventName, listener) {
        this.removeListener(eventName, listener);
      }
      handleEvent(event) {
        let listeners = this.listeners(event.type);
        listeners && listeners.length && listeners.forEach((fn2) => {
          fn2.apply(event, event.args);
        }), this.data[event.type] = event.args;
      }
      onceListener(eventName, listener) {
        let onceListener = (...args2) => (this.removeListener(eventName, onceListener), listener(...args2));
        return onceListener;
      }
    };
    var import_global = require_dist();
    var EVENTS = __toESM3(require_dist2());
    var import_client_logger2 = require_dist3();
    var import_telejson = (init_dist(), __toCommonJS(dist_exports));
    var import_tiny_invariant = __toESM3(require_tiny_invariant_cjs());
    var import_client_logger = require_dist3();
    var getEventSourceUrl = (event) => {
      let frames = Array.from(document.querySelectorAll("iframe[data-is-storybook]")), [frame, ...remainder] = frames.filter((element) => {
        var _a, _b;
        try {
          return ((_a = element.contentWindow) == null ? void 0 : _a.location.origin) === event.source.location.origin && ((_b = element.contentWindow) == null ? void 0 : _b.location.pathname) === event.source.location.pathname;
        } catch {
        }
        try {
          return element.contentWindow === event.source;
        } catch {
        }
        let src2 = element.getAttribute("src"), origin;
        try {
          if (!src2)
            return false;
          ({ origin } = new URL(src2, document.location.toString()));
        } catch {
          return false;
        }
        return origin === event.origin;
      }), src = frame == null ? void 0 : frame.getAttribute("src");
      if (src && remainder.length === 0) {
        let { protocol, host, pathname } = new URL(src, document.location.toString());
        return `${protocol}//${host}${pathname}`;
      }
      return remainder.length > 0 && import_client_logger.logger.error("found multiple candidates for event source"), null;
    };
    var { document: document2, location } = import_global.global;
    var KEY = "storybook-channel";
    var defaultEventOptions = { allowFunction: false, maxDepth: 25 };
    var PostMessageTransport = class {
      constructor(config) {
        var _a;
        this.config = config;
        this.connected = false;
        if (this.buffer = [], typeof ((_a = import_global.global) == null ? void 0 : _a.addEventListener) == "function" && import_global.global.addEventListener("message", this.handleEvent.bind(this), false), config.page !== "manager" && config.page !== "preview")
          throw new Error(`postmsg-channel: "config.page" cannot be "${config.page}"`);
      }
      setHandler(handler) {
        this.handler = (...args2) => {
          handler.apply(this, args2), !this.connected && this.getLocalFrame().length && (this.flush(), this.connected = true);
        };
      }
      send(event, options2) {
        let { target, allowRegExp, allowFunction, allowSymbol, allowDate, allowError, allowUndefined, allowClass, maxDepth, space, lazyEval } = options2 || {}, eventOptions = Object.fromEntries(Object.entries({ allowRegExp, allowFunction, allowSymbol, allowDate, allowError, allowUndefined, allowClass, maxDepth, space, lazyEval }).filter(([k, v]) => typeof v < "u")), stringifyOptions = { ...defaultEventOptions, ...import_global.global.CHANNEL_OPTIONS || {}, ...eventOptions }, frames = this.getFrames(target), query = new URLSearchParams((location == null ? void 0 : location.search) || ""), data = (0, import_telejson.stringify)({ key: KEY, event, refId: query.get("refId") }, stringifyOptions);
        return frames.length ? (this.buffer.length && this.flush(), frames.forEach((f2) => {
          try {
            f2.postMessage(data, "*");
          } catch {
            import_client_logger2.logger.error("sending over postmessage fail");
          }
        }), Promise.resolve(null)) : new Promise((resolve, reject) => {
          this.buffer.push({ event, resolve, reject });
        });
      }
      flush() {
        let { buffer } = this;
        this.buffer = [], buffer.forEach((item) => {
          this.send(item.event).then(item.resolve).catch(item.reject);
        });
      }
      getFrames(target) {
        if (this.config.page === "manager") {
          let list = Array.from(document2.querySelectorAll("iframe[data-is-storybook][data-is-loaded]")).flatMap((e) => {
            try {
              return e.contentWindow && e.dataset.isStorybook !== void 0 && e.id === target ? [e.contentWindow] : [];
            } catch {
              return [];
            }
          });
          return (list == null ? void 0 : list.length) ? list : this.getCurrentFrames();
        }
        return import_global.global && import_global.global.parent && import_global.global.parent !== import_global.global.self ? [import_global.global.parent] : [];
      }
      getCurrentFrames() {
        return this.config.page === "manager" ? Array.from(document2.querySelectorAll('[data-is-storybook="true"]')).flatMap((e) => e.contentWindow ? [e.contentWindow] : []) : import_global.global && import_global.global.parent ? [import_global.global.parent] : [];
      }
      getLocalFrame() {
        return this.config.page === "manager" ? Array.from(document2.querySelectorAll("#storybook-preview-iframe")).flatMap((e) => e.contentWindow ? [e.contentWindow] : []) : import_global.global && import_global.global.parent ? [import_global.global.parent] : [];
      }
      handleEvent(rawEvent) {
        try {
          let { data } = rawEvent, { key: key2, event, refId } = typeof data == "string" && (0, import_telejson.isJSON)(data) ? (0, import_telejson.parse)(data, import_global.global.CHANNEL_OPTIONS || {}) : data;
          if (key2 === KEY) {
            let pageString = this.config.page === "manager" ? '<span style="color: #37D5D3; background: black"> manager </span>' : '<span style="color: #1EA7FD; background: black"> preview </span>', eventString = Object.values(EVENTS).includes(event.type) ? `<span style="color: #FF4785">${event.type}</span>` : `<span style="color: #FFAE00">${event.type}</span>`;
            if (refId && (event.refId = refId), event.source = this.config.page === "preview" ? rawEvent.origin : getEventSourceUrl(rawEvent), !event.source) {
              import_client_logger2.pretty.error(`${pageString} received ${eventString} but was unable to determine the source of the event`);
              return;
            }
            let message = `${pageString} received ${eventString} (${data.length})`;
            import_client_logger2.pretty.debug(location.origin !== event.source ? message : `${message} <span style="color: gray">(on ${location.origin} from ${event.source})</span>`, ...event.args), (0, import_tiny_invariant.default)(this.handler, "ChannelHandler should be set"), this.handler(event);
          }
        } catch (error) {
          import_client_logger2.logger.error(error);
        }
      }
    };
    var import_global2 = require_dist();
    var import_telejson2 = (init_dist(), __toCommonJS(dist_exports));
    var import_tiny_invariant2 = __toESM3(require_tiny_invariant_cjs());
    var EVENTS2 = __toESM3(require_dist2());
    var { WebSocket } = import_global2.global;
    var WebsocketTransport = class {
      constructor({ url, onError, page }) {
        this.buffer = [];
        this.isReady = false;
        this.socket = new WebSocket(url), this.socket.onopen = () => {
          this.isReady = true, this.flush();
        }, this.socket.onmessage = ({ data }) => {
          let event = typeof data == "string" && (0, import_telejson2.isJSON)(data) ? (0, import_telejson2.parse)(data) : data;
          (0, import_tiny_invariant2.default)(this.handler, "WebsocketTransport handler should be set"), this.handler(event);
        }, this.socket.onerror = (e) => {
          onError && onError(e);
        }, this.socket.onclose = () => {
          (0, import_tiny_invariant2.default)(this.handler, "WebsocketTransport handler should be set"), this.handler({ type: EVENTS2.CHANNEL_WS_DISCONNECT, args: [], from: page || "preview" });
        };
      }
      setHandler(handler) {
        this.handler = handler;
      }
      send(event) {
        this.isReady ? this.sendNow(event) : this.sendLater(event);
      }
      sendLater(event) {
        this.buffer.push(event);
      }
      sendNow(event) {
        let data = (0, import_telejson2.stringify)(event, { maxDepth: 15, allowFunction: false, ...import_global2.global.CHANNEL_OPTIONS });
        this.socket.send(data);
      }
      flush() {
        let { buffer } = this;
        this.buffer = [], buffer.forEach((event) => this.send(event));
      }
    };
    var { CONFIG_TYPE } = import_global3.global;
    var src_default = Channel;
    function createBrowserChannel({ page, extraTransports = [] }) {
      let transports = [new PostMessageTransport({ page }), ...extraTransports];
      if (CONFIG_TYPE === "DEVELOPMENT") {
        let protocol = window.location.protocol === "http:" ? "ws" : "wss", { hostname, port } = window.location, channelUrl = `${protocol}://${hostname}:${port}/storybook-server-channel`;
        transports.push(new WebsocketTransport({ url: channelUrl, onError: () => {
        }, page }));
      }
      return new Channel({ transports });
    }
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js"(exports2, module2) {
    "use strict";
    var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js"(exports2, module2) {
    "use strict";
    var freeGlobal2 = require_freeGlobal();
    var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
    var root3 = freeGlobal2 || freeSelf2 || Function("return this")();
    module2.exports = root3;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js"(exports2, module2) {
    "use strict";
    var root3 = require_root();
    var Symbol3 = root3.Symbol;
    module2.exports = Symbol3;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js"(exports2, module2) {
    "use strict";
    var Symbol3 = require_Symbol();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    var nativeObjectToString3 = objectProto6.toString;
    var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
    function getRawTag2(value2) {
      var isOwn = hasOwnProperty5.call(value2, symToStringTag3), tag = value2[symToStringTag3];
      try {
        value2[symToStringTag3] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result2 = nativeObjectToString3.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag3] = tag;
        } else {
          delete value2[symToStringTag3];
        }
      }
      return result2;
    }
    module2.exports = getRawTag2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js"(exports2, module2) {
    "use strict";
    var objectProto6 = Object.prototype;
    var nativeObjectToString3 = objectProto6.toString;
    function objectToString2(value2) {
      return nativeObjectToString3.call(value2);
    }
    module2.exports = objectToString2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js"(exports2, module2) {
    "use strict";
    var Symbol3 = require_Symbol();
    var getRawTag2 = require_getRawTag();
    var objectToString2 = require_objectToString();
    var nullTag2 = "[object Null]";
    var undefinedTag2 = "[object Undefined]";
    var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
    function baseGetTag2(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag2 : nullTag2;
      }
      return symToStringTag3 && symToStringTag3 in Object(value2) ? getRawTag2(value2) : objectToString2(value2);
    }
    module2.exports = baseGetTag2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js"(exports2, module2) {
    "use strict";
    function isObject4(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    module2.exports = isObject4;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isFunction.js"(exports2, module2) {
    "use strict";
    var baseGetTag2 = require_baseGetTag();
    var isObject4 = require_isObject();
    var asyncTag2 = "[object AsyncFunction]";
    var funcTag2 = "[object Function]";
    var genTag2 = "[object GeneratorFunction]";
    var proxyTag2 = "[object Proxy]";
    function isFunction2(value2) {
      if (!isObject4(value2)) {
        return false;
      }
      var tag = baseGetTag2(value2);
      return tag == funcTag2 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
    }
    module2.exports = isFunction2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_coreJsData.js"(exports2, module2) {
    "use strict";
    var root3 = require_root();
    var coreJsData2 = root3["__core-js_shared__"];
    module2.exports = coreJsData2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isMasked.js"(exports2, module2) {
    "use strict";
    var coreJsData2 = require_coreJsData();
    var maskSrcKey2 = function() {
      var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked2(func) {
      return !!maskSrcKey2 && maskSrcKey2 in func;
    }
    module2.exports = isMasked2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toSource.js"(exports2, module2) {
    "use strict";
    var funcProto3 = Function.prototype;
    var funcToString3 = funcProto3.toString;
    function toSource2(func) {
      if (func != null) {
        try {
          return funcToString3.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module2.exports = toSource2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsNative.js"(exports2, module2) {
    "use strict";
    var isFunction2 = require_isFunction();
    var isMasked2 = require_isMasked();
    var isObject4 = require_isObject();
    var toSource2 = require_toSource();
    var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
    var funcProto3 = Function.prototype;
    var objectProto6 = Object.prototype;
    var funcToString3 = funcProto3.toString;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    var reIsNative2 = RegExp(
      "^" + funcToString3.call(hasOwnProperty5).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative2(value2) {
      if (!isObject4(value2) || isMasked2(value2)) {
        return false;
      }
      var pattern = isFunction2(value2) ? reIsNative2 : reIsHostCtor2;
      return pattern.test(toSource2(value2));
    }
    module2.exports = baseIsNative2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getValue.js"(exports2, module2) {
    "use strict";
    function getValue2(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    module2.exports = getValue2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getNative.js"(exports2, module2) {
    "use strict";
    var baseIsNative2 = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative2(object, key2) {
      var value2 = getValue2(object, key2);
      return baseIsNative2(value2) ? value2 : void 0;
    }
    module2.exports = getNative2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_defineProperty.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative2(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module2.exports = defineProperty;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
    "use strict";
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key2, value2) {
      if (key2 == "__proto__" && defineProperty) {
        defineProperty(object, key2, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object[key2] = value2;
      }
    }
    module2.exports = baseAssignValue;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createBaseFor.js"(exports2, module2) {
    "use strict";
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key2 = props[fromRight ? length : ++index];
          if (iteratee(iterable[key2], key2, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module2.exports = createBaseFor;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFor.js"(exports2, module2) {
    "use strict";
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module2.exports = baseFor;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTimes.js"(exports2, module2) {
    "use strict";
    function baseTimes(n, iteratee) {
      var index = -1, result2 = Array(n);
      while (++index < n) {
        result2[index] = iteratee(index);
      }
      return result2;
    }
    module2.exports = baseTimes;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js"(exports2, module2) {
    "use strict";
    function isObjectLike2(value2) {
      return value2 != null && typeof value2 == "object";
    }
    module2.exports = isObjectLike2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
    "use strict";
    var baseGetTag2 = require_baseGetTag();
    var isObjectLike2 = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value2) {
      return isObjectLike2(value2) && baseGetTag2(value2) == argsTag;
    }
    module2.exports = baseIsArguments;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArguments.js"(exports2, module2) {
    "use strict";
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike2 = require_isObjectLike();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    var propertyIsEnumerable = objectProto6.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike2(value2) && hasOwnProperty5.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
    };
    module2.exports = isArguments;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArray.js"(exports2, module2) {
    "use strict";
    var isArray2 = Array.isArray;
    module2.exports = isArray2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubFalse.js"(exports2, module2) {
    "use strict";
    function stubFalse() {
      return false;
    }
    module2.exports = stubFalse;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isBuffer.js"(exports2, module2) {
    "use strict";
    var root3 = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root3.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module2.exports = isBuffer;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isIndex.js"(exports2, module2) {
    "use strict";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value2, length) {
      var type = typeof value2;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
    }
    module2.exports = isIndex;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isLength.js"(exports2, module2) {
    "use strict";
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
    "use strict";
    var baseGetTag2 = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike2 = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag2 = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value2) {
      return isObjectLike2(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag2(value2)];
    }
    module2.exports = baseIsTypedArray;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseUnary.js"(exports2, module2) {
    "use strict";
    function baseUnary(func) {
      return function(value2) {
        return func(value2);
      };
    }
    module2.exports = baseUnary;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nodeUtil.js"(exports2, module2) {
    "use strict";
    var freeGlobal2 = require_freeGlobal();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal2.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module2.exports = nodeUtil;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isTypedArray.js"(exports2, module2) {
    "use strict";
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module2.exports = isTypedArray;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
    "use strict";
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function arrayLikeKeys(value2, inherited) {
      var isArr = isArray2(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value2.length, String) : [], length = result2.length;
      for (var key2 in value2) {
        if ((inherited || hasOwnProperty5.call(value2, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
        isIndex(key2, length)))) {
          result2.push(key2);
        }
      }
      return result2;
    }
    module2.exports = arrayLikeKeys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isPrototype.js"(exports2, module2) {
    "use strict";
    var objectProto6 = Object.prototype;
    function isPrototype(value2) {
      var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto6;
      return value2 === proto;
    }
    module2.exports = isPrototype;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overArg.js"(exports2, module2) {
    "use strict";
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeys.js"(exports2, module2) {
    "use strict";
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module2.exports = nativeKeys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeys.js"(exports2, module2) {
    "use strict";
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result2 = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty5.call(object, key2) && key2 != "constructor") {
          result2.push(key2);
        }
      }
      return result2;
    }
    module2.exports = baseKeys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArrayLike.js"(exports2, module2) {
    "use strict";
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value2) {
      return value2 != null && isLength(value2.length) && !isFunction2(value2);
    }
    module2.exports = isArrayLike;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keys.js"(exports2, module2) {
    "use strict";
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseForOwn.js"(exports2, module2) {
    "use strict";
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module2.exports = baseForOwn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheClear.js"(exports2, module2) {
    "use strict";
    function listCacheClear2() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/eq.js"(exports2, module2) {
    "use strict";
    function eq2(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    module2.exports = eq2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
    "use strict";
    var eq2 = require_eq();
    function assocIndexOf2(array, key2) {
      var length = array.length;
      while (length--) {
        if (eq2(array[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
    "use strict";
    var assocIndexOf2 = require_assocIndexOf();
    var arrayProto2 = Array.prototype;
    var splice2 = arrayProto2.splice;
    function listCacheDelete2(key2) {
      var data = this.__data__, index = assocIndexOf2(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheGet.js"(exports2, module2) {
    "use strict";
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheGet2(key2) {
      var data = this.__data__, index = assocIndexOf2(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheHas.js"(exports2, module2) {
    "use strict";
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheHas2(key2) {
      return assocIndexOf2(this.__data__, key2) > -1;
    }
    module2.exports = listCacheHas2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheSet.js"(exports2, module2) {
    "use strict";
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheSet2(key2, value2) {
      var data = this.__data__, index = assocIndexOf2(data, key2);
      if (index < 0) {
        ++this.size;
        data.push([key2, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    module2.exports = listCacheSet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_ListCache.js"(exports2, module2) {
    "use strict";
    var listCacheClear2 = require_listCacheClear();
    var listCacheDelete2 = require_listCacheDelete();
    var listCacheGet2 = require_listCacheGet();
    var listCacheHas2 = require_listCacheHas();
    var listCacheSet2 = require_listCacheSet();
    function ListCache2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache2.prototype.clear = listCacheClear2;
    ListCache2.prototype["delete"] = listCacheDelete2;
    ListCache2.prototype.get = listCacheGet2;
    ListCache2.prototype.has = listCacheHas2;
    ListCache2.prototype.set = listCacheSet2;
    module2.exports = ListCache2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackClear.js"(exports2, module2) {
    "use strict";
    var ListCache2 = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache2();
      this.size = 0;
    }
    module2.exports = stackClear;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackDelete.js"(exports2, module2) {
    "use strict";
    function stackDelete(key2) {
      var data = this.__data__, result2 = data["delete"](key2);
      this.size = data.size;
      return result2;
    }
    module2.exports = stackDelete;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackGet.js"(exports2, module2) {
    "use strict";
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    module2.exports = stackGet;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackHas.js"(exports2, module2) {
    "use strict";
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    module2.exports = stackHas;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Map.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var root3 = require_root();
    var Map3 = getNative2(root3, "Map");
    module2.exports = Map3;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeCreate.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var nativeCreate2 = getNative2(Object, "create");
    module2.exports = nativeCreate2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashClear.js"(exports2, module2) {
    "use strict";
    var nativeCreate2 = require_nativeCreate();
    function hashClear2() {
      this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashDelete.js"(exports2, module2) {
    "use strict";
    function hashDelete2(key2) {
      var result2 = this.has(key2) && delete this.__data__[key2];
      this.size -= result2 ? 1 : 0;
      return result2;
    }
    module2.exports = hashDelete2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashGet.js"(exports2, module2) {
    "use strict";
    var nativeCreate2 = require_nativeCreate();
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function hashGet2(key2) {
      var data = this.__data__;
      if (nativeCreate2) {
        var result2 = data[key2];
        return result2 === HASH_UNDEFINED3 ? void 0 : result2;
      }
      return hasOwnProperty5.call(data, key2) ? data[key2] : void 0;
    }
    module2.exports = hashGet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashHas.js"(exports2, module2) {
    "use strict";
    var nativeCreate2 = require_nativeCreate();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function hashHas2(key2) {
      var data = this.__data__;
      return nativeCreate2 ? data[key2] !== void 0 : hasOwnProperty5.call(data, key2);
    }
    module2.exports = hashHas2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashSet.js"(exports2, module2) {
    "use strict";
    var nativeCreate2 = require_nativeCreate();
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    function hashSet2(key2, value2) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate2 && value2 === void 0 ? HASH_UNDEFINED3 : value2;
      return this;
    }
    module2.exports = hashSet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Hash.js"(exports2, module2) {
    "use strict";
    var hashClear2 = require_hashClear();
    var hashDelete2 = require_hashDelete();
    var hashGet2 = require_hashGet();
    var hashHas2 = require_hashHas();
    var hashSet2 = require_hashSet();
    function Hash2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash2.prototype.clear = hashClear2;
    Hash2.prototype["delete"] = hashDelete2;
    Hash2.prototype.get = hashGet2;
    Hash2.prototype.has = hashHas2;
    Hash2.prototype.set = hashSet2;
    module2.exports = Hash2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
    "use strict";
    var Hash2 = require_Hash();
    var ListCache2 = require_ListCache();
    var Map3 = require_Map();
    function mapCacheClear2() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash2(),
        "map": new (Map3 || ListCache2)(),
        "string": new Hash2()
      };
    }
    module2.exports = mapCacheClear2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKeyable.js"(exports2, module2) {
    "use strict";
    function isKeyable2(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    module2.exports = isKeyable2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getMapData.js"(exports2, module2) {
    "use strict";
    var isKeyable2 = require_isKeyable();
    function getMapData2(map, key2) {
      var data = map.__data__;
      return isKeyable2(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    module2.exports = getMapData2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
    "use strict";
    var getMapData2 = require_getMapData();
    function mapCacheDelete2(key2) {
      var result2 = getMapData2(this, key2)["delete"](key2);
      this.size -= result2 ? 1 : 0;
      return result2;
    }
    module2.exports = mapCacheDelete2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
    "use strict";
    var getMapData2 = require_getMapData();
    function mapCacheGet2(key2) {
      return getMapData2(this, key2).get(key2);
    }
    module2.exports = mapCacheGet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
    "use strict";
    var getMapData2 = require_getMapData();
    function mapCacheHas2(key2) {
      return getMapData2(this, key2).has(key2);
    }
    module2.exports = mapCacheHas2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
    "use strict";
    var getMapData2 = require_getMapData();
    function mapCacheSet2(key2, value2) {
      var data = getMapData2(this, key2), size = data.size;
      data.set(key2, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_MapCache.js"(exports2, module2) {
    "use strict";
    var mapCacheClear2 = require_mapCacheClear();
    var mapCacheDelete2 = require_mapCacheDelete();
    var mapCacheGet2 = require_mapCacheGet();
    var mapCacheHas2 = require_mapCacheHas();
    var mapCacheSet2 = require_mapCacheSet();
    function MapCache2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache2.prototype.clear = mapCacheClear2;
    MapCache2.prototype["delete"] = mapCacheDelete2;
    MapCache2.prototype.get = mapCacheGet2;
    MapCache2.prototype.has = mapCacheHas2;
    MapCache2.prototype.set = mapCacheSet2;
    module2.exports = MapCache2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackSet.js"(exports2, module2) {
    "use strict";
    var ListCache2 = require_ListCache();
    var Map3 = require_Map();
    var MapCache2 = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key2, value2) {
      var data = this.__data__;
      if (data instanceof ListCache2) {
        var pairs = data.__data__;
        if (!Map3 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache2(pairs);
      }
      data.set(key2, value2);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Stack.js"(exports2, module2) {
    "use strict";
    var ListCache2 = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache2(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module2.exports = Stack;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
    "use strict";
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    function setCacheAdd(value2) {
      this.__data__.set(value2, HASH_UNDEFINED3);
      return this;
    }
    module2.exports = setCacheAdd;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheHas.js"(exports2, module2) {
    "use strict";
    function setCacheHas(value2) {
      return this.__data__.has(value2);
    }
    module2.exports = setCacheHas;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_SetCache.js"(exports2, module2) {
    "use strict";
    var MapCache2 = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache2();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module2.exports = SetCache;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arraySome.js"(exports2, module2) {
    "use strict";
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module2.exports = arraySome;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cacheHas.js"(exports2, module2) {
    "use strict";
    function cacheHas(cache, key2) {
      return cache.has(key2);
    }
    module2.exports = cacheHas;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalArrays.js"(exports2, module2) {
    "use strict";
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result2 = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result2 = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result2 = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result2;
    }
    module2.exports = equalArrays;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Uint8Array.js"(exports2, module2) {
    "use strict";
    var root3 = require_root();
    var Uint8Array2 = root3.Uint8Array;
    module2.exports = Uint8Array2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapToArray.js"(exports2, module2) {
    "use strict";
    function mapToArray(map) {
      var index = -1, result2 = Array(map.size);
      map.forEach(function(value2, key2) {
        result2[++index] = [key2, value2];
      });
      return result2;
    }
    module2.exports = mapToArray;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToArray.js"(exports2, module2) {
    "use strict";
    function setToArray(set) {
      var index = -1, result2 = Array(set.size);
      set.forEach(function(value2) {
        result2[++index] = value2;
      });
      return result2;
    }
    module2.exports = setToArray;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalByTag.js"(exports2, module2) {
    "use strict";
    var Symbol3 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq2 = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag2 = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto2 = Symbol3 ? Symbol3.prototype : void 0;
    var symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq2(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result2;
        case symbolTag2:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module2.exports = equalByTag;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayPush.js"(exports2, module2) {
    "use strict";
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
    "use strict";
    var arrayPush = require_arrayPush();
    var isArray2 = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result2 = keysFunc(object);
      return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
    }
    module2.exports = baseGetAllKeys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayFilter.js"(exports2, module2) {
    "use strict";
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
      while (++index < length) {
        var value2 = array[index];
        if (predicate(value2, index, array)) {
          result2[resIndex++] = value2;
        }
      }
      return result2;
    }
    module2.exports = arrayFilter;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubArray.js"(exports2, module2) {
    "use strict";
    function stubArray() {
      return [];
    }
    module2.exports = stubArray;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getSymbols.js"(exports2, module2) {
    "use strict";
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto6 = Object.prototype;
    var propertyIsEnumerable = objectProto6.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module2.exports = getSymbols;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getAllKeys.js"(exports2, module2) {
    "use strict";
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module2.exports = getAllKeys;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalObjects.js"(exports2, module2) {
    "use strict";
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key2 = objProps[index];
        if (!(isPartial ? key2 in other : hasOwnProperty5.call(other, key2))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result2 = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key2 = objProps[index];
        var objValue = object[key2], othValue = other[key2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result2 = false;
          break;
        }
        skipCtor || (skipCtor = key2 == "constructor");
      }
      if (result2 && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result2 = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result2;
    }
    module2.exports = equalObjects;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_DataView.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var root3 = require_root();
    var DataView2 = getNative2(root3, "DataView");
    module2.exports = DataView2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Promise.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var root3 = require_root();
    var Promise2 = getNative2(root3, "Promise");
    module2.exports = Promise2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Set.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var root3 = require_root();
    var Set2 = getNative2(root3, "Set");
    module2.exports = Set2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_WeakMap.js"(exports2, module2) {
    "use strict";
    var getNative2 = require_getNative();
    var root3 = require_root();
    var WeakMap2 = getNative2(root3, "WeakMap");
    module2.exports = WeakMap2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getTag.js"(exports2, module2) {
    "use strict";
    var DataView2 = require_DataView();
    var Map3 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag2 = require_baseGetTag();
    var toSource2 = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource2(DataView2);
    var mapCtorString = toSource2(Map3);
    var promiseCtorString = toSource2(Promise2);
    var setCtorString = toSource2(Set2);
    var weakMapCtorString = toSource2(WeakMap2);
    var getTag = baseGetTag2;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map3 && getTag(new Map3()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value2) {
        var result2 = baseGetTag2(value2), Ctor = result2 == objectTag ? value2.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result2;
      };
    }
    module2.exports = getTag;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
    "use strict";
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty5.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty5.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module2.exports = baseIsEqualDeep;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
    "use strict";
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike2 = require_isObjectLike();
    function baseIsEqual(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike2(value2) && !isObjectLike2(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual, stack);
    }
    module2.exports = baseIsEqual;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
    "use strict";
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source2, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key2 = data[0], objValue = object[key2], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key2 in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result2 = customizer(objValue, srcValue, key2, object, source2, stack);
          }
          if (!(result2 === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
            return false;
          }
        }
      }
      return true;
    }
    module2.exports = baseIsMatch;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
    "use strict";
    var isObject4 = require_isObject();
    function isStrictComparable(value2) {
      return value2 === value2 && !isObject4(value2);
    }
    module2.exports = isStrictComparable;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getMatchData.js"(exports2, module2) {
    "use strict";
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result2 = keys(object), length = result2.length;
      while (length--) {
        var key2 = result2[length], value2 = object[key2];
        result2[length] = [key2, value2, isStrictComparable(value2)];
      }
      return result2;
    }
    module2.exports = getMatchData;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
    "use strict";
    function matchesStrictComparable(key2, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key2] === srcValue && (srcValue !== void 0 || key2 in Object(object));
      };
    }
    module2.exports = matchesStrictComparable;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMatches.js"(exports2, module2) {
    "use strict";
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source2) {
      var matchData = getMatchData(source2);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source2 || baseIsMatch(object, source2, matchData);
      };
    }
    module2.exports = baseMatches;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js"(exports2, module2) {
    "use strict";
    var baseGetTag2 = require_baseGetTag();
    var isObjectLike2 = require_isObjectLike();
    var symbolTag2 = "[object Symbol]";
    function isSymbol2(value2) {
      return typeof value2 == "symbol" || isObjectLike2(value2) && baseGetTag2(value2) == symbolTag2;
    }
    module2.exports = isSymbol2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKey.js"(exports2, module2) {
    "use strict";
    var isArray2 = require_isArray();
    var isSymbol2 = require_isSymbol();
    var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp2 = /^\w*$/;
    function isKey2(value2, object) {
      if (isArray2(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol2(value2)) {
        return true;
      }
      return reIsPlainProp2.test(value2) || !reIsDeepProp2.test(value2) || object != null && value2 in Object(object);
    }
    module2.exports = isKey2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/memoize.js"(exports2, module2) {
    "use strict";
    var MapCache2 = require_MapCache();
    var FUNC_ERROR_TEXT2 = "Expected a function";
    function memoize3(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT2);
      }
      var memoized = function() {
        var args2 = arguments, key2 = resolver ? resolver.apply(this, args2) : args2[0], cache = memoized.cache;
        if (cache.has(key2)) {
          return cache.get(key2);
        }
        var result2 = func.apply(this, args2);
        memoized.cache = cache.set(key2, result2) || cache;
        return result2;
      };
      memoized.cache = new (memoize3.Cache || MapCache2)();
      return memoized;
    }
    memoize3.Cache = MapCache2;
    module2.exports = memoize3;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
    "use strict";
    var memoize3 = require_memoize();
    var MAX_MEMOIZE_SIZE2 = 500;
    function memoizeCapped2(func) {
      var result2 = memoize3(func, function(key2) {
        if (cache.size === MAX_MEMOIZE_SIZE2) {
          cache.clear();
        }
        return key2;
      });
      var cache = result2.cache;
      return result2;
    }
    module2.exports = memoizeCapped2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stringToPath.js"(exports2, module2) {
    "use strict";
    var memoizeCapped2 = require_memoizeCapped();
    var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath2 = memoizeCapped2(function(string) {
      var result2 = [];
      if (string.charCodeAt(0) === 46) {
        result2.push("");
      }
      string.replace(rePropName2, function(match, number, quote, subString) {
        result2.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match);
      });
      return result2;
    });
    module2.exports = stringToPath2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayMap.js"(exports2, module2) {
    "use strict";
    function arrayMap2(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
      while (++index < length) {
        result2[index] = iteratee(array[index], index, array);
      }
      return result2;
    }
    module2.exports = arrayMap2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseToString.js"(exports2, module2) {
    "use strict";
    var Symbol3 = require_Symbol();
    var arrayMap2 = require_arrayMap();
    var isArray2 = require_isArray();
    var isSymbol2 = require_isSymbol();
    var INFINITY3 = 1 / 0;
    var symbolProto2 = Symbol3 ? Symbol3.prototype : void 0;
    var symbolToString2 = symbolProto2 ? symbolProto2.toString : void 0;
    function baseToString2(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray2(value2)) {
        return arrayMap2(value2, baseToString2) + "";
      }
      if (isSymbol2(value2)) {
        return symbolToString2 ? symbolToString2.call(value2) : "";
      }
      var result2 = value2 + "";
      return result2 == "0" && 1 / value2 == -INFINITY3 ? "-0" : result2;
    }
    module2.exports = baseToString2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toString.js"(exports2, module2) {
    "use strict";
    var baseToString2 = require_baseToString();
    function toString2(value2) {
      return value2 == null ? "" : baseToString2(value2);
    }
    module2.exports = toString2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_castPath.js"(exports2, module2) {
    "use strict";
    var isArray2 = require_isArray();
    var isKey2 = require_isKey();
    var stringToPath2 = require_stringToPath();
    var toString2 = require_toString();
    function castPath2(value2, object) {
      if (isArray2(value2)) {
        return value2;
      }
      return isKey2(value2, object) ? [value2] : stringToPath2(toString2(value2));
    }
    module2.exports = castPath2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toKey.js"(exports2, module2) {
    "use strict";
    var isSymbol2 = require_isSymbol();
    var INFINITY3 = 1 / 0;
    function toKey2(value2) {
      if (typeof value2 == "string" || isSymbol2(value2)) {
        return value2;
      }
      var result2 = value2 + "";
      return result2 == "0" && 1 / value2 == -INFINITY3 ? "-0" : result2;
    }
    module2.exports = toKey2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGet.js"(exports2, module2) {
    "use strict";
    var castPath2 = require_castPath();
    var toKey2 = require_toKey();
    function baseGet2(object, path) {
      path = castPath2(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey2(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module2.exports = baseGet2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/get.js"(exports2, module2) {
    "use strict";
    var baseGet2 = require_baseGet();
    function get2(object, path, defaultValue) {
      var result2 = object == null ? void 0 : baseGet2(object, path);
      return result2 === void 0 ? defaultValue : result2;
    }
    module2.exports = get2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseHasIn.js"(exports2, module2) {
    "use strict";
    function baseHasIn(object, key2) {
      return object != null && key2 in Object(object);
    }
    module2.exports = baseHasIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hasPath.js"(exports2, module2) {
    "use strict";
    var castPath2 = require_castPath();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey2 = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath2(path, object);
      var index = -1, length = path.length, result2 = false;
      while (++index < length) {
        var key2 = toKey2(path[index]);
        if (!(result2 = object != null && hasFunc(object, key2))) {
          break;
        }
        object = object[key2];
      }
      if (result2 || ++index != length) {
        return result2;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key2, length) && (isArray2(object) || isArguments(object));
    }
    module2.exports = hasPath;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/hasIn.js"(exports2, module2) {
    "use strict";
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module2.exports = hasIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
    "use strict";
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey2 = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey2 = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey2(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey2(path), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module2.exports = baseMatchesProperty;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/identity.js"(exports2, module2) {
    "use strict";
    function identity(value2) {
      return value2;
    }
    module2.exports = identity;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseProperty.js"(exports2, module2) {
    "use strict";
    function baseProperty(key2) {
      return function(object) {
        return object == null ? void 0 : object[key2];
      };
    }
    module2.exports = baseProperty;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
    "use strict";
    var baseGet2 = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet2(object, path);
      };
    }
    module2.exports = basePropertyDeep;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/property.js"(exports2, module2) {
    "use strict";
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey2 = require_isKey();
    var toKey2 = require_toKey();
    function property(path) {
      return isKey2(path) ? baseProperty(toKey2(path)) : basePropertyDeep(path);
    }
    module2.exports = property;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIteratee.js"(exports2, module2) {
    "use strict";
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray2 = require_isArray();
    var property = require_property();
    function baseIteratee(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity;
      }
      if (typeof value2 == "object") {
        return isArray2(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    module2.exports = baseIteratee;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/mapValues.js
var require_mapValues = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/mapValues.js"(exports2, module2) {
    "use strict";
    var baseAssignValue = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapValues(object, iteratee) {
      var result2 = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object, function(value2, key2, object2) {
        baseAssignValue(result2, key2, iteratee(value2, key2, object2));
      });
      return result2;
    }
    module2.exports = mapValues;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assignValue.js"(exports2, module2) {
    "use strict";
    var baseAssignValue = require_baseAssignValue();
    var eq2 = require_eq();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function assignValue(object, key2, value2) {
      var objValue = object[key2];
      if (!(hasOwnProperty5.call(object, key2) && eq2(objValue, value2)) || value2 === void 0 && !(key2 in object)) {
        baseAssignValue(object, key2, value2);
      }
    }
    module2.exports = assignValue;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSet.js"(exports2, module2) {
    "use strict";
    var assignValue = require_assignValue();
    var castPath2 = require_castPath();
    var isIndex = require_isIndex();
    var isObject4 = require_isObject();
    var toKey2 = require_toKey();
    function baseSet(object, path, value2, customizer) {
      if (!isObject4(object)) {
        return object;
      }
      path = castPath2(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key2 = toKey2(path[index]), newValue = value2;
        if (key2 === "__proto__" || key2 === "constructor" || key2 === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key2];
          newValue = customizer ? customizer(objValue, key2, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject4(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key2, newValue);
        nested = nested[key2];
      }
      return object;
    }
    module2.exports = baseSet;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePickBy.js"(exports2, module2) {
    "use strict";
    var baseGet2 = require_baseGet();
    var baseSet = require_baseSet();
    var castPath2 = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index = -1, length = paths.length, result2 = {};
      while (++index < length) {
        var path = paths[index], value2 = baseGet2(object, path);
        if (predicate(value2, path)) {
          baseSet(result2, castPath2(path, object), value2);
        }
      }
      return result2;
    }
    module2.exports = basePickBy;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePick.js"(exports2, module2) {
    "use strict";
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value2, path) {
        return hasIn(object, path);
      });
    }
    module2.exports = basePick;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isFlattenable.js"(exports2, module2) {
    "use strict";
    var Symbol3 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var spreadableSymbol = Symbol3 ? Symbol3.isConcatSpreadable : void 0;
    function isFlattenable(value2) {
      return isArray2(value2) || isArguments(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    module2.exports = isFlattenable;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFlatten.js"(exports2, module2) {
    "use strict";
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result2) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result2 || (result2 = []);
      while (++index < length) {
        var value2 = array[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten(value2, depth - 1, predicate, isStrict, result2);
          } else {
            arrayPush(result2, value2);
          }
        } else if (!isStrict) {
          result2[result2.length] = value2;
        }
      }
      return result2;
    }
    module2.exports = baseFlatten;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js"(exports2, module2) {
    "use strict";
    var baseFlatten = require_baseFlatten();
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module2.exports = flatten;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_apply.js"(exports2, module2) {
    "use strict";
    function apply(func, thisArg, args2) {
      switch (args2.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args2[0]);
        case 2:
          return func.call(thisArg, args2[0], args2[1]);
        case 3:
          return func.call(thisArg, args2[0], args2[1], args2[2]);
      }
      return func.apply(thisArg, args2);
    }
    module2.exports = apply;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overRest.js"(exports2, module2) {
    "use strict";
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args2 = arguments, index = -1, length = nativeMax(args2.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args2[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args2[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module2.exports = overRest;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/constant.js"(exports2, module2) {
    "use strict";
    function constant(value2) {
      return function() {
        return value2;
      };
    }
    module2.exports = constant;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSetToString.js"(exports2, module2) {
    "use strict";
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module2.exports = baseSetToString;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_shortOut.js"(exports2, module2) {
    "use strict";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module2.exports = shortOut;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToString.js"(exports2, module2) {
    "use strict";
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module2.exports = setToString;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_flatRest.js"(exports2, module2) {
    "use strict";
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module2.exports = flatRest;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pick.js
var require_pick = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pick.js"(exports2, module2) {
    "use strict";
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module2.exports = pick;
  }
});

// node_modules/.pnpm/ts-dedent@2.2.0/node_modules/ts-dedent/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  dedent: () => dedent,
  default: () => esm_default
});
function dedent(templ) {
  var values = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values[_i - 1] = arguments[_i];
  }
  var strings = Array.from(typeof templ === "string" ? [templ] : templ);
  strings[strings.length - 1] = strings[strings.length - 1].replace(/\r?\n([\t ]*)$/, "");
  var indentLengths = strings.reduce(function(arr, str) {
    var matches = str.match(/\n([\t ]+|(?!\s).)/g);
    if (matches) {
      return arr.concat(matches.map(function(match) {
        var _a, _b;
        return (_b = (_a = match.match(/[\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
      }));
    }
    return arr;
  }, []);
  if (indentLengths.length) {
    var pattern_1 = new RegExp("\n[	 ]{" + Math.min.apply(Math, indentLengths) + "}", "g");
    strings = strings.map(function(str) {
      return str.replace(pattern_1, "\n");
    });
  }
  strings[0] = strings[0].replace(/^\r?\n/, "");
  var string = strings[0];
  values.forEach(function(value2, i) {
    var endentations = string.match(/(?:^|\n)( *)$/);
    var endentation = endentations ? endentations[1] : "";
    var indentedValue = value2;
    if (typeof value2 === "string" && value2.includes("\n")) {
      indentedValue = String(value2).split("\n").map(function(str, i2) {
        return i2 === 0 ? str : "" + endentation + str;
      }).join("\n");
    }
    string += indentedValue + strings[i + 1];
  });
  return string;
}
var esm_default;
var init_esm = __esm({
  "node_modules/.pnpm/ts-dedent@2.2.0/node_modules/ts-dedent/esm/index.js"() {
    "use strict";
    esm_default = dedent;
  }
});

// node_modules/.pnpm/@storybook+core-events@8.1.5/node_modules/@storybook/core-events/dist/errors/preview-errors.js
var require_preview_errors = __commonJS({
  "node_modules/.pnpm/@storybook+core-events@8.1.5/node_modules/@storybook/core-events/dist/errors/preview-errors.js"(exports2, module2) {
    "use strict";
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var preview_errors_exports = {};
    __export2(preview_errors_exports, { CalledExtractOnStoreError: () => CalledExtractOnStoreError, CalledPreviewMethodBeforeInitializationError: () => CalledPreviewMethodBeforeInitializationError, Category: () => Category, EmptyIndexError: () => EmptyIndexError, ImplicitActionsDuringRendering: () => ImplicitActionsDuringRendering, MdxFileWithNoCsfReferencesError: () => MdxFileWithNoCsfReferencesError, MissingRenderToCanvasError: () => MissingRenderToCanvasError, MissingStoryAfterHmrError: () => MissingStoryAfterHmrError, MissingStoryFromCsfFileError: () => MissingStoryFromCsfFileError, NextJsSharpError: () => NextJsSharpError, NextjsRouterMocksNotAvailable: () => NextjsRouterMocksNotAvailable, NoStoryMatchError: () => NoStoryMatchError, StoryIndexFetchError: () => StoryIndexFetchError, StoryStoreAccessedBeforeInitializationError: () => StoryStoreAccessedBeforeInitializationError, UnknownArgTypesError: () => UnknownArgTypesError });
    module2.exports = __toCommonJS2(preview_errors_exports);
    var import_ts_dedent = __toESM3((init_esm(), __toCommonJS(esm_exports)));
    var StorybookError = class extends Error {
      constructor() {
        super(...arguments);
        this.data = {};
        this.documentation = false;
        this.fromStorybook = true;
      }
      get fullErrorCode() {
        let paddedCode = String(this.code).padStart(4, "0");
        return `SB_${this.category}_${paddedCode}`;
      }
      get name() {
        let errorName = this.constructor.name;
        return `${this.fullErrorCode} (${errorName})`;
      }
      get message() {
        let page;
        return this.documentation === true ? page = `https://storybook.js.org/error/${this.fullErrorCode}` : typeof this.documentation == "string" ? page = this.documentation : Array.isArray(this.documentation) && (page = `
${this.documentation.map((doc) => `	- ${doc}`).join(`
`)}`), `${this.template()}${page != null ? `

More info: ${page}
` : ""}`;
      }
    };
    var Category = ((Category2) => (Category2.DOCS_TOOLS = "DOCS-TOOLS", Category2.PREVIEW_CLIENT_LOGGER = "PREVIEW_CLIENT-LOGGER", Category2.PREVIEW_CHANNELS = "PREVIEW_CHANNELS", Category2.PREVIEW_CORE_EVENTS = "PREVIEW_CORE-EVENTS", Category2.PREVIEW_INSTRUMENTER = "PREVIEW_INSTRUMENTER", Category2.PREVIEW_API = "PREVIEW_API", Category2.PREVIEW_REACT_DOM_SHIM = "PREVIEW_REACT-DOM-SHIM", Category2.PREVIEW_ROUTER = "PREVIEW_ROUTER", Category2.PREVIEW_THEMING = "PREVIEW_THEMING", Category2.RENDERER_HTML = "RENDERER_HTML", Category2.RENDERER_PREACT = "RENDERER_PREACT", Category2.RENDERER_REACT = "RENDERER_REACT", Category2.RENDERER_SERVER = "RENDERER_SERVER", Category2.RENDERER_SVELTE = "RENDERER_SVELTE", Category2.RENDERER_VUE = "RENDERER_VUE", Category2.RENDERER_VUE3 = "RENDERER_VUE3", Category2.RENDERER_WEB_COMPONENTS = "RENDERER_WEB-COMPONENTS", Category2.FRAMEWORK_NEXTJS = "FRAMEWORK_NEXTJS", Category2))(Category || {});
    var MissingStoryAfterHmrError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 1;
      }
      template() {
        return import_ts_dedent.default`
    Couldn't find story matching id '${this.data.storyId}' after HMR.
    - Did you just rename a story?
    - Did you remove it from your CSF file?
    - Are you sure a story with the id '${this.data.storyId}' exists?
    - Please check the values in the stories field of your main.js config and see if they would match your CSF File.
    - Also check the browser console and terminal for potential error messages.`;
      }
    };
    var ImplicitActionsDuringRendering = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 2;
        this.documentation = "https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#using-implicit-actions-during-rendering-is-deprecated-for-example-in-the-play-function";
      }
      template() {
        return import_ts_dedent.default`
      We detected that you use an implicit action arg while ${this.data.phase} of your story.  
      ${this.data.deprecated ? `
This is deprecated and won't work in Storybook 8 anymore.
` : ""}
      Please provide an explicit spy to your args like this:
        import { fn } from '@storybook/test';
        ... 
        args: {
         ${this.data.name}: fn()
        }
    `;
      }
    };
    var CalledExtractOnStoreError = class extends StorybookError {
      constructor() {
        super(...arguments);
        this.category = "PREVIEW_API";
        this.code = 3;
      }
      template() {
        return import_ts_dedent.default`
    Cannot call \`storyStore.extract()\` without calling \`storyStore.cacheAllCsfFiles()\` first.

    You probably meant to call \`await preview.extract()\` which does the above for you.`;
      }
    };
    var MissingRenderToCanvasError = class extends StorybookError {
      constructor() {
        super(...arguments);
        this.category = "PREVIEW_API";
        this.code = 4;
        this.documentation = "https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mainjs-framework-field";
      }
      template() {
        return import_ts_dedent.default`
      Expected your framework's preset to export a \`renderToCanvas\` field.

      Perhaps it needs to be upgraded for Storybook 6.4?`;
      }
    };
    var CalledPreviewMethodBeforeInitializationError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 5;
      }
      template() {
        return import_ts_dedent.default`
      Called \`Preview.${this.data.methodName}()\` before initialization.
      
      The preview needs to load the story index before most methods can be called. If you want
      to call \`${this.data.methodName}\`, try \`await preview.initializationPromise;\` first.
      
      If you didn't call the above code, then likely it was called by an addon that needs to
      do the above.`;
      }
    };
    var StoryIndexFetchError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 6;
      }
      template() {
        return import_ts_dedent.default`
      Error fetching \`/index.json\`:
      
      ${this.data.text}

      If you are in development, this likely indicates a problem with your Storybook process,
      check the terminal for errors.

      If you are in a deployed Storybook, there may have been an issue deploying the full Storybook
      build.`;
      }
    };
    var MdxFileWithNoCsfReferencesError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 7;
      }
      template() {
        return import_ts_dedent.default`
      Tried to render docs entry ${this.data.storyId} but it is a MDX file that has no CSF
      references, or autodocs for a CSF file that some doesn't refer to itself.
      
      This likely is an internal error in Storybook's indexing, or you've attached the
      \`attached-mdx\` tag to an MDX file that is not attached.`;
      }
    };
    var EmptyIndexError = class extends StorybookError {
      constructor() {
        super(...arguments);
        this.category = "PREVIEW_API";
        this.code = 8;
      }
      template() {
        return import_ts_dedent.default`
      Couldn't find any stories in your Storybook.

        - Please check your stories field of your main.js config: does it match correctly?
        - Also check the browser console and terminal for error messages.`;
      }
    };
    var NoStoryMatchError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 9;
      }
      template() {
        return import_ts_dedent.default`
      Couldn't find story matching '${this.data.storySpecifier}'.

        - Are you sure a story with that id exists?
        - Please check your stories field of your main.js config.
        - Also check the browser console and terminal for error messages.`;
      }
    };
    var MissingStoryFromCsfFileError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "PREVIEW_API";
        this.code = 10;
      }
      template() {
        return import_ts_dedent.default`
    Couldn't find story matching id '${this.data.storyId}' after importing a CSF file.

    The file was indexed as if the story was there, but then after importing the file in the browser
    we didn't find the story. Possible reasons:
    - You are using a custom story indexer that is misbehaving.
    - You have a custom file loader that is removing or renaming exports.

    Please check your browser console and terminal for errors that may explain the issue.`;
      }
    };
    var StoryStoreAccessedBeforeInitializationError = class extends StorybookError {
      constructor() {
        super(...arguments);
        this.category = "PREVIEW_API";
        this.code = 11;
      }
      template() {
        return import_ts_dedent.default`
    Cannot access the Story Store until the index is ready.

    It is not recommended to use methods directly on the Story Store anyway, in Storybook 9 we will
    remove access to the store entirely`;
      }
    };
    var NextJsSharpError = class extends StorybookError {
      constructor() {
        super(...arguments);
        this.category = "FRAMEWORK_NEXTJS";
        this.code = 1;
        this.documentation = "https://storybook.js.org/docs/get-started/nextjs#faq";
      }
      template() {
        return import_ts_dedent.default`
    You are importing avif images, but you don't have sharp installed.

    You have to install sharp in order to use image optimization features in Next.js.
    `;
      }
    };
    var NextjsRouterMocksNotAvailable = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "FRAMEWORK_NEXTJS";
        this.code = 2;
      }
      template() {
        return import_ts_dedent.default`
      Tried to access router mocks from "${this.data.importType}" but they were not created yet. You might be running code in an unsupported environment.
    `;
      }
    };
    var UnknownArgTypesError = class extends StorybookError {
      constructor(data) {
        super();
        this.data = data;
        this.category = "DOCS-TOOLS";
        this.code = 1;
        this.documentation = "https://github.com/storybookjs/storybook/issues/26606";
      }
      template() {
        return import_ts_dedent.default`There was a failure when generating detailed ArgTypes in ${this.data.language} for:
    
    ${JSON.stringify(this.data.type, null, 2)} 
    
    Storybook will fall back to use a generic type description instead.

    This type is either not supported or it is a bug in the docgen generation in Storybook.
    If you think this is a bug, please detail it as much as possible in the Github issue.`;
      }
    };
  }
});

// node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.js"(exports2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    function find(iter, tar, key2) {
      for (key2 of iter.keys()) {
        if (dequal(key2, tar))
          return key2;
      }
    }
    function dequal(foo, bar) {
      var ctor, len, tmp;
      if (foo === bar)
        return true;
      if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date)
          return foo.getTime() === bar.getTime();
        if (ctor === RegExp)
          return foo.toString() === bar.toString();
        if (ctor === Array) {
          if ((len = foo.length) === bar.length) {
            while (len-- && dequal(foo[len], bar[len]))
              ;
          }
          return len === -1;
        }
        if (ctor === Set) {
          if (foo.size !== bar.size) {
            return false;
          }
          for (len of foo) {
            tmp = len;
            if (tmp && typeof tmp === "object") {
              tmp = find(bar, tmp);
              if (!tmp)
                return false;
            }
            if (!bar.has(tmp))
              return false;
          }
          return true;
        }
        if (ctor === Map) {
          if (foo.size !== bar.size) {
            return false;
          }
          for (len of foo) {
            tmp = len[0];
            if (tmp && typeof tmp === "object") {
              tmp = find(bar, tmp);
              if (!tmp)
                return false;
            }
            if (!dequal(len[1], bar.get(tmp))) {
              return false;
            }
          }
          return true;
        }
        if (ctor === ArrayBuffer) {
          foo = new Uint8Array(foo);
          bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
          if ((len = foo.byteLength) === bar.byteLength) {
            while (len-- && foo.getInt8(len) === bar.getInt8(len))
              ;
          }
          return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
          if ((len = foo.byteLength) === bar.byteLength) {
            while (len-- && foo[len] === bar[len])
              ;
          }
          return len === -1;
        }
        if (!ctor || typeof foo === "object") {
          len = 0;
          for (ctor in foo) {
            if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
              return false;
            if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
              return false;
          }
          return Object.keys(bar).length === len;
        }
      }
      return foo !== foo && bar !== bar;
    }
    exports2.dequal = dequal;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getPrototype.js"(exports2, module2) {
    "use strict";
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module2.exports = getPrototype;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js"(exports2, module2) {
    "use strict";
    var baseGetTag2 = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike2 = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto3 = Function.prototype;
    var objectProto6 = Object.prototype;
    var funcToString3 = funcProto3.toString;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    var objectCtorString = funcToString3.call(Object);
    function isPlainObject(value2) {
      if (!isObjectLike2(value2) || baseGetTag2(value2) != objectTag) {
        return false;
      }
      var proto = getPrototype(value2);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty5.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
    }
    module2.exports = isPlainObject;
  }
});

// node_modules/.pnpm/@storybook+csf@0.1.7/node_modules/@storybook/csf/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/.pnpm/@storybook+csf@0.1.7/node_modules/@storybook/csf/dist/index.js"(exports2) {
    "use strict";
    var B = Object.create;
    var u = Object.defineProperty;
    var C = Object.getOwnPropertyDescriptor;
    var F = Object.getOwnPropertyNames;
    var h = Object.getPrototypeOf;
    var w = Object.prototype.hasOwnProperty;
    var E = (r, e) => () => (e || r((e = { exports: {} }).exports, e), e.exports);
    var I = (r, e, n, t) => {
      if (e && typeof e == "object" || typeof e == "function")
        for (let a of F(e))
          !w.call(r, a) && a !== n && u(r, a, { get: () => e[a], enumerable: !(t = C(e, a)) || t.enumerable });
      return r;
    };
    var k = (r, e, n) => (n = r != null ? B(h(r)) : {}, I(e || !r || !r.__esModule ? u(n, "default", { value: r, enumerable: true }) : n, r));
    var x = E((T) => {
      Object.defineProperty(T, "__esModule", { value: true }), T.isEqual = /* @__PURE__ */ function() {
        var r = Object.prototype.toString, e = Object.getPrototypeOf, n = Object.getOwnPropertySymbols ? function(t) {
          return Object.keys(t).concat(Object.getOwnPropertySymbols(t));
        } : Object.keys;
        return function(t, a) {
          return function i(o, s, d) {
            var y, g, p, l = r.call(o), b = r.call(s);
            if (o === s)
              return true;
            if (o == null || s == null)
              return false;
            if (d.indexOf(o) > -1 && d.indexOf(s) > -1)
              return true;
            if (d.push(o, s), l != b || (y = n(o), g = n(s), y.length != g.length || y.some(function(A) {
              return !i(o[A], s[A], d);
            })))
              return false;
            switch (l.slice(8, -1)) {
              case "Symbol":
                return o.valueOf() == s.valueOf();
              case "Date":
              case "Number":
                return +o == +s || +o != +o && +s != +s;
              case "RegExp":
              case "Function":
              case "String":
              case "Boolean":
                return "" + o == "" + s;
              case "Set":
              case "Map":
                y = o.entries(), g = s.entries();
                do
                  if (!i((p = y.next()).value, g.next().value, d))
                    return false;
                while (!p.done);
                return true;
              case "ArrayBuffer":
                o = new Uint8Array(o), s = new Uint8Array(s);
              case "DataView":
                o = new Uint8Array(o.buffer), s = new Uint8Array(s.buffer);
              case "Float32Array":
              case "Float64Array":
              case "Int8Array":
              case "Int16Array":
              case "Int32Array":
              case "Uint8Array":
              case "Uint16Array":
              case "Uint32Array":
              case "Uint8ClampedArray":
              case "Arguments":
              case "Array":
                if (o.length != s.length)
                  return false;
                for (p = 0; p < o.length; p++)
                  if ((p in o || p in s) && (p in o != p in s || !i(o[p], s[p], d)))
                    return false;
                return true;
              case "Object":
                return i(e(o), e(s), d);
              default:
                return false;
            }
          }(t, a, []);
        };
      }();
    });
    function R(r) {
      return r.replace(/_/g, " ").replace(/-/g, " ").replace(/\./g, " ").replace(/([^\n])([A-Z])([a-z])/g, (e, n, t, a) => `${n} ${t}${a}`).replace(/([a-z])([A-Z])/g, (e, n, t) => `${n} ${t}`).replace(/([a-z])([0-9])/gi, (e, n, t) => `${n} ${t}`).replace(/([0-9])([a-z])/gi, (e, n, t) => `${n} ${t}`).replace(/(\s|^)(\w)/g, (e, n, t) => `${n}${t.toUpperCase()}`).replace(/ +/g, " ").trim();
    }
    var c = k(x());
    var S = (r) => r.map((e) => typeof e < "u").filter(Boolean).length;
    var v = (r, e) => {
      let { exists: n, eq: t, neq: a, truthy: i } = r;
      if (S([n, t, a, i]) > 1)
        throw new Error(`Invalid conditional test ${JSON.stringify({ exists: n, eq: t, neq: a })}`);
      if (typeof t < "u")
        return (0, c.isEqual)(e, t);
      if (typeof a < "u")
        return !(0, c.isEqual)(e, a);
      if (typeof n < "u") {
        let s = typeof e < "u";
        return n ? s : !s;
      }
      return (typeof i > "u" ? true : i) ? !!e : !e;
    };
    var P = (r, e, n) => {
      if (!r.if)
        return true;
      let { arg: t, global: a } = r.if;
      if (S([t, a]) !== 1)
        throw new Error(`Invalid conditional value ${JSON.stringify({ arg: t, global: a })}`);
      let i = t ? e[t] : n[a];
      return v(r.if, i);
    };
    var O = (r) => r.toLowerCase().replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, "-").replace(/-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
    var m = (r, e) => {
      let n = O(r);
      if (n === "")
        throw new Error(`Invalid ${e} '${r}', must include alphanumeric characters`);
      return n;
    };
    var N = (r, e) => `${m(r, "kind")}${e ? `--${m(e, "name")}` : ""}`;
    var M = (r) => R(r);
    function f2(r, e) {
      return Array.isArray(e) ? e.includes(r) : r.match(e);
    }
    function G(r, { includeStories: e, excludeStories: n }) {
      return r !== "__esModule" && (!e || f2(r, e)) && (!n || !f2(r, n));
    }
    var V = (r, { rootSeparator: e, groupSeparator: n }) => {
      let [t, a] = r.split(e, 2), i = (a || r).split(n).filter((o) => !!o);
      return { root: a ? t : null, groups: i };
    };
    var z = (...r) => {
      let e = r.reduce((n, t) => (t.startsWith("!") ? n.delete(t.slice(1)) : n.add(t), n), /* @__PURE__ */ new Set());
      return Array.from(e);
    };
    exports2.combineTags = z;
    exports2.includeConditionalArg = P;
    exports2.isExportStory = G;
    exports2.parseKind = V;
    exports2.sanitize = O;
    exports2.storyNameFromExport = M;
    exports2.toId = N;
  }
});

// node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js
var require_node = __commonJS({
  "node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js"(exports2, module2) {
    "use strict";
    module2.exports = require("util").deprecate;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
    "use strict";
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result2 = [];
      while (object) {
        arrayPush(result2, getSymbols(object));
        object = getPrototype(object);
      }
      return result2;
    };
    module2.exports = getSymbolsIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
    "use strict";
    function nativeKeysIn(object) {
      var result2 = [];
      if (object != null) {
        for (var key2 in Object(object)) {
          result2.push(key2);
        }
      }
      return result2;
    }
    module2.exports = nativeKeysIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
    "use strict";
    var isObject4 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject4(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result2 = [];
      for (var key2 in object) {
        if (!(key2 == "constructor" && (isProto || !hasOwnProperty5.call(object, key2)))) {
          result2.push(key2);
        }
      }
      return result2;
    }
    module2.exports = baseKeysIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keysIn.js"(exports2, module2) {
    "use strict";
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module2.exports = keysIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
    "use strict";
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module2.exports = getAllKeysIn;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pickBy.js
var require_pickBy = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pickBy.js"(exports2, module2) {
    "use strict";
    var arrayMap2 = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var basePickBy = require_basePickBy();
    var getAllKeysIn = require_getAllKeysIn();
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap2(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value2, path) {
        return predicate(value2, path[0]);
      });
    }
    module2.exports = pickBy;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js
var require_shams3 = __commonJS({
  "node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js
var require_has_symbols2 = __commonJS({
  "node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams3();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js"(exports2, module2) {
    "use strict";
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args2 = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result2 = target.apply(
            this,
            concatty(args2, arguments)
          );
          if (Object(result2) === result2) {
            return result2;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args2, arguments)
        );
      };
      var boundLength = max(0, target.length - args2.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind2 = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation2();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind2();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js
var require_get_intrinsic2 = __commonJS({
  "node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols2()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name2) {
      var value2;
      if (name2 === "%AsyncFunction%") {
        value2 = getEvalledConstructor("async function () {}");
      } else if (name2 === "%GeneratorFunction%") {
        value2 = getEvalledConstructor("function* () {}");
      } else if (name2 === "%AsyncGeneratorFunction%") {
        value2 = getEvalledConstructor("async function* () {}");
      } else if (name2 === "%AsyncGenerator%") {
        var fn2 = doEval2("%AsyncGeneratorFunction%");
        if (fn2) {
          value2 = fn2.prototype;
        }
      } else if (name2 === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value2 = getProto(gen.prototype);
        }
      }
      INTRINSICS[name2] = value2;
      return value2;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind2();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath2 = function stringToPath3(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result2 = [];
      $replace(string, rePropName2, function(match, number, quote, subString) {
        result2[result2.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number || match;
      });
      return result2;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
      var intrinsicName = name2;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value2 = INTRINSICS[intrinsicName];
        if (value2 === needsEval) {
          value2 = doEval(intrinsicName);
        }
        if (typeof value2 === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value: value2
        };
      }
      throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name2, allowMissing) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name2) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath2(name2);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value2 = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value2 = INTRINSICS[intrinsicRealName];
        } else if (value2 != null) {
          if (!(part in value2)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value2, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value2 = desc.get;
            } else {
              value2 = value2[part];
            }
          } else {
            isOwn = hasOwn(value2, part);
            value2 = value2[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value2;
          }
        }
      }
      return value2;
    };
  }
});

// node_modules/.pnpm/es-define-property@1.0.0/node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/.pnpm/es-define-property@1.0.0/node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic2();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic2();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value2) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value: value2,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value2;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic2();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn2, length) {
      if (typeof fn2 !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn2 && gOPD) {
        var desc = gOPD(fn2, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn2,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn2,
            "length",
            length
          );
        }
      }
      return fn2;
    };
  }
});

// node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/index.js
var require_call_bind2 = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind2();
    var GetIntrinsic = require_get_intrinsic2();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module2.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/callBound.js
var require_callBound2 = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic2();
    var callBind = require_call_bind2();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name2, allowMissing) {
      var intrinsic = GetIntrinsic(name2, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/util.inspect.js"(exports2, module2) {
    "use strict";
    module2.exports = require("util").inspect;
  }
});

// node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/index.js"(exports2, module2) {
    "use strict";
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString2 = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol2(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options2, depth, seen) {
      var opts = options2 || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray2(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value2, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value2, newOpts, depth + 1, seen);
        }
        return inspect_(value2, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name2 = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol2(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray2(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value2, key2) {
            mapParts.push(inspect(key2, obj, true) + " => " + inspect(value2, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value2) {
            setParts.push(inspect(value2, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray2(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol2(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key2) {
      return key2 in this;
    };
    function has(obj, key2) {
      return hasOwn.call(obj, key2);
    }
    function toStr(obj) {
      return objectToString2.call(obj);
    }
    function nameOf(f2) {
      if (f2.name) {
        return f2.name;
      }
      var m = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray2(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key2 in obj) {
        if (!has(obj, key2)) {
          continue;
        }
        if (isArr && String(Number(key2)) === key2 && key2 < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key2] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key2)) {
          xs.push(inspect(key2, obj) + ": " + inspect(obj[key2], obj));
        } else {
          xs.push(key2 + ": " + inspect(obj[key2], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/.pnpm/side-channel@1.0.6/node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/.pnpm/side-channel@1.0.6/node_modules/side-channel/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic2();
    var callBound = require_callBound2();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key2) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key2) {
          prev.next = curr.next;
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key2) {
      var node = listGetNode(objects, key2);
      return node && node.value;
    };
    var listSet = function(objects, key2, value2) {
      var node = listGetNode(objects, key2);
      if (node) {
        node.value = value2;
      } else {
        objects.next = /** @type {import('.').ListNode<typeof value>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key: key2,
          next: objects.next,
          value: value2
        };
      }
    };
    var listHas = function(objects, key2) {
      return !!listGetNode(objects, key2);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError("Side channel does not contain " + inspect(key2));
          }
        },
        get: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key2);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key2);
            }
          } else {
            if ($o) {
              return listGet($o, key2);
            }
          }
        },
        has: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key2);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key2);
            }
          } else {
            if ($o) {
              return listHas($o, key2);
            }
          }
          return false;
        },
        set: function(key2, value2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key2, value2);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key2, value2);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key2, value2);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/formats.js"(exports2, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value2) {
          return replace.call(value2, percentTwenties, "+");
        },
        RFC3986: function(value2) {
          return String(value2);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/utils.js"(exports2, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray2 = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray2(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source2, options2) {
      var obj = options2 && options2.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source2.length; ++i) {
        if (typeof source2[i] !== "undefined") {
          obj[i] = source2[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source2, options2) {
      if (!source2) {
        return target;
      }
      if (typeof source2 !== "object") {
        if (isArray2(target)) {
          target.push(source2);
        } else if (target && typeof target === "object") {
          if (options2 && (options2.plainObjects || options2.allowPrototypes) || !has.call(Object.prototype, source2)) {
            target[source2] = true;
          }
        } else {
          return [target, source2];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source2);
      }
      var mergeTarget = target;
      if (isArray2(target) && !isArray2(source2)) {
        mergeTarget = arrayToObject(target, options2);
      }
      if (isArray2(target) && isArray2(source2)) {
        source2.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options2);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source2).reduce(function(acc, key2) {
        var value2 = source2[key2];
        if (has.call(acc, key2)) {
          acc[key2] = merge2(acc[key2], value2, options2);
        } else {
          acc[key2] = value2;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source2) {
      return Object.keys(source2).reduce(function(acc, key2) {
        acc[key2] = source2[key2];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for (var i = 0; i < segment.length; ++i) {
          var c = segment.charCodeAt(i);
          if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
            arr[arr.length] = segment.charAt(i);
            continue;
          }
          if (c < 128) {
            arr[arr.length] = hexTable[c];
            continue;
          }
          if (c < 2048) {
            arr[arr.length] = hexTable[192 | c >> 6] + hexTable[128 | c & 63];
            continue;
          }
          if (c < 55296 || c >= 57344) {
            arr[arr.length] = hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
            continue;
          }
          i += 1;
          c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
          arr[arr.length] = hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
        }
        out += arr.join("");
      }
      return out;
    };
    var compact = function compact2(value2) {
      var queue = [{ obj: { o: value2 }, prop: "o" }];
      var refs2 = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key2 = keys[j];
          var val = obj[key2];
          if (typeof val === "object" && val !== null && refs2.indexOf(val) === -1) {
            queue.push({ obj, prop: key2 });
            refs2.push(val);
          }
        }
      }
      compactQueue(queue);
      return value2;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn2) {
      if (isArray2(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn2(val[i]));
        }
        return mapped;
      }
      return fn2(val);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/stringify.js"(exports2, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key2) {
        return prefix + "[" + key2 + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray2 = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray2(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify2 = function stringify3(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray2(obj)) {
        obj = utils.maybeMap(obj, function(value3) {
          if (value3 instanceof Date) {
            return serializeDate(value3);
          }
          return value3;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray2(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray2(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
      var adjustedPrefix = commaRoundTrip && isArray2(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray2(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key2 = objKeys[j];
        var value2 = typeof key2 === "object" && typeof key2.value !== "undefined" ? key2.value : obj[key2];
        if (skipNulls && value2 === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? key2.replace(/\./g, "%2E") : key2;
        var keyPrefix = isArray2(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify3(
          value2,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray2(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray2(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options2 = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options2.filter === "function") {
        filter = options2.filter;
        obj = filter("", obj);
      } else if (isArray2(options2.filter)) {
        filter = options2.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options2.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options2.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options2.sort) {
        objKeys.sort(options2.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key2 = objKeys[i];
        if (options2.skipNulls && obj[key2] === null) {
          continue;
        }
        pushToArray(keys, stringify2(
          obj[key2],
          key2,
          generateArrayPrefix,
          commaRoundTrip,
          options2.allowEmptyArrays,
          options2.strictNullHandling,
          options2.skipNulls,
          options2.encodeDotInKeys,
          options2.encode ? options2.encoder : null,
          options2.filter,
          options2.sort,
          options2.allowDots,
          options2.serializeDate,
          options2.format,
          options2.formatter,
          options2.encodeValuesOnly,
          options2.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options2.delimiter);
      var prefix = options2.addQueryPrefix === true ? "?" : "";
      if (options2.charsetSentinel) {
        if (options2.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/parse.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray2 = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options2) {
      if (val && typeof val === "string" && options2.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options2) {
      var obj = { __proto__: null };
      var cleanStr = options2.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options2.parameterLimit === Infinity ? void 0 : options2.parameterLimit;
      var parts = cleanStr.split(options2.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options2.charset;
      if (options2.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key2, val;
        if (pos === -1) {
          key2 = options2.decoder(part, defaults.decoder, charset, "key");
          val = options2.strictNullHandling ? null : "";
        } else {
          key2 = options2.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options2),
            function(encodedVal) {
              return options2.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options2.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray2(val) ? [val] : val;
        }
        var existing = has.call(obj, key2);
        if (existing && options2.duplicates === "combine") {
          obj[key2] = utils.combine(obj[key2], val);
        } else if (!existing || options2.duplicates === "last") {
          obj[key2] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options2, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options2);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root3 = chain[i];
        if (root3 === "[]" && options2.parseArrays) {
          obj = options2.allowEmptyArrays && leaf === "" ? [] : [].concat(leaf);
        } else {
          obj = options2.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root3.charAt(0) === "[" && root3.charAt(root3.length - 1) === "]" ? root3.slice(1, -1) : root3;
          var decodedRoot = options2.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options2.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root3 !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options2.parseArrays && index <= options2.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options2, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key2 = options2.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options2.depth > 0 && brackets.exec(key2);
      var parent = segment ? key2.slice(0, segment.index) : key2;
      var keys = [];
      if (parent) {
        if (!options2.plainObjects && has.call(Object.prototype, parent)) {
          if (!options2.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options2.depth > 0 && (segment = child.exec(key2)) !== null && i < options2.depth) {
        i += 1;
        if (!options2.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options2.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key2.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options2, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str, opts) {
      var options2 = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options2.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options2) : str;
      var obj = options2.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key2 = keys[i];
        var newObj = parseKeys(key2, tempObj[key2], options2, typeof str === "string");
        obj = utils.merge(obj, newObj, options2);
      }
      if (options2.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/qs@6.12.1/node_modules/qs/lib/index.js"(exports2, module2) {
    "use strict";
    var stringify2 = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse: parse2,
      stringify: stringify2
    };
  }
});

// node_modules/.pnpm/@storybook+preview-api@8.1.5/node_modules/@storybook/preview-api/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/.pnpm/@storybook+preview-api@8.1.5/node_modules/@storybook/preview-api/dist/index.js"(exports2, module2) {
    "use strict";
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __commonJS3 = (cb, mod) => function() {
      return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var require_entities = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/maps/entities.json"(exports22, module22) {
      module22.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: `
`, nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
    } });
    var require_legacy = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/maps/legacy.json"(exports22, module22) {
      module22.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
    } });
    var require_xml = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/maps/xml.json"(exports22, module22) {
      module22.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
    } });
    var require_decode = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/maps/decode.json"(exports22, module22) {
      module22.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
    } });
    var require_decode_codepoint = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/decode_codepoint.js"(exports22) {
      "use strict";
      var __importDefault = exports22 && exports22.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      var decode_json_1 = __importDefault(require_decode()), fromCodePoint = String.fromCodePoint || function(codePoint) {
        var output = "";
        return codePoint > 65535 && (codePoint -= 65536, output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | codePoint & 1023), output += String.fromCharCode(codePoint), output;
      };
      function decodeCodePoint(codePoint) {
        return codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111 ? "\uFFFD" : (codePoint in decode_json_1.default && (codePoint = decode_json_1.default[codePoint]), fromCodePoint(codePoint));
      }
      exports22.default = decodeCodePoint;
    } });
    var require_decode2 = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/decode.js"(exports22) {
      "use strict";
      var __importDefault = exports22 && exports22.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.decodeHTML = exports22.decodeHTMLStrict = exports22.decodeXML = void 0;
      var entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml()), decode_codepoint_1 = __importDefault(require_decode_codepoint()), strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
      exports22.decodeXML = getStrictDecoder(xml_json_1.default);
      exports22.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
      function getStrictDecoder(map2) {
        var replace = getReplacer(map2);
        return function(str) {
          return String(str).replace(strictEntityRe, replace);
        };
      }
      var sorter = function(a, b) {
        return a < b ? 1 : -1;
      };
      exports22.decodeHTML = function() {
        for (var legacy = Object.keys(legacy_json_1.default).sort(sorter), keys = Object.keys(entities_json_1.default).sort(sorter), i = 0, j = 0; i < keys.length; i++)
          legacy[j] === keys[i] ? (keys[i] += ";?", j++) : keys[i] += ";";
        var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"), replace = getReplacer(entities_json_1.default);
        function replacer3(str) {
          return str.substr(-1) !== ";" && (str += ";"), replace(str);
        }
        return function(str) {
          return String(str).replace(re, replacer3);
        };
      }();
      function getReplacer(map2) {
        return function(str) {
          if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            return secondChar === "X" || secondChar === "x" ? decode_codepoint_1.default(parseInt(str.substr(3), 16)) : decode_codepoint_1.default(parseInt(str.substr(2), 10));
          }
          return map2[str.slice(1, -1)] || str;
        };
      }
    } });
    var require_encode = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/encode.js"(exports22) {
      "use strict";
      var __importDefault = exports22 && exports22.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.escapeUTF8 = exports22.escape = exports22.encodeNonAsciiHTML = exports22.encodeHTML = exports22.encodeXML = void 0;
      var xml_json_1 = __importDefault(require_xml()), inverseXML = getInverseObj(xml_json_1.default), xmlReplacer = getInverseReplacer(inverseXML);
      exports22.encodeXML = getASCIIEncoder(inverseXML);
      var entities_json_1 = __importDefault(require_entities()), inverseHTML = getInverseObj(entities_json_1.default), htmlReplacer = getInverseReplacer(inverseHTML);
      exports22.encodeHTML = getInverse(inverseHTML, htmlReplacer);
      exports22.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
      function getInverseObj(obj) {
        return Object.keys(obj).sort().reduce(function(inverse, name2) {
          return inverse[obj[name2]] = "&" + name2 + ";", inverse;
        }, {});
      }
      function getInverseReplacer(inverse) {
        for (var single = [], multiple = [], _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
          var k = _a[_i];
          k.length === 1 ? single.push("\\" + k) : multiple.push(k);
        }
        single.sort();
        for (var start = 0; start < single.length - 1; start++) {
          for (var end = start; end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1); )
            end += 1;
          var count = 1 + end - start;
          count < 3 || single.splice(start, count, single[start] + "-" + single[end]);
        }
        return multiple.unshift("[" + single.join("") + "]"), new RegExp(multiple.join("|"), "g");
      }
      var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, getCodePoint = String.prototype.codePointAt != null ? function(str) {
        return str.codePointAt(0);
      } : function(c) {
        return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
      };
      function singleCharReplacer(c) {
        return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
      }
      function getInverse(inverse, re) {
        return function(data) {
          return data.replace(re, function(name2) {
            return inverse[name2];
          }).replace(reNonASCII, singleCharReplacer);
        };
      }
      var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
      function escape2(data) {
        return data.replace(reEscapeChars, singleCharReplacer);
      }
      exports22.escape = escape2;
      function escapeUTF8(data) {
        return data.replace(xmlReplacer, singleCharReplacer);
      }
      exports22.escapeUTF8 = escapeUTF8;
      function getASCIIEncoder(obj) {
        return function(data) {
          return data.replace(reEscapeChars, function(c) {
            return obj[c] || singleCharReplacer(c);
          });
        };
      }
    } });
    var require_lib2 = __commonJS3({ "../../node_modules/ansi-to-html/node_modules/entities/lib/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.decodeXMLStrict = exports22.decodeHTML5Strict = exports22.decodeHTML4Strict = exports22.decodeHTML5 = exports22.decodeHTML4 = exports22.decodeHTMLStrict = exports22.decodeHTML = exports22.decodeXML = exports22.encodeHTML5 = exports22.encodeHTML4 = exports22.escapeUTF8 = exports22.escape = exports22.encodeNonAsciiHTML = exports22.encodeHTML = exports22.encodeXML = exports22.encode = exports22.decodeStrict = exports22.decode = void 0;
      var decode_1 = require_decode2(), encode_1 = require_encode();
      function decode(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
      }
      exports22.decode = decode;
      function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
      }
      exports22.decodeStrict = decodeStrict;
      function encode(data, level) {
        return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
      }
      exports22.encode = encode;
      var encode_2 = require_encode();
      Object.defineProperty(exports22, "encodeXML", { enumerable: true, get: function() {
        return encode_2.encodeXML;
      } });
      Object.defineProperty(exports22, "encodeHTML", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports22, "encodeNonAsciiHTML", { enumerable: true, get: function() {
        return encode_2.encodeNonAsciiHTML;
      } });
      Object.defineProperty(exports22, "escape", { enumerable: true, get: function() {
        return encode_2.escape;
      } });
      Object.defineProperty(exports22, "escapeUTF8", { enumerable: true, get: function() {
        return encode_2.escapeUTF8;
      } });
      Object.defineProperty(exports22, "encodeHTML4", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports22, "encodeHTML5", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      var decode_2 = require_decode2();
      Object.defineProperty(exports22, "decodeXML", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
      Object.defineProperty(exports22, "decodeHTML", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports22, "decodeHTMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports22, "decodeHTML4", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports22, "decodeHTML5", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports22, "decodeHTML4Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports22, "decodeHTML5Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports22, "decodeXMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
    } });
    var require_ansi_to_html = __commonJS3({ "../../node_modules/ansi-to-html/lib/ansi_to_html.js"(exports22, module22) {
      "use strict";
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
      }
      function _createForOfIteratorHelper(o) {
        if (typeof Symbol > "u" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
            var i = 0, F = function() {
            };
            return { s: F, n: function() {
              return i >= o.length ? { done: true } : { done: false, value: o[i++] };
            }, e: function(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var it, normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = o[Symbol.iterator]();
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e2) {
          didErr = true, err = _e2;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(n);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      var entities = require_lib2(), defaults = { fg: "#FFF", bg: "#000", newline: false, escapeXML: false, stream: false, colors: getDefaultColors() };
      function getDefaultColors() {
        var colors = { 0: "#000", 1: "#A00", 2: "#0A0", 3: "#A50", 4: "#00A", 5: "#A0A", 6: "#0AA", 7: "#AAA", 8: "#555", 9: "#F55", 10: "#5F5", 11: "#FF5", 12: "#55F", 13: "#F5F", 14: "#5FF", 15: "#FFF" };
        return range(0, 5).forEach(function(red) {
          range(0, 5).forEach(function(green) {
            range(0, 5).forEach(function(blue) {
              return setStyleColor(red, green, blue, colors);
            });
          });
        }), range(0, 23).forEach(function(gray) {
          var c = gray + 232, l = toHexString(gray * 10 + 8);
          colors[c] = "#" + l + l + l;
        }), colors;
      }
      function setStyleColor(red, green, blue, colors) {
        var c = 16 + red * 36 + green * 6 + blue, r = red > 0 ? red * 40 + 55 : 0, g = green > 0 ? green * 40 + 55 : 0, b = blue > 0 ? blue * 40 + 55 : 0;
        colors[c] = toColorHexString([r, g, b]);
      }
      function toHexString(num) {
        for (var str = num.toString(16); str.length < 2; )
          str = "0" + str;
        return str;
      }
      function toColorHexString(ref) {
        var results = [], _iterator = _createForOfIteratorHelper(ref), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var r = _step.value;
            results.push(toHexString(r));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return "#" + results.join("");
      }
      function generateOutput(stack, token, data, options2) {
        var result2;
        return token === "text" ? result2 = pushText(data, options2) : token === "display" ? result2 = handleDisplay(stack, data, options2) : token === "xterm256" ? result2 = pushForegroundColor(stack, options2.colors[data]) : token === "rgb" && (result2 = handleRgb(stack, data)), result2;
      }
      function handleRgb(stack, data) {
        data = data.substring(2).slice(0, -1);
        var operation = +data.substr(0, 2), color = data.substring(5).split(";"), rgb = color.map(function(value2) {
          return ("0" + Number(value2).toString(16)).substr(-2);
        }).join("");
        return pushStyle(stack, (operation === 38 ? "color:#" : "background-color:#") + rgb);
      }
      function handleDisplay(stack, code, options2) {
        code = parseInt(code, 10);
        var codeMap = { "-1": function() {
          return "<br/>";
        }, 0: function() {
          return stack.length && resetStyles(stack);
        }, 1: function() {
          return pushTag(stack, "b");
        }, 3: function() {
          return pushTag(stack, "i");
        }, 4: function() {
          return pushTag(stack, "u");
        }, 8: function() {
          return pushStyle(stack, "display:none");
        }, 9: function() {
          return pushTag(stack, "strike");
        }, 22: function() {
          return pushStyle(stack, "font-weight:normal;text-decoration:none;font-style:normal");
        }, 23: function() {
          return closeTag(stack, "i");
        }, 24: function() {
          return closeTag(stack, "u");
        }, 39: function() {
          return pushForegroundColor(stack, options2.fg);
        }, 49: function() {
          return pushBackgroundColor(stack, options2.bg);
        }, 53: function() {
          return pushStyle(stack, "text-decoration:overline");
        } }, result2;
        return codeMap[code] ? result2 = codeMap[code]() : 4 < code && code < 7 ? result2 = pushTag(stack, "blink") : 29 < code && code < 38 ? result2 = pushForegroundColor(stack, options2.colors[code - 30]) : 39 < code && code < 48 ? result2 = pushBackgroundColor(stack, options2.colors[code - 40]) : 89 < code && code < 98 ? result2 = pushForegroundColor(stack, options2.colors[8 + (code - 90)]) : 99 < code && code < 108 && (result2 = pushBackgroundColor(stack, options2.colors[8 + (code - 100)])), result2;
      }
      function resetStyles(stack) {
        var stackClone = stack.slice(0);
        return stack.length = 0, stackClone.reverse().map(function(tag) {
          return "</" + tag + ">";
        }).join("");
      }
      function range(low, high) {
        for (var results = [], j = low; j <= high; j++)
          results.push(j);
        return results;
      }
      function notCategory(category) {
        return function(e) {
          return (category === null || e.category !== category) && category !== "all";
        };
      }
      function categoryForCode(code) {
        code = parseInt(code, 10);
        var result2 = null;
        return code === 0 ? result2 = "all" : code === 1 ? result2 = "bold" : 2 < code && code < 5 ? result2 = "underline" : 4 < code && code < 7 ? result2 = "blink" : code === 8 ? result2 = "hide" : code === 9 ? result2 = "strike" : 29 < code && code < 38 || code === 39 || 89 < code && code < 98 ? result2 = "foreground-color" : (39 < code && code < 48 || code === 49 || 99 < code && code < 108) && (result2 = "background-color"), result2;
      }
      function pushText(text, options2) {
        return options2.escapeXML ? entities.encodeXML(text) : text;
      }
      function pushTag(stack, tag, style) {
        return style || (style = ""), stack.push(tag), "<".concat(tag).concat(style ? ' style="'.concat(style, '"') : "", ">");
      }
      function pushStyle(stack, style) {
        return pushTag(stack, "span", style);
      }
      function pushForegroundColor(stack, color) {
        return pushTag(stack, "span", "color:" + color);
      }
      function pushBackgroundColor(stack, color) {
        return pushTag(stack, "span", "background-color:" + color);
      }
      function closeTag(stack, style) {
        var last;
        if (stack.slice(-1)[0] === style && (last = stack.pop()), last)
          return "</" + style + ">";
      }
      function tokenize(text, options2, callback) {
        var ansiMatch = false, ansiHandler = 3;
        function remove() {
          return "";
        }
        function removeXterm256(m, g1) {
          return callback("xterm256", g1), "";
        }
        function newline(m) {
          return options2.newline ? callback("display", -1) : callback("text", m), "";
        }
        function ansiMess(m, g1) {
          ansiMatch = true, g1.trim().length === 0 && (g1 = "0"), g1 = g1.trimRight(";").split(";");
          var _iterator2 = _createForOfIteratorHelper(g1), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var g = _step2.value;
              callback("display", g);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          return "";
        }
        function realText(m) {
          return callback("text", m), "";
        }
        function rgb(m) {
          return callback("rgb", m), "";
        }
        var tokens = [{ pattern: /^\x08+/, sub: remove }, { pattern: /^\x1b\[[012]?K/, sub: remove }, { pattern: /^\x1b\[\(B/, sub: remove }, { pattern: /^\x1b\[[34]8;2;\d+;\d+;\d+m/, sub: rgb }, { pattern: /^\x1b\[38;5;(\d+)m/, sub: removeXterm256 }, { pattern: /^\n/, sub: newline }, { pattern: /^\r+\n/, sub: newline }, { pattern: /^\x1b\[((?:\d{1,3};?)+|)m/, sub: ansiMess }, { pattern: /^\x1b\[\d?J/, sub: remove }, { pattern: /^\x1b\[\d{0,3};\d{0,3}f/, sub: remove }, { pattern: /^\x1b\[?[\d;]{0,3}/, sub: remove }, { pattern: /^(([^\x1b\x08\r\n])+)/, sub: realText }];
        function process2(handler2, i2) {
          i2 > ansiHandler && ansiMatch || (ansiMatch = false, text = text.replace(handler2.pattern, handler2.sub));
        }
        var results1 = [], _text = text, length = _text.length;
        outer:
          for (; length > 0; ) {
            for (var i = 0, o = 0, len = tokens.length; o < len; i = ++o) {
              var handler = tokens[i];
              if (process2(handler, i), text.length !== length) {
                length = text.length;
                continue outer;
              }
            }
            if (text.length === length)
              break;
            results1.push(0), length = text.length;
          }
        return results1;
      }
      function updateStickyStack(stickyStack, token, data) {
        return token !== "text" && (stickyStack = stickyStack.filter(notCategory(categoryForCode(data))), stickyStack.push({ token, data, category: categoryForCode(data) })), stickyStack;
      }
      var Filter = function() {
        function Filter2(options2) {
          _classCallCheck(this, Filter2), options2 = options2 || {}, options2.colors && (options2.colors = Object.assign({}, defaults.colors, options2.colors)), this.options = Object.assign({}, defaults, options2), this.stack = [], this.stickyStack = [];
        }
        return _createClass(Filter2, [{ key: "toHtml", value: function(input) {
          var _this = this;
          input = typeof input == "string" ? [input] : input;
          var stack = this.stack, options2 = this.options, buf = [];
          return this.stickyStack.forEach(function(element) {
            var output = generateOutput(stack, element.token, element.data, options2);
            output && buf.push(output);
          }), tokenize(input.join(""), options2, function(token, data) {
            var output = generateOutput(stack, token, data, options2);
            output && buf.push(output), options2.stream && (_this.stickyStack = updateStickyStack(_this.stickyStack, token, data));
          }), stack.length && buf.push(resetStyles(stack)), buf.join("");
        } }]), Filter2;
      }();
      module22.exports = Filter;
    } });
    var src_exports = {};
    __export2(src_exports, { DocsContext: () => DocsContext, HooksContext: () => HooksContext, Preview: () => Preview, PreviewWeb: () => PreviewWeb, PreviewWithSelection: () => PreviewWithSelection, StoryStore: () => StoryStore, UrlStore: () => UrlStore, WebView: () => WebView, addons: () => addons, applyHooks: () => applyHooks, combineArgs: () => combineArgs, combineParameters: () => combineParameters, composeConfigs: () => composeConfigs, composeStepRunners: () => composeStepRunners, composeStories: () => composeStories, composeStory: () => composeStory, createPlaywrightTest: () => createPlaywrightTest, decorateStory: () => decorateStory, defaultDecorateStory: () => defaultDecorateStory, filterArgTypes: () => filterArgTypes, inferControls: () => inferControls, makeDecorator: () => makeDecorator, mockChannel: () => mockChannel, normalizeStory: () => normalizeStory, prepareMeta: () => prepareMeta, prepareStory: () => prepareStory, sanitizeStoryContextUpdate: () => sanitizeStoryContextUpdate, setProjectAnnotations: () => setProjectAnnotations, simulateDOMContentLoaded: () => simulateDOMContentLoaded, simulatePageLoad: () => simulatePageLoad, sortStoriesV7: () => sortStoriesV7, useArgs: () => useArgs, useCallback: () => useCallback, useChannel: () => useChannel, useEffect: () => useEffect, useGlobals: () => useGlobals, useMemo: () => useMemo, useParameter: () => useParameter, useReducer: () => useReducer, useRef: () => useRef, useState: () => useState, useStoryContext: () => useStoryContext, userOrAutoTitle: () => userOrAutoTitle, userOrAutoTitleFromSpecifier: () => userOrAutoTitleFromSpecifier });
    module2.exports = __toCommonJS2(src_exports);
    var import_global = require_dist();
    var import_channels = require_dist4();
    function mockChannel() {
      let transport = { setHandler: () => {
      }, send: () => {
      } };
      return new import_channels.Channel({ transport });
    }
    var AddonStore = class {
      constructor() {
        this.getChannel = () => {
          if (!this.channel) {
            let channel = mockChannel();
            return this.setChannel(channel), channel;
          }
          return this.channel;
        };
        this.ready = () => this.promise;
        this.hasChannel = () => !!this.channel;
        this.setChannel = (channel) => {
          this.channel = channel, this.resolve();
        };
        this.promise = new Promise((res) => {
          this.resolve = () => res(this.getChannel());
        });
      }
    };
    var KEY = "__STORYBOOK_ADDONS_PREVIEW";
    function getAddonsStore() {
      return import_global.global[KEY] || (import_global.global[KEY] = new AddonStore()), import_global.global[KEY];
    }
    var addons = getAddonsStore();
    var import_global2 = require_dist();
    var import_client_logger = require_dist3();
    var import_core_events = require_dist2();
    var HooksContext = class {
      constructor() {
        this.hookListsMap = void 0;
        this.mountedDecorators = void 0;
        this.prevMountedDecorators = void 0;
        this.currentHooks = void 0;
        this.nextHookIndex = void 0;
        this.currentPhase = void 0;
        this.currentEffects = void 0;
        this.prevEffects = void 0;
        this.currentDecoratorName = void 0;
        this.hasUpdates = void 0;
        this.currentContext = void 0;
        this.renderListener = (storyId) => {
          var _a;
          storyId === ((_a = this.currentContext) == null ? void 0 : _a.id) && (this.triggerEffects(), this.currentContext = null, this.removeRenderListeners());
        };
        this.init();
      }
      init() {
        this.hookListsMap = /* @__PURE__ */ new WeakMap(), this.mountedDecorators = /* @__PURE__ */ new Set(), this.prevMountedDecorators = /* @__PURE__ */ new Set(), this.currentHooks = [], this.nextHookIndex = 0, this.currentPhase = "NONE", this.currentEffects = [], this.prevEffects = [], this.currentDecoratorName = null, this.hasUpdates = false, this.currentContext = null;
      }
      clean() {
        this.prevEffects.forEach((effect) => {
          effect.destroy && effect.destroy();
        }), this.init(), this.removeRenderListeners();
      }
      getNextHook() {
        let hook = this.currentHooks[this.nextHookIndex];
        return this.nextHookIndex += 1, hook;
      }
      triggerEffects() {
        this.prevEffects.forEach((effect) => {
          !this.currentEffects.includes(effect) && effect.destroy && effect.destroy();
        }), this.currentEffects.forEach((effect) => {
          this.prevEffects.includes(effect) || (effect.destroy = effect.create());
        }), this.prevEffects = this.currentEffects, this.currentEffects = [];
      }
      addRenderListeners() {
        this.removeRenderListeners(), addons.getChannel().on(import_core_events.STORY_RENDERED, this.renderListener);
      }
      removeRenderListeners() {
        addons.getChannel().removeListener(import_core_events.STORY_RENDERED, this.renderListener);
      }
    };
    function hookify(fn2) {
      let hookified = (...args2) => {
        let { hooks } = typeof args2[0] == "function" ? args2[1] : args2[0], prevPhase = hooks.currentPhase, prevHooks = hooks.currentHooks, prevNextHookIndex = hooks.nextHookIndex, prevDecoratorName = hooks.currentDecoratorName;
        hooks.currentDecoratorName = fn2.name, hooks.prevMountedDecorators.has(fn2) ? (hooks.currentPhase = "UPDATE", hooks.currentHooks = hooks.hookListsMap.get(fn2) || []) : (hooks.currentPhase = "MOUNT", hooks.currentHooks = [], hooks.hookListsMap.set(fn2, hooks.currentHooks), hooks.prevMountedDecorators.add(fn2)), hooks.nextHookIndex = 0;
        let prevContext = import_global2.global.STORYBOOK_HOOKS_CONTEXT;
        import_global2.global.STORYBOOK_HOOKS_CONTEXT = hooks;
        let result2 = fn2(...args2);
        if (import_global2.global.STORYBOOK_HOOKS_CONTEXT = prevContext, hooks.currentPhase === "UPDATE" && hooks.getNextHook() != null)
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return hooks.currentPhase = prevPhase, hooks.currentHooks = prevHooks, hooks.nextHookIndex = prevNextHookIndex, hooks.currentDecoratorName = prevDecoratorName, result2;
      };
      return hookified.originalFn = fn2, hookified;
    }
    var numberOfRenders = 0;
    var RENDER_LIMIT = 25;
    var applyHooks = (applyDecorators) => (storyFn, decorators) => {
      let decorated = applyDecorators(hookify(storyFn), decorators.map((decorator) => hookify(decorator)));
      return (context) => {
        let { hooks } = context;
        hooks.prevMountedDecorators ??= /* @__PURE__ */ new Set(), hooks.mountedDecorators = /* @__PURE__ */ new Set([storyFn, ...decorators]), hooks.currentContext = context, hooks.hasUpdates = false;
        let result2 = decorated(context);
        for (numberOfRenders = 1; hooks.hasUpdates; )
          if (hooks.hasUpdates = false, hooks.currentEffects = [], result2 = decorated(context), numberOfRenders += 1, numberOfRenders > RENDER_LIMIT)
            throw new Error("Too many re-renders. Storybook limits the number of renders to prevent an infinite loop.");
        return hooks.addRenderListeners(), result2;
      };
    };
    var areDepsEqual = (deps, nextDeps) => deps.length === nextDeps.length && deps.every((dep, i) => dep === nextDeps[i]);
    var invalidHooksError = () => new Error("Storybook preview hooks can only be called inside decorators and story functions.");
    function getHooksContextOrNull() {
      return import_global2.global.STORYBOOK_HOOKS_CONTEXT || null;
    }
    function getHooksContextOrThrow() {
      let hooks = getHooksContextOrNull();
      if (hooks == null)
        throw invalidHooksError();
      return hooks;
    }
    function useHook(name2, callback, deps) {
      let hooks = getHooksContextOrThrow();
      if (hooks.currentPhase === "MOUNT") {
        deps != null && !Array.isArray(deps) && import_client_logger.logger.warn(`${name2} received a final argument that is not an array (instead, received ${deps}). When specified, the final argument must be an array.`);
        let hook = { name: name2, deps };
        return hooks.currentHooks.push(hook), callback(hook), hook;
      }
      if (hooks.currentPhase === "UPDATE") {
        let hook = hooks.getNextHook();
        if (hook == null)
          throw new Error("Rendered more hooks than during the previous render.");
        return hook.name !== name2 && import_client_logger.logger.warn(`Storybook has detected a change in the order of Hooks${hooks.currentDecoratorName ? ` called by ${hooks.currentDecoratorName}` : ""}. This will lead to bugs and errors if not fixed.`), deps != null && hook.deps == null && import_client_logger.logger.warn(`${name2} received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.`), deps != null && hook.deps != null && deps.length !== hook.deps.length && import_client_logger.logger.warn(`The final argument passed to ${name2} changed size between renders. The order and size of this array must remain constant.
Previous: ${hook.deps}
Incoming: ${deps}`), (deps == null || hook.deps == null || !areDepsEqual(deps, hook.deps)) && (callback(hook), hook.deps = deps), hook;
      }
      throw invalidHooksError();
    }
    function useMemoLike(name2, nextCreate, deps) {
      let { memoizedState } = useHook(name2, (hook) => {
        hook.memoizedState = nextCreate();
      }, deps);
      return memoizedState;
    }
    function useMemo(nextCreate, deps) {
      return useMemoLike("useMemo", nextCreate, deps);
    }
    function useCallback(callback, deps) {
      return useMemoLike("useCallback", () => callback, deps);
    }
    function useRefLike(name2, initialValue) {
      return useMemoLike(name2, () => ({ current: initialValue }), []);
    }
    function useRef(initialValue) {
      return useRefLike("useRef", initialValue);
    }
    function triggerUpdate() {
      let hooks = getHooksContextOrNull();
      if (hooks != null && hooks.currentPhase !== "NONE")
        hooks.hasUpdates = true;
      else
        try {
          addons.getChannel().emit(import_core_events.FORCE_RE_RENDER);
        } catch {
          import_client_logger.logger.warn("State updates of Storybook preview hooks work only in browser");
        }
    }
    function useStateLike(name2, initialState) {
      let stateRef = useRefLike(name2, typeof initialState == "function" ? initialState() : initialState), setState = (update) => {
        stateRef.current = typeof update == "function" ? update(stateRef.current) : update, triggerUpdate();
      };
      return [stateRef.current, setState];
    }
    function useState(initialState) {
      return useStateLike("useState", initialState);
    }
    function useReducer(reducer, initialArg, init) {
      let initialState = init != null ? () => init(initialArg) : initialArg, [state, setState] = useStateLike("useReducer", initialState);
      return [state, (action) => setState((prevState) => reducer(prevState, action))];
    }
    function useEffect(create, deps) {
      let hooks = getHooksContextOrThrow(), effect = useMemoLike("useEffect", () => ({ create }), deps);
      hooks.currentEffects.includes(effect) || hooks.currentEffects.push(effect);
    }
    function useChannel(eventMap, deps = []) {
      let channel = addons.getChannel();
      return useEffect(() => (Object.entries(eventMap).forEach(([type, listener]) => channel.on(type, listener)), () => {
        Object.entries(eventMap).forEach(([type, listener]) => channel.removeListener(type, listener));
      }), [...Object.keys(eventMap), ...deps]), useCallback(channel.emit.bind(channel), [channel]);
    }
    function useStoryContext() {
      let { currentContext } = getHooksContextOrThrow();
      if (currentContext == null)
        throw invalidHooksError();
      return currentContext;
    }
    function useParameter(parameterKey, defaultValue) {
      let { parameters } = useStoryContext();
      if (parameterKey)
        return parameters[parameterKey] ?? defaultValue;
    }
    function useArgs() {
      let channel = addons.getChannel(), { id: storyId, args: args2 } = useStoryContext(), updateArgs = useCallback((updatedArgs) => channel.emit(import_core_events.UPDATE_STORY_ARGS, { storyId, updatedArgs }), [channel, storyId]), resetArgs = useCallback((argNames) => channel.emit(import_core_events.RESET_STORY_ARGS, { storyId, argNames }), [channel, storyId]);
      return [args2, updateArgs, resetArgs];
    }
    function useGlobals() {
      let channel = addons.getChannel(), { globals } = useStoryContext(), updateGlobals = useCallback((newGlobals) => channel.emit(import_core_events.UPDATE_GLOBALS, { globals: newGlobals }), [channel]);
      return [globals, updateGlobals];
    }
    var makeDecorator = ({ name: name2, parameterName, wrapper, skipIfNoParametersOrOptions = false }) => {
      let decorator = (options2) => (storyFn, context) => {
        let parameters = context.parameters && context.parameters[parameterName];
        return parameters && parameters.disable || skipIfNoParametersOrOptions && !options2 && !parameters ? storyFn(context) : wrapper(storyFn, context, { options: options2, parameters });
      };
      return (...args2) => typeof args2[0] == "function" ? decorator()(...args2) : (...innerArgs) => {
        if (innerArgs.length > 1)
          return args2.length > 1 ? decorator(args2)(...innerArgs) : decorator(...args2)(...innerArgs);
        throw new Error(`Passing stories directly into ${name2}() is not allowed,
        instead use addDecorator(${name2}) and pass options with the '${parameterName}' parameter`);
      };
    };
    var import_memoizerific2 = __toESM3(require_memoizerific());
    var import_mapValues4 = __toESM3(require_mapValues());
    var import_pick = __toESM3(require_pick());
    var import_preview_errors2 = require_preview_errors();
    var import_client_logger8 = require_dist3();
    var import_memoizerific3 = __toESM3(require_memoizerific());
    var import_preview_errors = require_preview_errors();
    var getImportPathMap = (0, import_memoizerific3.default)(1)((entries) => Object.values(entries).reduce((acc, entry) => (acc[entry.importPath] = acc[entry.importPath] || entry, acc), {}));
    var StoryIndexStore = class {
      constructor({ entries } = { v: 5, entries: {} }) {
        this.entries = entries;
      }
      entryFromSpecifier(specifier) {
        let entries = Object.values(this.entries);
        if (specifier === "*")
          return entries[0];
        if (typeof specifier == "string")
          return this.entries[specifier] ? this.entries[specifier] : entries.find((entry) => entry.id.startsWith(specifier));
        let { name: name2, title } = specifier;
        return entries.find((entry) => entry.name === name2 && entry.title === title);
      }
      storyIdToEntry(storyId) {
        let storyEntry = this.entries[storyId];
        if (!storyEntry)
          throw new import_preview_errors.MissingStoryAfterHmrError({ storyId });
        return storyEntry;
      }
      importPathToEntry(importPath) {
        return getImportPathMap(this.entries)[importPath];
      }
    };
    var import_dequal = require_dist5();
    var import_client_logger2 = require_dist3();
    var import_isPlainObject = __toESM3(require_isPlainObject());
    var import_ts_dedent = (init_esm(), __toCommonJS(esm_exports));
    var INCOMPATIBLE = Symbol("incompatible");
    var map = (arg, argType) => {
      let type = argType.type;
      if (arg == null || !type || argType.mapping)
        return arg;
      switch (type.name) {
        case "string":
          return String(arg);
        case "enum":
          return arg;
        case "number":
          return Number(arg);
        case "boolean":
          return String(arg) === "true";
        case "array":
          return !type.value || !Array.isArray(arg) ? INCOMPATIBLE : arg.reduce((acc, item, index) => {
            let mapped = map(item, { type: type.value });
            return mapped !== INCOMPATIBLE && (acc[index] = mapped), acc;
          }, new Array(arg.length));
        case "object":
          return typeof arg == "string" || typeof arg == "number" ? arg : !type.value || typeof arg != "object" ? INCOMPATIBLE : Object.entries(arg).reduce((acc, [key2, val]) => {
            let mapped = map(val, { type: type.value[key2] });
            return mapped === INCOMPATIBLE ? acc : Object.assign(acc, { [key2]: mapped });
          }, {});
        default:
          return INCOMPATIBLE;
      }
    };
    var mapArgsToTypes = (args2, argTypes) => Object.entries(args2).reduce((acc, [key2, value2]) => {
      if (!argTypes[key2])
        return acc;
      let mapped = map(value2, argTypes[key2]);
      return mapped === INCOMPATIBLE ? acc : Object.assign(acc, { [key2]: mapped });
    }, {});
    var combineArgs = (value2, update) => Array.isArray(value2) && Array.isArray(update) ? update.reduce((acc, upd, index) => (acc[index] = combineArgs(value2[index], update[index]), acc), [...value2]).filter((v) => v !== void 0) : !(0, import_isPlainObject.default)(value2) || !(0, import_isPlainObject.default)(update) ? update : Object.keys({ ...value2, ...update }).reduce((acc, key2) => {
      if (key2 in update) {
        let combined = combineArgs(value2[key2], update[key2]);
        combined !== void 0 && (acc[key2] = combined);
      } else
        acc[key2] = value2[key2];
      return acc;
    }, {});
    var validateOptions = (args2, argTypes) => Object.entries(argTypes).reduce((acc, [key2, { options: options2 }]) => {
      function allowArg() {
        return key2 in args2 && (acc[key2] = args2[key2]), acc;
      }
      if (!options2)
        return allowArg();
      if (!Array.isArray(options2))
        return import_client_logger2.once.error(import_ts_dedent.dedent`
        Invalid argType: '${key2}.options' should be an array.

        More info: https://storybook.js.org/docs/react/api/argtypes
      `), allowArg();
      if (options2.some((opt) => opt && ["object", "function"].includes(typeof opt)))
        return import_client_logger2.once.error(import_ts_dedent.dedent`
        Invalid argType: '${key2}.options' should only contain primitives. Use a 'mapping' for complex values.

        More info: https://storybook.js.org/docs/react/writing-stories/args#mapping-to-complex-arg-values
      `), allowArg();
      let isArray2 = Array.isArray(args2[key2]), invalidIndex = isArray2 && args2[key2].findIndex((val) => !options2.includes(val)), isValidArray = isArray2 && invalidIndex === -1;
      if (args2[key2] === void 0 || options2.includes(args2[key2]) || isValidArray)
        return allowArg();
      let field = isArray2 ? `${key2}[${invalidIndex}]` : key2, supportedOptions = options2.map((opt) => typeof opt == "string" ? `'${opt}'` : String(opt)).join(", ");
      return import_client_logger2.once.warn(`Received illegal value for '${field}'. Supported options: ${supportedOptions}`), acc;
    }, {});
    var DEEPLY_EQUAL = Symbol("Deeply equal");
    var deepDiff = (value2, update) => {
      if (typeof value2 != typeof update)
        return update;
      if ((0, import_dequal.dequal)(value2, update))
        return DEEPLY_EQUAL;
      if (Array.isArray(value2) && Array.isArray(update)) {
        let res = update.reduce((acc, upd, index) => {
          let diff = deepDiff(value2[index], upd);
          return diff !== DEEPLY_EQUAL && (acc[index] = diff), acc;
        }, new Array(update.length));
        return update.length >= value2.length ? res : res.concat(new Array(value2.length - update.length).fill(void 0));
      }
      return (0, import_isPlainObject.default)(value2) && (0, import_isPlainObject.default)(update) ? Object.keys({ ...value2, ...update }).reduce((acc, key2) => {
        let diff = deepDiff(value2 == null ? void 0 : value2[key2], update == null ? void 0 : update[key2]);
        return diff === DEEPLY_EQUAL ? acc : Object.assign(acc, { [key2]: diff });
      }, {}) : update;
    };
    var UNTARGETED = "UNTARGETED";
    function groupArgsByTarget({ args: args2, argTypes }) {
      let groupedArgs = {};
      return Object.entries(args2).forEach(([name2, value2]) => {
        let { target = UNTARGETED } = argTypes[name2] || {};
        groupedArgs[target] = groupedArgs[target] || {}, groupedArgs[target][name2] = value2;
      }), groupedArgs;
    }
    function deleteUndefined(obj) {
      return Object.keys(obj).forEach((key2) => obj[key2] === void 0 && delete obj[key2]), obj;
    }
    var ArgsStore = class {
      constructor() {
        this.initialArgsByStoryId = {};
        this.argsByStoryId = {};
      }
      get(storyId) {
        if (!(storyId in this.argsByStoryId))
          throw new Error(`No args known for ${storyId} -- has it been rendered yet?`);
        return this.argsByStoryId[storyId];
      }
      setInitial(story) {
        if (!this.initialArgsByStoryId[story.id])
          this.initialArgsByStoryId[story.id] = story.initialArgs, this.argsByStoryId[story.id] = story.initialArgs;
        else if (this.initialArgsByStoryId[story.id] !== story.initialArgs) {
          let delta = deepDiff(this.initialArgsByStoryId[story.id], this.argsByStoryId[story.id]);
          this.initialArgsByStoryId[story.id] = story.initialArgs, this.argsByStoryId[story.id] = story.initialArgs, delta !== DEEPLY_EQUAL && this.updateFromDelta(story, delta);
        }
      }
      updateFromDelta(story, delta) {
        let validatedDelta = validateOptions(delta, story.argTypes);
        this.argsByStoryId[story.id] = combineArgs(this.argsByStoryId[story.id], validatedDelta);
      }
      updateFromPersisted(story, persisted) {
        let mappedPersisted = mapArgsToTypes(persisted, story.argTypes);
        return this.updateFromDelta(story, mappedPersisted);
      }
      update(storyId, argsUpdate) {
        if (!(storyId in this.argsByStoryId))
          throw new Error(`No args known for ${storyId} -- has it been rendered yet?`);
        this.argsByStoryId[storyId] = deleteUndefined({ ...this.argsByStoryId[storyId], ...argsUpdate });
      }
    };
    var import_client_logger3 = require_dist3();
    var getValuesFromArgTypes = (argTypes = {}) => Object.entries(argTypes).reduce((acc, [arg, { defaultValue }]) => (typeof defaultValue < "u" && (acc[arg] = defaultValue), acc), {});
    var GlobalsStore = class {
      constructor({ globals = {}, globalTypes = {} }) {
        this.set({ globals, globalTypes });
      }
      set({ globals = {}, globalTypes = {} }) {
        let delta = this.initialGlobals && deepDiff(this.initialGlobals, this.globals);
        this.allowedGlobalNames = /* @__PURE__ */ new Set([...Object.keys(globals), ...Object.keys(globalTypes)]);
        let defaultGlobals = getValuesFromArgTypes(globalTypes);
        this.initialGlobals = { ...defaultGlobals, ...globals }, this.globals = this.initialGlobals, delta && delta !== DEEPLY_EQUAL && this.updateFromPersisted(delta);
      }
      filterAllowedGlobals(globals) {
        return Object.entries(globals).reduce((acc, [key2, value2]) => (this.allowedGlobalNames.has(key2) ? acc[key2] = value2 : import_client_logger3.logger.warn(`Attempted to set a global (${key2}) that is not defined in initial globals or globalTypes`), acc), {});
      }
      updateFromPersisted(persisted) {
        let allowedUrlGlobals = this.filterAllowedGlobals(persisted);
        this.globals = { ...this.globals, ...allowedUrlGlobals };
      }
      get() {
        return this.globals;
      }
      update(newGlobals) {
        this.globals = { ...this.globals, ...this.filterAllowedGlobals(newGlobals) };
      }
    };
    var import_mapValues = __toESM3(require_mapValues());
    var normalizeType = (type) => typeof type == "string" ? { name: type } : type;
    var normalizeControl = (control) => typeof control == "string" ? { type: control } : control;
    var normalizeInputType = (inputType, key2) => {
      let { type, control, ...rest } = inputType, normalized = { name: key2, ...rest };
      return type && (normalized.type = normalizeType(type)), control ? normalized.control = normalizeControl(control) : control === false && (normalized.control = { disable: true }), normalized;
    };
    var normalizeInputTypes = (inputTypes) => (0, import_mapValues.default)(inputTypes, normalizeInputType);
    var import_csf = require_dist6();
    var import_ts_dedent2 = (init_esm(), __toCommonJS(esm_exports));
    var import_client_logger4 = require_dist3();
    var import_util_deprecate = __toESM3(require_node());
    var normalizeArrays = (array) => Array.isArray(array) ? array : array ? [array] : [];
    var deprecatedStoryAnnotation = import_ts_dedent2.dedent`
CSF .story annotations deprecated; annotate story functions directly:
- StoryFn.story.name => StoryFn.storyName
- StoryFn.story.(parameters|decorators) => StoryFn.(parameters|decorators)
See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#hoisted-csf-annotations for details and codemod.
`;
    var deprecatedStoryAnnotationWarning = (0, import_util_deprecate.default)(() => {
    }, deprecatedStoryAnnotation);
    function normalizeStory(key2, storyAnnotations, meta2) {
      let storyObject = storyAnnotations, userStoryFn = typeof storyAnnotations == "function" ? storyAnnotations : null, { story } = storyObject;
      story && (import_client_logger4.logger.debug("deprecated story", story), deprecatedStoryAnnotationWarning());
      let exportName = (0, import_csf.storyNameFromExport)(key2), name2 = typeof storyObject != "function" && storyObject.name || storyObject.storyName || (story == null ? void 0 : story.name) || exportName, decorators = [...normalizeArrays(storyObject.decorators), ...normalizeArrays(story == null ? void 0 : story.decorators)], parameters = { ...story == null ? void 0 : story.parameters, ...storyObject.parameters }, args2 = { ...story == null ? void 0 : story.args, ...storyObject.args }, argTypes = { ...story == null ? void 0 : story.argTypes, ...storyObject.argTypes }, loaders = [...normalizeArrays(storyObject.loaders), ...normalizeArrays(story == null ? void 0 : story.loaders)], beforeEach = [...normalizeArrays(storyObject.beforeEach), ...normalizeArrays(story == null ? void 0 : story.beforeEach)], { render, play, tags = [] } = storyObject, id = parameters.__id || (0, import_csf.toId)(meta2.id, exportName);
      return { moduleExport: storyAnnotations, id, name: name2, tags, decorators, parameters, args: args2, argTypes: normalizeInputTypes(argTypes), loaders, beforeEach, ...render && { render }, ...userStoryFn && { userStoryFn }, ...play && { play } };
    }
    var import_csf3 = require_dist6();
    var import_client_logger5 = require_dist3();
    var import_csf2 = require_dist6();
    function normalizeComponentAnnotations(defaultExport, title = defaultExport.title, importPath) {
      let { id, argTypes } = defaultExport;
      return { id: (0, import_csf2.sanitize)(id || title), ...defaultExport, title, ...argTypes && { argTypes: normalizeInputTypes(argTypes) }, parameters: { fileName: importPath, ...defaultExport.parameters } };
    }
    var checkGlobals = (parameters) => {
      let { globals, globalTypes } = parameters;
      (globals || globalTypes) && import_client_logger5.logger.error("Global args/argTypes can only be set globally", JSON.stringify({ globals, globalTypes }));
    };
    var checkStorySort = (parameters) => {
      let { options: options2 } = parameters;
      (options2 == null ? void 0 : options2.storySort) && import_client_logger5.logger.error("The storySort option parameter can only be set globally");
    };
    var checkDisallowedParameters = (parameters) => {
      parameters && (checkGlobals(parameters), checkStorySort(parameters));
    };
    function processCSFFile(moduleExports, importPath, title) {
      let { default: defaultExport, __namedExportsOrder, ...namedExports } = moduleExports, meta2 = normalizeComponentAnnotations(defaultExport, title, importPath);
      checkDisallowedParameters(meta2.parameters);
      let csfFile = { meta: meta2, stories: {}, moduleExports };
      return Object.keys(namedExports).forEach((key2) => {
        if ((0, import_csf3.isExportStory)(key2, meta2)) {
          let storyMeta = normalizeStory(key2, namedExports[key2], meta2);
          checkDisallowedParameters(storyMeta.parameters), csfFile.stories[storyMeta.id] = storyMeta;
        }
      }), csfFile;
    }
    var import_global3 = require_dist();
    var import_csf4 = require_dist6();
    var import_global4 = require_dist();
    var import_isPlainObject2 = __toESM3(require_isPlainObject());
    var combineParameters = (...parameterSets) => {
      let mergeKeys = {}, definedParametersSets = parameterSets.filter(Boolean), combined = definedParametersSets.reduce((acc, parameters) => (Object.entries(parameters).forEach(([key2, value2]) => {
        let existing = acc[key2];
        Array.isArray(value2) || typeof existing > "u" ? acc[key2] = value2 : (0, import_isPlainObject2.default)(value2) && (0, import_isPlainObject2.default)(existing) ? mergeKeys[key2] = true : typeof value2 < "u" && (acc[key2] = value2);
      }), acc), {});
      return Object.keys(mergeKeys).forEach((key2) => {
        let mergeValues = definedParametersSets.filter(Boolean).map((p) => p[key2]).filter((value2) => typeof value2 < "u");
        mergeValues.every((value2) => (0, import_isPlainObject2.default)(value2)) ? combined[key2] = combineParameters(...mergeValues) : combined[key2] = mergeValues[mergeValues.length - 1];
      }), combined;
    };
    function decorateStory(storyFn, decorator, bindWithContext) {
      let boundStoryFunction = bindWithContext(storyFn);
      return (context) => decorator(boundStoryFunction, context);
    }
    function sanitizeStoryContextUpdate({ componentId, title, kind, id, name: name2, story, parameters, initialArgs, argTypes, ...update } = {}) {
      return update;
    }
    function defaultDecorateStory(storyFn, decorators) {
      let contextStore = {}, bindWithContext = (decoratedStoryFn) => (update) => {
        if (!contextStore.value)
          throw new Error("Decorated function called without init");
        return contextStore.value = { ...contextStore.value, ...sanitizeStoryContextUpdate(update) }, decoratedStoryFn(contextStore.value);
      }, decoratedWithContextStore = decorators.reduce((story, decorator) => decorateStory(story, decorator, bindWithContext), storyFn);
      return (context) => (contextStore.value = context, decoratedWithContextStore(context));
    }
    function prepareStory(storyAnnotations, componentAnnotations, projectAnnotations) {
      let { moduleExport, id, name: name2 } = storyAnnotations || {}, partialAnnotations = preparePartialAnnotations(storyAnnotations, componentAnnotations, projectAnnotations), applyLoaders = async (context) => {
        let updatedContext = { ...context, loaded: {} };
        for (let loaders of [..."__STORYBOOK_TEST_LOADERS__" in import_global3.global && Array.isArray(import_global3.global.__STORYBOOK_TEST_LOADERS__) ? [import_global3.global.__STORYBOOK_TEST_LOADERS__] : [], normalizeArrays(projectAnnotations.loaders), normalizeArrays(componentAnnotations.loaders), normalizeArrays(storyAnnotations.loaders)]) {
          let loadResults = await Promise.all(loaders.map((loader) => loader(updatedContext))), loaded = Object.assign({}, ...loadResults);
          updatedContext = { ...updatedContext, loaded: { ...updatedContext.loaded, ...loaded } };
        }
        return updatedContext;
      }, applyBeforeEach = async (context) => {
        let cleanupCallbacks = new Array();
        for (let beforeEach of [...normalizeArrays(projectAnnotations.beforeEach), ...normalizeArrays(componentAnnotations.beforeEach), ...normalizeArrays(storyAnnotations.beforeEach)]) {
          let cleanup = await beforeEach(context);
          cleanup && cleanupCallbacks.push(cleanup);
        }
        return cleanupCallbacks;
      }, undecoratedStoryFn = (context) => render(context.args, context), { applyDecorators = defaultDecorateStory, runStep } = projectAnnotations, decorators = [...normalizeArrays(storyAnnotations == null ? void 0 : storyAnnotations.decorators), ...normalizeArrays(componentAnnotations == null ? void 0 : componentAnnotations.decorators), ...normalizeArrays(projectAnnotations == null ? void 0 : projectAnnotations.decorators)], render = (storyAnnotations == null ? void 0 : storyAnnotations.userStoryFn) || (storyAnnotations == null ? void 0 : storyAnnotations.render) || componentAnnotations.render || projectAnnotations.render;
      if (!render)
        throw new Error(`No render function available for storyId '${id}'`);
      let decoratedStoryFn = applyHooks(applyDecorators)(undecoratedStoryFn, decorators), unboundStoryFn = (context) => decoratedStoryFn(context), play = (storyAnnotations == null ? void 0 : storyAnnotations.play) || componentAnnotations.play;
      return { ...partialAnnotations, moduleExport, id, name: name2, story: name2, originalStoryFn: render, undecoratedStoryFn, unboundStoryFn, applyLoaders, applyBeforeEach, playFunction: play && (async (storyContext) => {
        let playFunctionContext = { ...storyContext, step: (label, play2) => runStep(label, play2, playFunctionContext) };
        return play(playFunctionContext);
      }) };
    }
    function prepareMeta(componentAnnotations, projectAnnotations, moduleExport) {
      return { ...preparePartialAnnotations(void 0, componentAnnotations, projectAnnotations), moduleExport };
    }
    function preparePartialAnnotations(storyAnnotations, componentAnnotations, projectAnnotations) {
      var _a;
      let defaultTags = ["dev", "test"], extraTags = ((_a = import_global4.global.DOCS_OPTIONS) == null ? void 0 : _a.autodocs) === true ? ["autodocs"] : [], tags = (0, import_csf4.combineTags)(...defaultTags, ...extraTags, ...projectAnnotations.tags ?? [], ...componentAnnotations.tags ?? [], ...(storyAnnotations == null ? void 0 : storyAnnotations.tags) ?? []), parameters = combineParameters(projectAnnotations.parameters, componentAnnotations.parameters, storyAnnotations == null ? void 0 : storyAnnotations.parameters), { argTypesEnhancers = [], argsEnhancers = [] } = projectAnnotations, passedArgTypes = combineParameters(projectAnnotations.argTypes, componentAnnotations.argTypes, storyAnnotations == null ? void 0 : storyAnnotations.argTypes);
      if (storyAnnotations) {
        let render = (storyAnnotations == null ? void 0 : storyAnnotations.userStoryFn) || (storyAnnotations == null ? void 0 : storyAnnotations.render) || componentAnnotations.render || projectAnnotations.render;
        parameters.__isArgsStory = render && render.length > 0;
      }
      let passedArgs = { ...projectAnnotations.args, ...componentAnnotations.args, ...storyAnnotations == null ? void 0 : storyAnnotations.args }, contextForEnhancers = { componentId: componentAnnotations.id, title: componentAnnotations.title, kind: componentAnnotations.title, id: (storyAnnotations == null ? void 0 : storyAnnotations.id) || componentAnnotations.id, name: (storyAnnotations == null ? void 0 : storyAnnotations.name) || "__meta", story: (storyAnnotations == null ? void 0 : storyAnnotations.name) || "__meta", component: componentAnnotations.component, subcomponents: componentAnnotations.subcomponents, tags, parameters, initialArgs: passedArgs, argTypes: passedArgTypes };
      contextForEnhancers.argTypes = argTypesEnhancers.reduce((accumulatedArgTypes, enhancer) => enhancer({ ...contextForEnhancers, argTypes: accumulatedArgTypes }), contextForEnhancers.argTypes);
      let initialArgsBeforeEnhancers = { ...passedArgs };
      contextForEnhancers.initialArgs = argsEnhancers.reduce((accumulatedArgs, enhancer) => ({ ...accumulatedArgs, ...enhancer({ ...contextForEnhancers, initialArgs: accumulatedArgs }) }), initialArgsBeforeEnhancers);
      let { name: name2, story, ...withoutStoryIdentifiers } = contextForEnhancers;
      return withoutStoryIdentifiers;
    }
    function prepareContext(context) {
      var _a;
      let { args: unmappedArgs } = context, targetedContext = { ...context, allArgs: void 0, argsByTarget: void 0 };
      if ((_a = import_global3.global.FEATURES) == null ? void 0 : _a.argTypeTargetsV7) {
        let argsByTarget = groupArgsByTarget(context);
        targetedContext = { ...context, allArgs: context.args, argsByTarget, args: argsByTarget[UNTARGETED] || {} };
      }
      let mappedArgs = Object.entries(targetedContext.args).reduce((acc, [key2, val]) => {
        var _a2;
        if (!((_a2 = targetedContext.argTypes[key2]) == null ? void 0 : _a2.mapping))
          return acc[key2] = val, acc;
        let mappingFn = (originalValue) => {
          let mapping = targetedContext.argTypes[key2].mapping;
          return mapping && originalValue in mapping ? mapping[originalValue] : originalValue;
        };
        return acc[key2] = Array.isArray(val) ? val.map(mappingFn) : mappingFn(val), acc;
      }, {}), includedArgs = Object.entries(mappedArgs).reduce((acc, [key2, val]) => {
        let argType = targetedContext.argTypes[key2] || {};
        return (0, import_csf4.includeConditionalArg)(argType, mappedArgs, targetedContext.globals) && (acc[key2] = val), acc;
      }, {});
      return { ...targetedContext, unmappedArgs, args: includedArgs };
    }
    var import_mapValues2 = __toESM3(require_mapValues());
    var import_ts_dedent3 = (init_esm(), __toCommonJS(esm_exports));
    var import_client_logger6 = require_dist3();
    var inferType = (value2, name2, visited) => {
      let type = typeof value2;
      switch (type) {
        case "boolean":
        case "string":
        case "number":
        case "function":
        case "symbol":
          return { name: type };
        default:
          break;
      }
      return value2 ? visited.has(value2) ? (import_client_logger6.logger.warn(import_ts_dedent3.dedent`
        We've detected a cycle in arg '${name2}'. Args should be JSON-serializable.

        Consider using the mapping feature or fully custom args:
        - Mapping: https://storybook.js.org/docs/react/writing-stories/args#mapping-to-complex-arg-values
        - Custom args: https://storybook.js.org/docs/react/essentials/controls#fully-custom-args
      `), { name: "other", value: "cyclic object" }) : (visited.add(value2), Array.isArray(value2) ? { name: "array", value: value2.length > 0 ? inferType(value2[0], name2, new Set(visited)) : { name: "other", value: "unknown" } } : { name: "object", value: (0, import_mapValues2.default)(value2, (field) => inferType(field, name2, new Set(visited))) }) : { name: "object", value: {} };
    };
    var inferArgTypes = (context) => {
      let { id, argTypes: userArgTypes = {}, initialArgs = {} } = context, argTypes = (0, import_mapValues2.default)(initialArgs, (arg, key2) => ({ name: key2, type: inferType(arg, `${id}.${key2}`, /* @__PURE__ */ new Set()) })), userArgTypesNames = (0, import_mapValues2.default)(userArgTypes, (argType, key2) => ({ name: key2 }));
      return combineParameters(argTypes, userArgTypesNames, userArgTypes);
    };
    inferArgTypes.secondPass = true;
    var import_mapValues3 = __toESM3(require_mapValues());
    var import_client_logger7 = require_dist3();
    var import_pickBy = __toESM3(require_pickBy());
    var matches = (name2, descriptor) => Array.isArray(descriptor) ? descriptor.includes(name2) : name2.match(descriptor);
    var filterArgTypes = (argTypes, include, exclude) => !include && !exclude ? argTypes : argTypes && (0, import_pickBy.default)(argTypes, (argType, key2) => {
      let name2 = argType.name || key2;
      return (!include || matches(name2, include)) && (!exclude || !matches(name2, exclude));
    });
    var inferControl = (argType, name2, matchers) => {
      let { type, options: options2 } = argType;
      if (type) {
        if (matchers.color && matchers.color.test(name2)) {
          let controlType = type.name;
          if (controlType === "string")
            return { control: { type: "color" } };
          controlType !== "enum" && import_client_logger7.logger.warn(`Addon controls: Control of type color only supports string, received "${controlType}" instead`);
        }
        if (matchers.date && matchers.date.test(name2))
          return { control: { type: "date" } };
        switch (type.name) {
          case "array":
            return { control: { type: "object" } };
          case "boolean":
            return { control: { type: "boolean" } };
          case "string":
            return { control: { type: "text" } };
          case "number":
            return { control: { type: "number" } };
          case "enum": {
            let { value: value2 } = type;
            return { control: { type: (value2 == null ? void 0 : value2.length) <= 5 ? "radio" : "select" }, options: value2 };
          }
          case "function":
          case "symbol":
            return null;
          default:
            return { control: { type: options2 ? "select" : "object" } };
        }
      }
    };
    var inferControls = (context) => {
      let { argTypes, parameters: { __isArgsStory, controls: { include = null, exclude = null, matchers = {} } = {} } } = context;
      if (!__isArgsStory)
        return argTypes;
      let filteredArgTypes = filterArgTypes(argTypes, include, exclude), withControls = (0, import_mapValues3.default)(filteredArgTypes, (argType, name2) => (argType == null ? void 0 : argType.type) && inferControl(argType, name2, matchers));
      return combineParameters(withControls, filteredArgTypes);
    };
    inferControls.secondPass = true;
    function normalizeProjectAnnotations({ argTypes, globalTypes, argTypesEnhancers, decorators, loaders, beforeEach, ...annotations }) {
      return { ...argTypes && { argTypes: normalizeInputTypes(argTypes) }, ...globalTypes && { globalTypes: normalizeInputTypes(globalTypes) }, decorators: normalizeArrays(decorators), loaders: normalizeArrays(loaders), beforeEach: normalizeArrays(beforeEach), argTypesEnhancers: [...argTypesEnhancers || [], inferArgTypes, inferControls], ...annotations };
    }
    var import_global5 = require_dist();
    function composeStepRunners(stepRunners) {
      return async (label, play, playContext) => {
        await stepRunners.reduceRight((innerPlay, stepRunner) => async () => stepRunner(label, innerPlay, playContext), async () => play(playContext))();
      };
    }
    function getField(moduleExportList, field) {
      return moduleExportList.map((xs) => {
        var _a;
        return ((_a = xs.default) == null ? void 0 : _a[field]) ?? xs[field];
      }).filter(Boolean);
    }
    function getArrayField(moduleExportList, field, options2 = {}) {
      return getField(moduleExportList, field).reduce((prev, cur) => {
        let normalized = normalizeArrays(cur);
        return options2.reverseFileOrder ? [...normalized, ...prev] : [...prev, ...normalized];
      }, []);
    }
    function getObjectField(moduleExportList, field) {
      return Object.assign({}, ...getField(moduleExportList, field));
    }
    function getSingletonField(moduleExportList, field) {
      return getField(moduleExportList, field).pop();
    }
    function composeConfigs(moduleExportList) {
      var _a;
      let allArgTypeEnhancers = getArrayField(moduleExportList, "argTypesEnhancers"), stepRunners = getField(moduleExportList, "runStep");
      return { parameters: combineParameters(...getField(moduleExportList, "parameters")), decorators: getArrayField(moduleExportList, "decorators", { reverseFileOrder: !(((_a = import_global5.global.FEATURES) == null ? void 0 : _a.legacyDecoratorFileOrder) ?? false) }), args: getObjectField(moduleExportList, "args"), argsEnhancers: getArrayField(moduleExportList, "argsEnhancers"), argTypes: getObjectField(moduleExportList, "argTypes"), argTypesEnhancers: [...allArgTypeEnhancers.filter((e) => !e.secondPass), ...allArgTypeEnhancers.filter((e) => e.secondPass)], globals: getObjectField(moduleExportList, "globals"), globalTypes: getObjectField(moduleExportList, "globalTypes"), loaders: getArrayField(moduleExportList, "loaders"), beforeEach: getArrayField(moduleExportList, "beforeEach"), render: getSingletonField(moduleExportList, "render"), renderToCanvas: getSingletonField(moduleExportList, "renderToCanvas"), renderToDOM: getSingletonField(moduleExportList, "renderToDOM"), applyDecorators: getSingletonField(moduleExportList, "applyDecorators"), runStep: composeStepRunners(stepRunners), tags: getArrayField(moduleExportList, "tags") };
    }
    var import_csf5 = require_dist6();
    var import_ts_dedent4 = __toESM3((init_esm(), __toCommonJS(esm_exports)));
    var globalProjectAnnotations = {};
    var DEFAULT_STORY_TITLE = "ComposedStory";
    var DEFAULT_STORY_NAME = "Unnamed Story";
    function extractAnnotation(annotation) {
      return "default" in annotation ? annotation.default : annotation;
    }
    function setProjectAnnotations(projectAnnotations) {
      let annotations = Array.isArray(projectAnnotations) ? projectAnnotations : [projectAnnotations];
      globalProjectAnnotations = composeConfigs(annotations.map(extractAnnotation));
    }
    var cleanups = [];
    function composeStory(storyAnnotations, componentAnnotations, projectAnnotations, defaultConfig, exportsName) {
      var _a;
      if (storyAnnotations === void 0)
        throw new Error("Expected a story but received undefined.");
      componentAnnotations.title = componentAnnotations.title ?? DEFAULT_STORY_TITLE;
      let normalizedComponentAnnotations = normalizeComponentAnnotations(componentAnnotations), storyName = exportsName || storyAnnotations.storyName || ((_a = storyAnnotations.story) == null ? void 0 : _a.name) || storyAnnotations.name || DEFAULT_STORY_NAME, normalizedStory = normalizeStory(storyName, storyAnnotations, normalizedComponentAnnotations), normalizedProjectAnnotations = normalizeProjectAnnotations(composeConfigs([defaultConfig ?? {}, globalProjectAnnotations, projectAnnotations ?? {}])), story = prepareStory(normalizedStory, normalizedComponentAnnotations, normalizedProjectAnnotations), globalsFromGlobalTypes = getValuesFromArgTypes(normalizedProjectAnnotations.globalTypes), context = { hooks: new HooksContext(), globals: { ...globalsFromGlobalTypes, ...normalizedProjectAnnotations.globals }, args: { ...story.initialArgs }, viewMode: "story", loaded: {}, abortSignal: null, canvasElement: null, ...story }, playFunction = story.playFunction ? async (extraContext) => {
        var _a2;
        return story.playFunction({ ...context, ...extraContext, canvasElement: (extraContext == null ? void 0 : extraContext.canvasElement) ?? ((_a2 = globalThis.document) == null ? void 0 : _a2.body) });
      } : void 0, previousCleanupsDone = false;
      return Object.assign(function(extraArgs) {
        if (context.args = { ...context.initialArgs, ...extraArgs }, cleanups.length > 0 && !previousCleanupsDone) {
          let humanReadableIdentifier = storyName;
          story.title !== DEFAULT_STORY_TITLE && (humanReadableIdentifier = `${story.title} - ${humanReadableIdentifier}`), storyName === DEFAULT_STORY_NAME && Object.keys(context.args).length > 0 && (humanReadableIdentifier = `${humanReadableIdentifier} (${Object.keys(context.args).join(", ")})`), console.warn(import_ts_dedent4.default`Some stories were not cleaned up before rendering '${humanReadableIdentifier}'.
          
          You should load the story with \`await Story.load()\` before rendering it.`);
        }
        return story.unboundStoryFn(prepareContext(context));
      }, { id: story.id, storyName, load: async () => {
        for (let { callback } of [...cleanups].reverse())
          await callback();
        cleanups.length = 0, previousCleanupsDone = true;
        let loadedContext = await story.applyLoaders(context);
        context.loaded = loadedContext.loaded, cleanups.push(...(await story.applyBeforeEach(context)).filter(Boolean).map((callback) => ({ storyName, callback })));
      }, args: story.initialArgs, parameters: story.parameters, argTypes: story.argTypes, play: playFunction });
    }
    function composeStories(storiesImport, globalConfig, composeStoryFn) {
      let { default: meta2, __esModule, __namedExportsOrder, ...stories } = storiesImport;
      return Object.entries(stories).reduce((storiesMap, [exportsName, story]) => (0, import_csf5.isExportStory)(exportsName, meta2) ? Object.assign(storiesMap, { [exportsName]: composeStoryFn(story, meta2, globalConfig, exportsName) }) : storiesMap, {});
    }
    function createPlaywrightTest(baseTest) {
      return baseTest.extend({ mount: async ({ mount, page }, use) => {
        await use(async (storyRef, ...restArgs) => {
          if (!("__pw_type" in storyRef) || "__pw_type" in storyRef && storyRef.__pw_type !== "jsx")
            throw new Error(import_ts_dedent4.default`
              Portable stories in Playwright CT only work when referencing JSX elements.
              Please use JSX format for your components such as:
              
              instead of:
              await mount(MyComponent, { props: { foo: 'bar' } })
              
              do:
              await mount(<MyComponent foo="bar"/>)

              More info: https://storybook.js.org/docs/api/portable-stories-playwright
            `);
          await page.evaluate(async (wrappedStoryRef) => {
            var _a, _b, _c;
            let unwrappedStoryRef = await ((_a = globalThis.__pwUnwrapObject) == null ? void 0 : _a.call(globalThis, wrappedStoryRef));
            return (_c = (_b = "__pw_type" in unwrappedStoryRef ? unwrappedStoryRef.type : unwrappedStoryRef) == null ? void 0 : _b.load) == null ? void 0 : _c.call(_b);
          }, storyRef);
          let mountResult = await mount(storyRef, ...restArgs);
          return await page.evaluate(async (wrappedStoryRef) => {
            var _a, _b;
            let unwrappedStoryRef = await ((_a = globalThis.__pwUnwrapObject) == null ? void 0 : _a.call(globalThis, wrappedStoryRef)), story = "__pw_type" in unwrappedStoryRef ? unwrappedStoryRef.type : unwrappedStoryRef, canvasElement = document.querySelector("#root");
            return (_b = story == null ? void 0 : story.play) == null ? void 0 : _b.call(story, { canvasElement });
          }, storyRef), mountResult;
        });
      } });
    }
    var CSF_CACHE_SIZE = 1e3;
    var STORY_CACHE_SIZE = 1e4;
    var StoryStore = class {
      constructor(storyIndex, importFn, projectAnnotations) {
        this.importFn = importFn;
        this.getStoriesJsonData = () => {
          let value2 = this.getSetStoriesPayload(), allowedParameters = ["fileName", "docsOnly", "framework", "__id", "__isArgsStory"];
          return { v: 3, stories: (0, import_mapValues4.default)(value2.stories, (story) => {
            let { importPath } = this.storyIndex.entries[story.id];
            return { ...(0, import_pick.default)(story, ["id", "name", "title"]), importPath, kind: story.title, story: story.name, parameters: { ...(0, import_pick.default)(story.parameters, allowedParameters), fileName: importPath } };
          }) };
        };
        this.storyIndex = new StoryIndexStore(storyIndex), this.projectAnnotations = normalizeProjectAnnotations(projectAnnotations);
        let { globals, globalTypes } = projectAnnotations;
        this.args = new ArgsStore(), this.globals = new GlobalsStore({ globals, globalTypes }), this.hooks = {}, this.cleanupCallbacks = {}, this.processCSFFileWithCache = (0, import_memoizerific2.default)(CSF_CACHE_SIZE)(processCSFFile), this.prepareMetaWithCache = (0, import_memoizerific2.default)(CSF_CACHE_SIZE)(prepareMeta), this.prepareStoryWithCache = (0, import_memoizerific2.default)(STORY_CACHE_SIZE)(prepareStory);
      }
      setProjectAnnotations(projectAnnotations) {
        this.projectAnnotations = normalizeProjectAnnotations(projectAnnotations);
        let { globals, globalTypes } = projectAnnotations;
        this.globals.set({ globals, globalTypes });
      }
      async onStoriesChanged({ importFn, storyIndex }) {
        importFn && (this.importFn = importFn), storyIndex && (this.storyIndex.entries = storyIndex.entries), this.cachedCSFFiles && await this.cacheAllCSFFiles();
      }
      async storyIdToEntry(storyId) {
        return this.storyIndex.storyIdToEntry(storyId);
      }
      async loadCSFFileByStoryId(storyId) {
        let { importPath, title } = this.storyIndex.storyIdToEntry(storyId), moduleExports = await this.importFn(importPath);
        return this.processCSFFileWithCache(moduleExports, importPath, title);
      }
      async loadAllCSFFiles() {
        let importPaths = {};
        return Object.entries(this.storyIndex.entries).forEach(([storyId, { importPath }]) => {
          importPaths[importPath] = storyId;
        }), (await Promise.all(Object.entries(importPaths).map(async ([importPath, storyId]) => ({ importPath, csfFile: await this.loadCSFFileByStoryId(storyId) })))).reduce((acc, { importPath, csfFile }) => (acc[importPath] = csfFile, acc), {});
      }
      async cacheAllCSFFiles() {
        this.cachedCSFFiles = await this.loadAllCSFFiles();
      }
      preparedMetaFromCSFFile({ csfFile }) {
        let componentAnnotations = csfFile.meta;
        return this.prepareMetaWithCache(componentAnnotations, this.projectAnnotations, csfFile.moduleExports.default);
      }
      async loadStory({ storyId }) {
        let csfFile = await this.loadCSFFileByStoryId(storyId);
        return this.storyFromCSFFile({ storyId, csfFile });
      }
      storyFromCSFFile({ storyId, csfFile }) {
        let storyAnnotations = csfFile.stories[storyId];
        if (!storyAnnotations)
          throw new import_preview_errors2.MissingStoryFromCsfFileError({ storyId });
        let componentAnnotations = csfFile.meta, story = this.prepareStoryWithCache(storyAnnotations, componentAnnotations, this.projectAnnotations);
        return this.args.setInitial(story), this.hooks[story.id] = this.hooks[story.id] || new HooksContext(), story;
      }
      componentStoriesFromCSFFile({ csfFile }) {
        return Object.keys(this.storyIndex.entries).filter((storyId) => !!csfFile.stories[storyId]).map((storyId) => this.storyFromCSFFile({ storyId, csfFile }));
      }
      async loadEntry(id) {
        let entry = await this.storyIdToEntry(id), storyImports = entry.type === "docs" ? entry.storiesImports : [], [entryExports, ...csfFiles] = await Promise.all([this.importFn(entry.importPath), ...storyImports.map((storyImportPath) => {
          let firstStoryEntry = this.storyIndex.importPathToEntry(storyImportPath);
          return this.loadCSFFileByStoryId(firstStoryEntry.id);
        })]);
        return { entryExports, csfFiles };
      }
      getStoryContext(story, { forceInitialArgs = false } = {}) {
        return prepareContext({ ...story, args: forceInitialArgs ? story.initialArgs : this.args.get(story.id), globals: this.globals.get(), hooks: this.hooks[story.id] });
      }
      addCleanupCallbacks(story, callbacks) {
        this.cleanupCallbacks[story.id] = callbacks;
      }
      async cleanupStory(story) {
        this.hooks[story.id].clean();
        let callbacks = this.cleanupCallbacks[story.id];
        if (callbacks)
          for (let callback of [...callbacks].reverse())
            await callback();
        delete this.cleanupCallbacks[story.id];
      }
      extract(options2 = { includeDocsOnly: false }) {
        let { cachedCSFFiles } = this;
        if (!cachedCSFFiles)
          throw new import_preview_errors2.CalledExtractOnStoreError();
        return Object.entries(this.storyIndex.entries).reduce((acc, [storyId, { type, importPath }]) => {
          if (type === "docs")
            return acc;
          let csfFile = cachedCSFFiles[importPath], story = this.storyFromCSFFile({ storyId, csfFile });
          return !options2.includeDocsOnly && story.parameters.docsOnly || (acc[storyId] = Object.entries(story).reduce((storyAcc, [key2, value2]) => key2 === "moduleExport" || typeof value2 == "function" ? storyAcc : Array.isArray(value2) ? Object.assign(storyAcc, { [key2]: value2.slice().sort() }) : Object.assign(storyAcc, { [key2]: value2 }), { args: story.initialArgs })), acc;
        }, {});
      }
      getSetStoriesPayload() {
        let stories = this.extract({ includeDocsOnly: true }), kindParameters = Object.values(stories).reduce((acc, { title }) => (acc[title] = {}, acc), {});
        return { v: 2, globals: this.globals.get(), globalParameters: {}, kindParameters, stories };
      }
      raw() {
        return (0, import_client_logger8.deprecate)("StoryStore.raw() is deprecated and will be removed in 9.0, please use extract() instead"), Object.values(this.extract()).map(({ id }) => this.fromId(id)).filter(Boolean);
      }
      fromId(storyId) {
        if ((0, import_client_logger8.deprecate)("StoryStore.fromId() is deprecated and will be removed in 9.0, please use loadStory() instead"), !this.cachedCSFFiles)
          throw new Error("Cannot call fromId/raw() unless you call cacheAllCSFFiles() first.");
        let importPath;
        try {
          ({ importPath } = this.storyIndex.storyIdToEntry(storyId));
        } catch {
          return null;
        }
        let csfFile = this.cachedCSFFiles[importPath], story = this.storyFromCSFFile({ storyId, csfFile });
        return { ...story, storyFn: (update) => {
          let context = { ...this.getStoryContext(story), viewMode: "story" };
          return story.unboundStoryFn({ ...context, ...update });
        } };
      }
    };
    function slash(path) {
      return path.startsWith("\\\\?\\") ? path : path.replace(/\\/g, "/");
    }
    var import_ts_dedent5 = (init_esm(), __toCommonJS(esm_exports));
    var import_client_logger9 = require_dist3();
    var sanitize2 = (parts) => {
      if (parts.length === 0)
        return parts;
      let last = parts[parts.length - 1], lastStripped = last == null ? void 0 : last.replace(/(?:[.](?:story|stories))?([.][^.]+)$/i, "");
      if (parts.length === 1)
        return [lastStripped];
      let nextToLast = parts[parts.length - 2];
      return lastStripped && nextToLast && lastStripped.toLowerCase() === nextToLast.toLowerCase() ? [...parts.slice(0, -2), lastStripped] : lastStripped && (/^(story|stories)([.][^.]+)$/i.test(last) || /^index$/i.test(lastStripped)) ? parts.slice(0, -1) : [...parts.slice(0, -1), lastStripped];
    };
    function pathJoin(paths) {
      return paths.flatMap((p) => p.split("/")).filter(Boolean).join("/");
    }
    var userOrAutoTitleFromSpecifier = (fileName, entry, userTitle) => {
      let { directory, importPathMatcher, titlePrefix = "" } = entry || {};
      typeof fileName == "number" && import_client_logger9.once.warn(import_ts_dedent5.dedent`
      CSF Auto-title received a numeric fileName. This typically happens when
      webpack is mis-configured in production mode. To force webpack to produce
      filenames, set optimization.moduleIds = "named" in your webpack config.
    `);
      let normalizedFileName = slash(String(fileName));
      if (importPathMatcher.exec(normalizedFileName)) {
        if (!userTitle) {
          let suffix = normalizedFileName.replace(directory, ""), parts = pathJoin([titlePrefix, suffix]).split("/");
          return parts = sanitize2(parts), parts.join("/");
        }
        return titlePrefix ? pathJoin([titlePrefix, userTitle]) : userTitle;
      }
    };
    var userOrAutoTitle = (fileName, storiesEntries, userTitle) => {
      for (let i = 0; i < storiesEntries.length; i += 1) {
        let title = userOrAutoTitleFromSpecifier(fileName, storiesEntries[i], userTitle);
        if (title)
          return title;
      }
      return userTitle || void 0;
    };
    var import_ts_dedent6 = (init_esm(), __toCommonJS(esm_exports));
    var STORY_KIND_PATH_SEPARATOR = /\s*\/\s*/;
    var storySort = (options2 = {}) => (a, b) => {
      if (a.title === b.title && !options2.includeNames)
        return 0;
      let method = options2.method || "configure", order = options2.order || [], storyTitleA = a.title.trim().split(STORY_KIND_PATH_SEPARATOR), storyTitleB = b.title.trim().split(STORY_KIND_PATH_SEPARATOR);
      options2.includeNames && (storyTitleA.push(a.name), storyTitleB.push(b.name));
      let depth = 0;
      for (; storyTitleA[depth] || storyTitleB[depth]; ) {
        if (!storyTitleA[depth])
          return -1;
        if (!storyTitleB[depth])
          return 1;
        let nameA = storyTitleA[depth], nameB = storyTitleB[depth];
        if (nameA !== nameB) {
          let indexA = order.indexOf(nameA), indexB = order.indexOf(nameB), indexWildcard = order.indexOf("*");
          return indexA !== -1 || indexB !== -1 ? (indexA === -1 && (indexWildcard !== -1 ? indexA = indexWildcard : indexA = order.length), indexB === -1 && (indexWildcard !== -1 ? indexB = indexWildcard : indexB = order.length), indexA - indexB) : method === "configure" ? 0 : nameA.localeCompare(nameB, options2.locales ? options2.locales : void 0, { numeric: true, sensitivity: "accent" });
        }
        let index = order.indexOf(nameA);
        index === -1 && (index = order.indexOf("*")), order = index !== -1 && Array.isArray(order[index + 1]) ? order[index + 1] : [], depth += 1;
      }
      return 0;
    };
    var sortStoriesCommon = (stories, storySortParameter, fileNameOrder) => {
      if (storySortParameter) {
        let sortFn;
        typeof storySortParameter == "function" ? sortFn = storySortParameter : sortFn = storySort(storySortParameter), stories.sort(sortFn);
      } else
        stories.sort((s1, s2) => fileNameOrder.indexOf(s1.importPath) - fileNameOrder.indexOf(s2.importPath));
      return stories;
    };
    var sortStoriesV7 = (stories, storySortParameter, fileNameOrder) => {
      try {
        return sortStoriesCommon(stories, storySortParameter, fileNameOrder);
      } catch (err) {
        throw new Error(import_ts_dedent6.dedent`
    Error sorting stories with sort parameter ${storySortParameter}:

    > ${err.message}
    
    Are you using a V6-style sort function in V7 mode?

    More info: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#v7-style-story-sort
  `);
      }
    };
    var import_global6 = require_dist();
    var import_client_logger10 = require_dist3();
    var import_core_events3 = require_dist2();
    var import_preview_errors3 = require_preview_errors();
    var import_core_events2 = require_dist2();
    var PREPARE_ABORTED = new Error("prepareAborted");
    var { AbortController } = globalThis;
    function serializeError(error) {
      try {
        let { name: name2 = "Error", message = String(error), stack } = error;
        return { name: name2, message, stack };
      } catch {
        return { name: "Error", message: String(error) };
      }
    }
    var StoryRender = class {
      constructor(channel, store, renderToScreen, callbacks, id, viewMode, renderOptions = { autoplay: true, forceInitialArgs: false }, story) {
        this.channel = channel;
        this.store = store;
        this.renderToScreen = renderToScreen;
        this.callbacks = callbacks;
        this.id = id;
        this.viewMode = viewMode;
        this.renderOptions = renderOptions;
        this.type = "story";
        this.notYetRendered = true;
        this.rerenderEnqueued = false;
        this.disableKeyListeners = false;
        this.teardownRender = () => {
        };
        this.torndown = false;
        this.abortController = new AbortController(), story && (this.story = story, this.phase = "preparing");
      }
      async runPhase(signal, phase, phaseFn) {
        this.phase = phase, this.channel.emit(import_core_events2.STORY_RENDER_PHASE_CHANGED, { newPhase: this.phase, storyId: this.id }), phaseFn && await phaseFn(), signal.aborted && (this.phase = "aborted", this.channel.emit(import_core_events2.STORY_RENDER_PHASE_CHANGED, { newPhase: this.phase, storyId: this.id }));
      }
      async prepare() {
        if (await this.runPhase(this.abortController.signal, "preparing", async () => {
          this.story = await this.store.loadStory({ storyId: this.id });
        }), this.abortController.signal.aborted)
          throw await this.store.cleanupStory(this.story), PREPARE_ABORTED;
      }
      isEqual(other) {
        return !!(this.id === other.id && this.story && this.story === other.story);
      }
      isPreparing() {
        return ["preparing"].includes(this.phase);
      }
      isPending() {
        return ["loading", "beforeEach", "rendering", "playing"].includes(this.phase);
      }
      async renderToElement(canvasElement) {
        return this.canvasElement = canvasElement, this.render({ initial: true, forceRemount: true });
      }
      storyContext() {
        if (!this.story)
          throw new Error("Cannot call storyContext before preparing");
        let { forceInitialArgs } = this.renderOptions;
        return this.store.getStoryContext(this.story, { forceInitialArgs });
      }
      async render({ initial = false, forceRemount = false } = {}) {
        var _a, _b;
        let { canvasElement } = this;
        if (!this.story)
          throw new Error("cannot render when not prepared");
        let story = this.story;
        if (!canvasElement)
          throw new Error("cannot render when canvasElement is unset");
        let { id, componentId, title, name: name2, tags, applyLoaders, applyBeforeEach, unboundStoryFn, playFunction } = story;
        forceRemount && !initial && (this.cancelRender(), this.abortController = new AbortController());
        let abortSignal = this.abortController.signal;
        try {
          let loadedContext;
          if (await this.runPhase(abortSignal, "loading", async () => {
            loadedContext = await applyLoaders({ ...this.storyContext(), viewMode: this.viewMode, canvasElement });
          }), abortSignal.aborted)
            return;
          let renderStoryContext = { ...loadedContext, ...this.storyContext(), abortSignal, canvasElement };
          if (await this.runPhase(abortSignal, "beforeEach", async () => {
            let cleanupCallbacks = await applyBeforeEach(renderStoryContext);
            this.store.addCleanupCallbacks(story, cleanupCallbacks);
          }), abortSignal.aborted)
            return;
          let renderContext = { componentId, title, kind: title, id, name: name2, story: name2, tags, ...this.callbacks, showError: (error) => (this.phase = "errored", this.callbacks.showError(error)), showException: (error) => (this.phase = "errored", this.callbacks.showException(error)), forceRemount: forceRemount || this.notYetRendered, storyContext: renderStoryContext, storyFn: () => unboundStoryFn(renderStoryContext), unboundStoryFn };
          if (await this.runPhase(abortSignal, "rendering", async () => {
            let teardown = await this.renderToScreen(renderContext, canvasElement);
            this.teardownRender = teardown || (() => {
            });
          }), this.notYetRendered = false, abortSignal.aborted)
            return;
          let ignoreUnhandledErrors = ((_b = (_a = this.story.parameters) == null ? void 0 : _a.test) == null ? void 0 : _b.dangerouslyIgnoreUnhandledErrors) === true, unhandledErrors = /* @__PURE__ */ new Set(), onError = (event) => unhandledErrors.add("error" in event ? event.error : event.reason);
          if (this.renderOptions.autoplay && forceRemount && playFunction && this.phase !== "errored") {
            window.addEventListener("error", onError), window.addEventListener("unhandledrejection", onError), this.disableKeyListeners = true;
            try {
              await this.runPhase(abortSignal, "playing", async () => {
                await playFunction(renderContext.storyContext);
              }), !ignoreUnhandledErrors && unhandledErrors.size > 0 ? await this.runPhase(abortSignal, "errored") : await this.runPhase(abortSignal, "played");
            } catch (error) {
              if (await this.runPhase(abortSignal, "errored", async () => {
                this.channel.emit(import_core_events2.PLAY_FUNCTION_THREW_EXCEPTION, serializeError(error));
              }), this.story.parameters.throwPlayFunctionExceptions !== false)
                throw error;
              console.error(error);
            }
            if (!ignoreUnhandledErrors && unhandledErrors.size > 0 && this.channel.emit(import_core_events2.UNHANDLED_ERRORS_WHILE_PLAYING, Array.from(unhandledErrors).map(serializeError)), this.disableKeyListeners = false, window.removeEventListener("unhandledrejection", onError), window.removeEventListener("error", onError), abortSignal.aborted)
              return;
          }
          await this.runPhase(abortSignal, "completed", async () => this.channel.emit(import_core_events2.STORY_RENDERED, id));
        } catch (err) {
          this.phase = "errored", this.callbacks.showException(err);
        }
        this.rerenderEnqueued && (this.rerenderEnqueued = false, this.render());
      }
      async rerender() {
        if (this.isPending() && this.phase !== "playing")
          this.rerenderEnqueued = true;
        else
          return this.render();
      }
      async remount() {
        return await this.teardown(), this.render({ forceRemount: true });
      }
      cancelRender() {
        var _a;
        (_a = this.abortController) == null ? void 0 : _a.abort();
      }
      async teardown() {
        this.torndown = true, this.cancelRender(), this.story && await this.store.cleanupStory(this.story);
        for (let i = 0; i < 3; i += 1) {
          if (!this.isPending()) {
            await this.teardownRender();
            return;
          }
          await new Promise((resolve) => setTimeout(resolve, 0));
        }
        window.location.reload(), await new Promise(() => {
        });
      }
    };
    var { fetch } = import_global6.global;
    var STORY_INDEX_PATH = "./index.json";
    var Preview = class {
      constructor(importFn, getProjectAnnotations, channel = addons.getChannel(), shouldInitialize = true) {
        this.importFn = importFn;
        this.getProjectAnnotations = getProjectAnnotations;
        this.channel = channel;
        this.storyRenders = [];
        this.storeInitializationPromise = new Promise((resolve, reject) => {
          this.resolveStoreInitializationPromise = resolve, this.rejectStoreInitializationPromise = reject;
        }), shouldInitialize && this.initialize();
      }
      get storyStore() {
        return new Proxy({}, { get: (_, method) => {
          if (this.storyStoreValue)
            return (0, import_client_logger10.deprecate)("Accessing the Story Store is deprecated and will be removed in 9.0"), this.storyStoreValue[method];
          throw new import_preview_errors3.StoryStoreAccessedBeforeInitializationError();
        } });
      }
      async initialize() {
        this.setupListeners();
        try {
          let projectAnnotations = await this.getProjectAnnotationsOrRenderError();
          await this.initializeWithProjectAnnotations(projectAnnotations);
        } catch (err) {
          this.rejectStoreInitializationPromise(err);
        }
      }
      ready() {
        return this.storeInitializationPromise;
      }
      setupListeners() {
        this.channel.on(import_core_events3.STORY_INDEX_INVALIDATED, this.onStoryIndexChanged.bind(this)), this.channel.on(import_core_events3.UPDATE_GLOBALS, this.onUpdateGlobals.bind(this)), this.channel.on(import_core_events3.UPDATE_STORY_ARGS, this.onUpdateArgs.bind(this)), this.channel.on(import_core_events3.ARGTYPES_INFO_REQUEST, this.onRequestArgTypesInfo.bind(this)), this.channel.on(import_core_events3.RESET_STORY_ARGS, this.onResetArgs.bind(this)), this.channel.on(import_core_events3.FORCE_RE_RENDER, this.onForceReRender.bind(this)), this.channel.on(import_core_events3.FORCE_REMOUNT, this.onForceRemount.bind(this));
      }
      async getProjectAnnotationsOrRenderError() {
        try {
          let projectAnnotations = await this.getProjectAnnotations();
          if (this.renderToCanvas = projectAnnotations.renderToCanvas, !this.renderToCanvas)
            throw new import_preview_errors3.MissingRenderToCanvasError();
          return projectAnnotations;
        } catch (err) {
          throw this.renderPreviewEntryError("Error reading preview.js:", err), err;
        }
      }
      async initializeWithProjectAnnotations(projectAnnotations) {
        this.projectAnnotationsBeforeInitialization = projectAnnotations;
        try {
          let storyIndex = await this.getStoryIndexFromServer();
          return this.initializeWithStoryIndex(storyIndex);
        } catch (err) {
          throw this.renderPreviewEntryError("Error loading story index:", err), err;
        }
      }
      async getStoryIndexFromServer() {
        let result2 = await fetch(STORY_INDEX_PATH);
        if (result2.status === 200)
          return result2.json();
        throw new import_preview_errors3.StoryIndexFetchError({ text: await result2.text() });
      }
      initializeWithStoryIndex(storyIndex) {
        if (!this.projectAnnotationsBeforeInitialization)
          throw new Error("Cannot call initializeWithStoryIndex until project annotations resolve");
        this.storyStoreValue = new StoryStore(storyIndex, this.importFn, this.projectAnnotationsBeforeInitialization), delete this.projectAnnotationsBeforeInitialization, this.setInitialGlobals(), this.resolveStoreInitializationPromise();
      }
      async setInitialGlobals() {
        this.emitGlobals();
      }
      emitGlobals() {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "emitGlobals" });
        let payload = { globals: this.storyStoreValue.globals.get() || {}, globalTypes: this.storyStoreValue.projectAnnotations.globalTypes || {} };
        this.channel.emit(import_core_events3.SET_GLOBALS, payload);
      }
      async onGetProjectAnnotationsChanged({ getProjectAnnotations }) {
        delete this.previewEntryError, this.getProjectAnnotations = getProjectAnnotations;
        let projectAnnotations = await this.getProjectAnnotationsOrRenderError();
        if (!this.storyStoreValue) {
          await this.initializeWithProjectAnnotations(projectAnnotations);
          return;
        }
        this.storyStoreValue.setProjectAnnotations(projectAnnotations), this.emitGlobals();
      }
      async onStoryIndexChanged() {
        if (delete this.previewEntryError, !(!this.storyStoreValue && !this.projectAnnotationsBeforeInitialization))
          try {
            let storyIndex = await this.getStoryIndexFromServer();
            if (this.projectAnnotationsBeforeInitialization) {
              this.initializeWithStoryIndex(storyIndex);
              return;
            }
            await this.onStoriesChanged({ storyIndex });
          } catch (err) {
            throw this.renderPreviewEntryError("Error loading story index:", err), err;
          }
      }
      async onStoriesChanged({ importFn, storyIndex }) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "onStoriesChanged" });
        await this.storyStoreValue.onStoriesChanged({ importFn, storyIndex });
      }
      async onUpdateGlobals({ globals }) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "onUpdateGlobals" });
        this.storyStoreValue.globals.update(globals), await Promise.all(this.storyRenders.map((r) => r.rerender())), this.channel.emit(import_core_events3.GLOBALS_UPDATED, { globals: this.storyStoreValue.globals.get(), initialGlobals: this.storyStoreValue.globals.initialGlobals });
      }
      async onUpdateArgs({ storyId, updatedArgs }) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "onUpdateArgs" });
        this.storyStoreValue.args.update(storyId, updatedArgs), await Promise.all(this.storyRenders.filter((r) => r.id === storyId && !r.renderOptions.forceInitialArgs).map((r) => r.rerender())), this.channel.emit(import_core_events3.STORY_ARGS_UPDATED, { storyId, args: this.storyStoreValue.args.get(storyId) });
      }
      async onRequestArgTypesInfo({ id, payload }) {
        var _a;
        try {
          await this.storeInitializationPromise;
          let story = await ((_a = this.storyStoreValue) == null ? void 0 : _a.loadStory(payload));
          this.channel.emit(import_core_events3.ARGTYPES_INFO_RESPONSE, { id, success: true, payload: { argTypes: (story == null ? void 0 : story.argTypes) || {} }, error: null });
        } catch (e) {
          this.channel.emit(import_core_events3.ARGTYPES_INFO_RESPONSE, { id, success: false, error: e == null ? void 0 : e.message });
        }
      }
      async onResetArgs({ storyId, argNames }) {
        var _a;
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "onResetArgs" });
        let story = ((_a = this.storyRenders.find((r) => r.id === storyId)) == null ? void 0 : _a.story) || await this.storyStoreValue.loadStory({ storyId }), updatedArgs = (argNames || [.../* @__PURE__ */ new Set([...Object.keys(story.initialArgs), ...Object.keys(this.storyStoreValue.args.get(storyId))])]).reduce((acc, argName) => (acc[argName] = story.initialArgs[argName], acc), {});
        await this.onUpdateArgs({ storyId, updatedArgs });
      }
      async onForceReRender() {
        await Promise.all(this.storyRenders.map((r) => r.rerender()));
      }
      async onForceRemount({ storyId }) {
        await Promise.all(this.storyRenders.filter((r) => r.id === storyId).map((r) => r.remount()));
      }
      renderStoryToElement(story, element, callbacks, options2) {
        if (!this.renderToCanvas || !this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "renderStoryToElement" });
        let render = new StoryRender(this.channel, this.storyStoreValue, this.renderToCanvas, callbacks, story.id, "docs", options2, story);
        return render.renderToElement(element), this.storyRenders.push(render), async () => {
          await this.teardownRender(render);
        };
      }
      async teardownRender(render, { viewModeChanged } = {}) {
        var _a;
        this.storyRenders = this.storyRenders.filter((r) => r !== render), await ((_a = render == null ? void 0 : render.teardown) == null ? void 0 : _a.call(render, { viewModeChanged }));
      }
      async loadStory({ storyId }) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "loadStory" });
        return this.storyStoreValue.loadStory({ storyId });
      }
      getStoryContext(story, { forceInitialArgs = false } = {}) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "getStoryContext" });
        return this.storyStoreValue.getStoryContext(story, { forceInitialArgs });
      }
      async extract(options2) {
        if (!this.storyStoreValue)
          throw new import_preview_errors3.CalledPreviewMethodBeforeInitializationError({ methodName: "extract" });
        if (this.previewEntryError)
          throw this.previewEntryError;
        return await this.storyStoreValue.cacheAllCSFFiles(), this.storyStoreValue.extract(options2);
      }
      renderPreviewEntryError(reason, err) {
        this.previewEntryError = err, import_client_logger10.logger.error(reason), import_client_logger10.logger.error(err), this.channel.emit(import_core_events3.CONFIG_ERROR, err);
      }
    };
    var import_global9 = require_dist();
    var import_tiny_invariant = __toESM3(require_tiny_invariant_cjs());
    var import_core_events6 = require_dist2();
    var import_client_logger11 = require_dist3();
    var import_preview_errors4 = require_preview_errors();
    var import_core_events4 = require_dist2();
    var import_ts_dedent7 = __toESM3((init_esm(), __toCommonJS(esm_exports)));
    var DocsContext = class {
      constructor(channel, store, renderStoryToElement, csfFiles) {
        this.channel = channel;
        this.store = store;
        this.renderStoryToElement = renderStoryToElement;
        this.storyIdByName = (storyName) => {
          let storyId = this.nameToStoryId.get(storyName);
          if (storyId)
            return storyId;
          throw new Error(`No story found with that name: ${storyName}`);
        };
        this.componentStories = () => this.componentStoriesValue;
        this.componentStoriesFromCSFFile = (csfFile) => this.store.componentStoriesFromCSFFile({ csfFile });
        this.storyById = (storyId) => {
          if (!storyId) {
            if (!this.primaryStory)
              throw new Error("No primary story defined for docs entry. Did you forget to use `<Meta>`?");
            return this.primaryStory;
          }
          let csfFile = this.storyIdToCSFFile.get(storyId);
          if (!csfFile)
            throw new Error(`Called \`storyById\` for story that was never loaded: ${storyId}`);
          return this.store.storyFromCSFFile({ storyId, csfFile });
        };
        this.getStoryContext = (story) => ({ ...this.store.getStoryContext(story), viewMode: "docs" });
        this.loadStory = (id) => this.store.loadStory({ storyId: id });
        this.componentStoriesValue = [], this.storyIdToCSFFile = /* @__PURE__ */ new Map(), this.exportToStory = /* @__PURE__ */ new Map(), this.exportsToCSFFile = /* @__PURE__ */ new Map(), this.nameToStoryId = /* @__PURE__ */ new Map(), this.attachedCSFFiles = /* @__PURE__ */ new Set(), csfFiles.forEach((csfFile, index) => {
          this.referenceCSFFile(csfFile);
        });
      }
      referenceCSFFile(csfFile) {
        this.exportsToCSFFile.set(csfFile.moduleExports, csfFile), this.exportsToCSFFile.set(csfFile.moduleExports.default, csfFile), this.store.componentStoriesFromCSFFile({ csfFile }).forEach((story) => {
          let annotation = csfFile.stories[story.id];
          this.storyIdToCSFFile.set(annotation.id, csfFile), this.exportToStory.set(annotation.moduleExport, story);
        });
      }
      attachCSFFile(csfFile) {
        if (!this.exportsToCSFFile.has(csfFile.moduleExports))
          throw new Error("Cannot attach a CSF file that has not been referenced");
        if (this.attachedCSFFiles.has(csfFile))
          return;
        this.attachedCSFFiles.add(csfFile), this.store.componentStoriesFromCSFFile({ csfFile }).forEach((story) => {
          this.nameToStoryId.set(story.name, story.id), this.componentStoriesValue.push(story), this.primaryStory || (this.primaryStory = story);
        });
      }
      referenceMeta(metaExports, attach) {
        let resolved = this.resolveModuleExport(metaExports);
        if (resolved.type !== "meta")
          throw new Error("<Meta of={} /> must reference a CSF file module export or meta export. Did you mistakenly reference your component instead of your CSF file?");
        attach && this.attachCSFFile(resolved.csfFile);
      }
      get projectAnnotations() {
        let { projectAnnotations } = this.store;
        if (!projectAnnotations)
          throw new Error("Can't get projectAnnotations from DocsContext before they are initialized");
        return projectAnnotations;
      }
      resolveAttachedModuleExportType(moduleExportType) {
        if (moduleExportType === "story") {
          if (!this.primaryStory)
            throw new Error("No primary story attached to this docs file, did you forget to use <Meta of={} />?");
          return { type: "story", story: this.primaryStory };
        }
        if (this.attachedCSFFiles.size === 0)
          throw new Error("No CSF file attached to this docs file, did you forget to use <Meta of={} />?");
        let firstAttachedCSFFile = Array.from(this.attachedCSFFiles)[0];
        if (moduleExportType === "meta")
          return { type: "meta", csfFile: firstAttachedCSFFile };
        let { component } = firstAttachedCSFFile.meta;
        if (!component)
          throw new Error("Attached CSF file does not defined a component, did you forget to export one?");
        return { type: "component", component };
      }
      resolveModuleExport(moduleExportOrType) {
        let csfFile = this.exportsToCSFFile.get(moduleExportOrType);
        if (csfFile)
          return { type: "meta", csfFile };
        let story = this.exportToStory.get(moduleExportOrType);
        return story ? { type: "story", story } : { type: "component", component: moduleExportOrType };
      }
      resolveOf(moduleExportOrType, validTypes = []) {
        let resolved;
        if (["component", "meta", "story"].includes(moduleExportOrType)) {
          let type = moduleExportOrType;
          resolved = this.resolveAttachedModuleExportType(type);
        } else
          resolved = this.resolveModuleExport(moduleExportOrType);
        if (validTypes.length && !validTypes.includes(resolved.type)) {
          let prettyType = resolved.type === "component" ? "component or unknown" : resolved.type;
          throw new Error(import_ts_dedent7.default`Invalid value passed to the 'of' prop. The value was resolved to a '${prettyType}' type but the only types for this block are: ${validTypes.join(", ")}.
        - Did you pass a component to the 'of' prop when the block only supports a story or a meta?
        - ... or vice versa?
        - Did you pass a story, CSF file or meta to the 'of' prop that is not indexed, ie. is not targeted by the 'stories' globs in the main configuration?`);
        }
        switch (resolved.type) {
          case "component":
            return { ...resolved, projectAnnotations: this.projectAnnotations };
          case "meta":
            return { ...resolved, preparedMeta: this.store.preparedMetaFromCSFFile({ csfFile: resolved.csfFile }) };
          case "story":
          default:
            return resolved;
        }
      }
    };
    var CsfDocsRender = class {
      constructor(channel, store, entry, callbacks) {
        this.channel = channel;
        this.store = store;
        this.entry = entry;
        this.callbacks = callbacks;
        this.type = "docs";
        this.subtype = "csf";
        this.torndown = false;
        this.disableKeyListeners = false;
        this.preparing = false;
        this.id = entry.id;
      }
      isPreparing() {
        return this.preparing;
      }
      async prepare() {
        this.preparing = true;
        let { entryExports, csfFiles = [] } = await this.store.loadEntry(this.id);
        if (this.torndown)
          throw PREPARE_ABORTED;
        let { importPath, title } = this.entry, primaryCsfFile = this.store.processCSFFileWithCache(entryExports, importPath, title), primaryStoryId = Object.keys(primaryCsfFile.stories)[0];
        this.story = this.store.storyFromCSFFile({ storyId: primaryStoryId, csfFile: primaryCsfFile }), this.csfFiles = [primaryCsfFile, ...csfFiles], this.preparing = false;
      }
      isEqual(other) {
        return !!(this.id === other.id && this.story && this.story === other.story);
      }
      docsContext(renderStoryToElement) {
        if (!this.csfFiles)
          throw new Error("Cannot render docs before preparing");
        let docsContext = new DocsContext(this.channel, this.store, renderStoryToElement, this.csfFiles);
        return this.csfFiles.forEach((csfFile) => docsContext.attachCSFFile(csfFile)), docsContext;
      }
      async renderToElement(canvasElement, renderStoryToElement) {
        if (!this.story || !this.csfFiles)
          throw new Error("Cannot render docs before preparing");
        let docsContext = this.docsContext(renderStoryToElement), { docs: docsParameter } = this.story.parameters || {};
        if (!docsParameter)
          throw new Error("Cannot render a story in viewMode=docs if `@storybook/addon-docs` is not installed");
        let renderer = await docsParameter.renderer(), { render } = renderer, renderDocs = async () => {
          try {
            await render(docsContext, docsParameter, canvasElement), this.channel.emit(import_core_events4.DOCS_RENDERED, this.id);
          } catch (err) {
            this.callbacks.showException(err);
          }
        };
        return this.rerender = async () => renderDocs(), this.teardownRender = async ({ viewModeChanged }) => {
          !viewModeChanged || !canvasElement || renderer.unmount(canvasElement);
        }, renderDocs();
      }
      async teardown({ viewModeChanged } = {}) {
        var _a;
        (_a = this.teardownRender) == null ? void 0 : _a.call(this, { viewModeChanged }), this.torndown = true;
      }
    };
    var import_core_events5 = require_dist2();
    var MdxDocsRender = class {
      constructor(channel, store, entry, callbacks) {
        this.channel = channel;
        this.store = store;
        this.entry = entry;
        this.callbacks = callbacks;
        this.type = "docs";
        this.subtype = "mdx";
        this.torndown = false;
        this.disableKeyListeners = false;
        this.preparing = false;
        this.id = entry.id;
      }
      isPreparing() {
        return this.preparing;
      }
      async prepare() {
        this.preparing = true;
        let { entryExports, csfFiles = [] } = await this.store.loadEntry(this.id);
        if (this.torndown)
          throw PREPARE_ABORTED;
        this.csfFiles = csfFiles, this.exports = entryExports, this.preparing = false;
      }
      isEqual(other) {
        return !!(this.id === other.id && this.exports && this.exports === other.exports);
      }
      docsContext(renderStoryToElement) {
        if (!this.csfFiles)
          throw new Error("Cannot render docs before preparing");
        return new DocsContext(this.channel, this.store, renderStoryToElement, this.csfFiles);
      }
      async renderToElement(canvasElement, renderStoryToElement) {
        if (!this.exports || !this.csfFiles || !this.store.projectAnnotations)
          throw new Error("Cannot render docs before preparing");
        let docsContext = this.docsContext(renderStoryToElement), { docs } = this.store.projectAnnotations.parameters || {};
        if (!docs)
          throw new Error("Cannot render a story in viewMode=docs if `@storybook/addon-docs` is not installed");
        let docsParameter = { ...docs, page: this.exports.default }, renderer = await docs.renderer(), { render } = renderer, renderDocs = async () => {
          try {
            await render(docsContext, docsParameter, canvasElement), this.channel.emit(import_core_events5.DOCS_RENDERED, this.id);
          } catch (err) {
            this.callbacks.showException(err);
          }
        };
        return this.rerender = async () => renderDocs(), this.teardownRender = async ({ viewModeChanged } = {}) => {
          !viewModeChanged || !canvasElement || (renderer.unmount(canvasElement), this.torndown = true);
        }, renderDocs();
      }
      async teardown({ viewModeChanged } = {}) {
        var _a;
        (_a = this.teardownRender) == null ? void 0 : _a.call(this, { viewModeChanged }), this.torndown = true;
      }
    };
    var globalWindow = globalThis;
    function focusInInput(event) {
      let target = event.composedPath && event.composedPath()[0] || event.target;
      return /input|textarea/i.test(target.tagName) || target.getAttribute("contenteditable") !== null;
    }
    var ATTACHED_MDX_TAG = "attached-mdx";
    var UNATTACHED_MDX_TAG = "unattached-mdx";
    function isMdxEntry({ tags }) {
      return (tags == null ? void 0 : tags.includes(UNATTACHED_MDX_TAG)) || (tags == null ? void 0 : tags.includes(ATTACHED_MDX_TAG));
    }
    function isStoryRender(r) {
      return r.type === "story";
    }
    function isDocsRender(r) {
      return r.type === "docs";
    }
    function isCsfDocsRender(r) {
      return isDocsRender(r) && r.subtype === "csf";
    }
    var PreviewWithSelection = class extends Preview {
      constructor(importFn, getProjectAnnotations, selectionStore, view) {
        super(importFn, getProjectAnnotations, void 0, false);
        this.importFn = importFn;
        this.getProjectAnnotations = getProjectAnnotations;
        this.selectionStore = selectionStore;
        this.view = view;
        this.initialize();
      }
      setupListeners() {
        super.setupListeners(), globalWindow.onkeydown = this.onKeydown.bind(this), this.channel.on(import_core_events6.SET_CURRENT_STORY, this.onSetCurrentStory.bind(this)), this.channel.on(import_core_events6.UPDATE_QUERY_PARAMS, this.onUpdateQueryParams.bind(this)), this.channel.on(import_core_events6.PRELOAD_ENTRIES, this.onPreloadStories.bind(this));
      }
      async setInitialGlobals() {
        if (!this.storyStoreValue)
          throw new import_preview_errors4.CalledPreviewMethodBeforeInitializationError({ methodName: "setInitialGlobals" });
        let { globals } = this.selectionStore.selectionSpecifier || {};
        globals && this.storyStoreValue.globals.updateFromPersisted(globals), this.emitGlobals();
      }
      async initializeWithStoryIndex(storyIndex) {
        return await super.initializeWithStoryIndex(storyIndex), this.selectSpecifiedStory();
      }
      async selectSpecifiedStory() {
        if (!this.storyStoreValue)
          throw new import_preview_errors4.CalledPreviewMethodBeforeInitializationError({ methodName: "selectSpecifiedStory" });
        if (this.selectionStore.selection) {
          await this.renderSelection();
          return;
        }
        if (!this.selectionStore.selectionSpecifier) {
          this.renderMissingStory();
          return;
        }
        let { storySpecifier, args: args2 } = this.selectionStore.selectionSpecifier, entry = this.storyStoreValue.storyIndex.entryFromSpecifier(storySpecifier);
        if (!entry) {
          storySpecifier === "*" ? this.renderStoryLoadingException(storySpecifier, new import_preview_errors4.EmptyIndexError()) : this.renderStoryLoadingException(storySpecifier, new import_preview_errors4.NoStoryMatchError({ storySpecifier: storySpecifier.toString() }));
          return;
        }
        let { id: storyId, type: viewMode } = entry;
        this.selectionStore.setSelection({ storyId, viewMode }), this.channel.emit(import_core_events6.STORY_SPECIFIED, this.selectionStore.selection), this.channel.emit(import_core_events6.CURRENT_STORY_WAS_SET, this.selectionStore.selection), await this.renderSelection({ persistedArgs: args2 });
      }
      async onGetProjectAnnotationsChanged({ getProjectAnnotations }) {
        await super.onGetProjectAnnotationsChanged({ getProjectAnnotations }), this.selectionStore.selection && this.renderSelection();
      }
      async onStoriesChanged({ importFn, storyIndex }) {
        await super.onStoriesChanged({ importFn, storyIndex }), this.selectionStore.selection ? await this.renderSelection() : await this.selectSpecifiedStory();
      }
      onKeydown(event) {
        if (!this.storyRenders.find((r) => r.disableKeyListeners) && !focusInInput(event)) {
          let { altKey, ctrlKey, metaKey, shiftKey, key: key2, code, keyCode } = event;
          this.channel.emit(import_core_events6.PREVIEW_KEYDOWN, { event: { altKey, ctrlKey, metaKey, shiftKey, key: key2, code, keyCode } });
        }
      }
      async onSetCurrentStory(selection) {
        this.selectionStore.setSelection({ viewMode: "story", ...selection }), await this.storeInitializationPromise, this.channel.emit(import_core_events6.CURRENT_STORY_WAS_SET, this.selectionStore.selection), this.renderSelection();
      }
      onUpdateQueryParams(queryParams) {
        this.selectionStore.setQueryParams(queryParams);
      }
      async onUpdateGlobals({ globals }) {
        var _a, _b;
        super.onUpdateGlobals({ globals }), (this.currentRender instanceof MdxDocsRender || this.currentRender instanceof CsfDocsRender) && await ((_b = (_a = this.currentRender).rerender) == null ? void 0 : _b.call(_a));
      }
      async onUpdateArgs({ storyId, updatedArgs }) {
        super.onUpdateArgs({ storyId, updatedArgs });
      }
      async onPreloadStories({ ids }) {
        await this.storeInitializationPromise, this.storyStoreValue && await Promise.allSettled(ids.map((id) => {
          var _a;
          return (_a = this.storyStoreValue) == null ? void 0 : _a.loadEntry(id);
        }));
      }
      async renderSelection({ persistedArgs } = {}) {
        var _a, _b, _c, _d;
        let { renderToCanvas } = this;
        if (!this.storyStoreValue || !renderToCanvas)
          throw new import_preview_errors4.CalledPreviewMethodBeforeInitializationError({ methodName: "renderSelection" });
        let { selection } = this.selectionStore;
        if (!selection)
          throw new Error("Cannot call renderSelection as no selection was made");
        let { storyId } = selection, entry;
        try {
          entry = await this.storyStoreValue.storyIdToEntry(storyId);
        } catch (err) {
          this.currentRender && await this.teardownRender(this.currentRender), this.renderStoryLoadingException(storyId, err);
          return;
        }
        let storyIdChanged = ((_a = this.currentSelection) == null ? void 0 : _a.storyId) !== storyId, viewModeChanged = ((_b = this.currentRender) == null ? void 0 : _b.type) !== entry.type;
        entry.type === "story" ? this.view.showPreparingStory({ immediate: viewModeChanged }) : this.view.showPreparingDocs({ immediate: viewModeChanged }), ((_c = this.currentRender) == null ? void 0 : _c.isPreparing()) && await this.teardownRender(this.currentRender);
        let render;
        entry.type === "story" ? render = new StoryRender(this.channel, this.storyStoreValue, (...args2) => (this.view.showStoryDuringRender(), renderToCanvas(...args2)), this.mainStoryCallbacks(storyId), storyId, "story") : isMdxEntry(entry) ? render = new MdxDocsRender(this.channel, this.storyStoreValue, entry, this.mainStoryCallbacks(storyId)) : render = new CsfDocsRender(this.channel, this.storyStoreValue, entry, this.mainStoryCallbacks(storyId));
        let lastSelection = this.currentSelection;
        this.currentSelection = selection;
        let lastRender = this.currentRender;
        this.currentRender = render;
        try {
          await render.prepare();
        } catch (err) {
          lastRender && await this.teardownRender(lastRender), err !== PREPARE_ABORTED && this.renderStoryLoadingException(storyId, err);
          return;
        }
        let implementationChanged = !storyIdChanged && lastRender && !render.isEqual(lastRender);
        if (persistedArgs && isStoryRender(render) && ((0, import_tiny_invariant.default)(!!render.story), this.storyStoreValue.args.updateFromPersisted(render.story, persistedArgs)), lastRender && !lastRender.torndown && !storyIdChanged && !implementationChanged && !viewModeChanged) {
          this.currentRender = lastRender, this.channel.emit(import_core_events6.STORY_UNCHANGED, storyId), this.view.showMain();
          return;
        }
        if (lastRender && await this.teardownRender(lastRender, { viewModeChanged }), lastSelection && (storyIdChanged || viewModeChanged) && this.channel.emit(import_core_events6.STORY_CHANGED, storyId), isStoryRender(render)) {
          (0, import_tiny_invariant.default)(!!render.story);
          let { parameters, initialArgs, argTypes, unmappedArgs } = this.storyStoreValue.getStoryContext(render.story);
          this.channel.emit(import_core_events6.STORY_PREPARED, { id: storyId, parameters, initialArgs, argTypes, args: unmappedArgs });
        } else {
          let { parameters } = this.storyStoreValue.projectAnnotations;
          if (isCsfDocsRender(render) || ((_d = render.entry.tags) == null ? void 0 : _d.includes(ATTACHED_MDX_TAG))) {
            if (!render.csfFiles)
              throw new import_preview_errors4.MdxFileWithNoCsfReferencesError({ storyId });
            ({ parameters } = this.storyStoreValue.preparedMetaFromCSFFile({ csfFile: render.csfFiles[0] }));
          }
          this.channel.emit(import_core_events6.DOCS_PREPARED, { id: storyId, parameters });
        }
        isStoryRender(render) ? ((0, import_tiny_invariant.default)(!!render.story), this.storyRenders.push(render), this.currentRender.renderToElement(this.view.prepareForStory(render.story))) : this.currentRender.renderToElement(this.view.prepareForDocs(), this.renderStoryToElement.bind(this));
      }
      async teardownRender(render, { viewModeChanged = false } = {}) {
        var _a;
        this.storyRenders = this.storyRenders.filter((r) => r !== render), await ((_a = render == null ? void 0 : render.teardown) == null ? void 0 : _a.call(render, { viewModeChanged }));
      }
      mainStoryCallbacks(storyId) {
        return { showMain: () => this.view.showMain(), showError: (err) => this.renderError(storyId, err), showException: (err) => this.renderException(storyId, err) };
      }
      renderPreviewEntryError(reason, err) {
        super.renderPreviewEntryError(reason, err), this.view.showErrorDisplay(err);
      }
      renderMissingStory() {
        this.view.showNoPreview(), this.channel.emit(import_core_events6.STORY_MISSING);
      }
      renderStoryLoadingException(storySpecifier, err) {
        import_client_logger11.logger.error(err), this.view.showErrorDisplay(err), this.channel.emit(import_core_events6.STORY_MISSING, storySpecifier);
      }
      renderException(storyId, error) {
        var _a;
        let { name: name2 = "Error", message = String(error), stack } = error;
        this.channel.emit(import_core_events6.STORY_THREW_EXCEPTION, { name: name2, message, stack }), this.channel.emit(import_core_events6.STORY_RENDER_PHASE_CHANGED, { newPhase: "errored", storyId }), ((_a = error.message) == null ? void 0 : _a.startsWith("ignoredException")) || (this.view.showErrorDisplay(error), import_client_logger11.logger.error(`Error rendering story '${storyId}':`), import_client_logger11.logger.error(error));
      }
      renderError(storyId, { title, description }) {
        import_client_logger11.logger.error(`Error rendering story ${title}: ${description}`), this.channel.emit(import_core_events6.STORY_ERRORED, { title, description }), this.channel.emit(import_core_events6.STORY_RENDER_PHASE_CHANGED, { newPhase: "errored", storyId }), this.view.showErrorDisplay({ message: title, stack: description });
      }
    };
    var import_global7 = require_dist();
    var import_qs2 = __toESM3(require_lib());
    var import_qs = __toESM3(require_lib());
    var import_ts_dedent8 = (init_esm(), __toCommonJS(esm_exports));
    var import_client_logger12 = require_dist3();
    var import_isPlainObject3 = __toESM3(require_isPlainObject());
    var VALIDATION_REGEXP = /^[a-zA-Z0-9 _-]*$/;
    var NUMBER_REGEXP = /^-?[0-9]+(\.[0-9]+)?$/;
    var HEX_REGEXP = /^#([a-f0-9]{3,4}|[a-f0-9]{6}|[a-f0-9]{8})$/i;
    var COLOR_REGEXP = /^(rgba?|hsla?)\(([0-9]{1,3}),\s?([0-9]{1,3})%?,\s?([0-9]{1,3})%?,?\s?([0-9](\.[0-9]{1,2})?)?\)$/i;
    var validateArgs = (key2 = "", value2) => key2 === null || key2 === "" || !VALIDATION_REGEXP.test(key2) ? false : value2 == null || value2 instanceof Date || typeof value2 == "number" || typeof value2 == "boolean" ? true : typeof value2 == "string" ? VALIDATION_REGEXP.test(value2) || NUMBER_REGEXP.test(value2) || HEX_REGEXP.test(value2) || COLOR_REGEXP.test(value2) : Array.isArray(value2) ? value2.every((v) => validateArgs(key2, v)) : (0, import_isPlainObject3.default)(value2) ? Object.entries(value2).every(([k, v]) => validateArgs(k, v)) : false;
    var QS_OPTIONS = { delimiter: ";", allowDots: true, allowSparse: true, decoder(str, defaultDecoder, charset, type) {
      if (type === "value" && str.startsWith("!")) {
        if (str === "!undefined")
          return;
        if (str === "!null")
          return null;
        if (str === "!true")
          return true;
        if (str === "!false")
          return false;
        if (str.startsWith("!date(") && str.endsWith(")"))
          return new Date(str.slice(6, -1));
        if (str.startsWith("!hex(") && str.endsWith(")"))
          return `#${str.slice(5, -1)}`;
        let color = str.slice(1).match(COLOR_REGEXP);
        if (color)
          return str.startsWith("!rgba") ? `${color[1]}(${color[2]}, ${color[3]}, ${color[4]}, ${color[5]})` : str.startsWith("!hsla") ? `${color[1]}(${color[2]}, ${color[3]}%, ${color[4]}%, ${color[5]})` : str.startsWith("!rgb") ? `${color[1]}(${color[2]}, ${color[3]}, ${color[4]})` : `${color[1]}(${color[2]}, ${color[3]}%, ${color[4]}%)`;
      }
      return type === "value" && NUMBER_REGEXP.test(str) ? Number(str) : defaultDecoder(str, defaultDecoder, charset);
    } };
    var parseArgsParam = (argsString) => {
      let parts = argsString.split(";").map((part) => part.replace("=", "~").replace(":", "="));
      return Object.entries(import_qs.default.parse(parts.join(";"), QS_OPTIONS)).reduce((acc, [key2, value2]) => validateArgs(key2, value2) ? Object.assign(acc, { [key2]: value2 }) : (import_client_logger12.once.warn(import_ts_dedent8.dedent`
      Omitted potentially unsafe URL args.

      More info: https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url
    `), acc), {});
    };
    var { history, document: document2 } = import_global7.global;
    function pathToId(path) {
      let match = (path || "").match(/^\/story\/(.+)/);
      if (!match)
        throw new Error(`Invalid path '${path}',  must start with '/story/'`);
      return match[1];
    }
    var getQueryString = ({ selection, extraParams }) => {
      let search = typeof document2 < "u" ? document2.location.search : "", { path, selectedKind, selectedStory, ...rest } = import_qs2.default.parse(search, { ignoreQueryPrefix: true });
      return import_qs2.default.stringify({ ...rest, ...extraParams, ...selection && { id: selection.storyId, viewMode: selection.viewMode } }, { encode: false, addQueryPrefix: true });
    };
    var setPath = (selection) => {
      if (!selection)
        return;
      let query = getQueryString({ selection }), { hash = "" } = document2.location;
      document2.title = selection.storyId, history.replaceState({}, "", `${document2.location.pathname}${query}${hash}`);
    };
    var isObject4 = (val) => val != null && typeof val == "object" && Array.isArray(val) === false;
    var getFirstString = (v) => {
      if (v !== void 0) {
        if (typeof v == "string")
          return v;
        if (Array.isArray(v))
          return getFirstString(v[0]);
        if (isObject4(v))
          return getFirstString(Object.values(v).filter(Boolean));
      }
    };
    var getSelectionSpecifierFromPath = () => {
      if (typeof document2 < "u") {
        let query = import_qs2.default.parse(document2.location.search, { ignoreQueryPrefix: true }), args2 = typeof query.args == "string" ? parseArgsParam(query.args) : void 0, globals = typeof query.globals == "string" ? parseArgsParam(query.globals) : void 0, viewMode = getFirstString(query.viewMode);
        (typeof viewMode != "string" || !viewMode.match(/docs|story/)) && (viewMode = "story");
        let path = getFirstString(query.path), storyId = path ? pathToId(path) : getFirstString(query.id);
        if (storyId)
          return { storySpecifier: storyId, args: args2, globals, viewMode };
      }
      return null;
    };
    var UrlStore = class {
      constructor() {
        this.selectionSpecifier = getSelectionSpecifierFromPath();
      }
      setSelection(selection) {
        this.selection = selection, setPath(this.selection);
      }
      setQueryParams(queryParams) {
        let query = getQueryString({ extraParams: queryParams }), { hash = "" } = document2.location;
        history.replaceState({}, "", `${document2.location.pathname}${query}${hash}`);
      }
    };
    var import_global8 = require_dist();
    var import_client_logger13 = require_dist3();
    var import_ansi_to_html = __toESM3(require_ansi_to_html());
    var import_ts_dedent9 = (init_esm(), __toCommonJS(esm_exports));
    var import_qs3 = __toESM3(require_lib());
    var { document: document3 } = import_global8.global;
    var PREPARING_DELAY = 100;
    var Mode = ((Mode2) => (Mode2.MAIN = "MAIN", Mode2.NOPREVIEW = "NOPREVIEW", Mode2.PREPARING_STORY = "PREPARING_STORY", Mode2.PREPARING_DOCS = "PREPARING_DOCS", Mode2.ERROR = "ERROR", Mode2))(Mode || {});
    var classes = { PREPARING_STORY: "sb-show-preparing-story", PREPARING_DOCS: "sb-show-preparing-docs", MAIN: "sb-show-main", NOPREVIEW: "sb-show-nopreview", ERROR: "sb-show-errordisplay" };
    var layoutClassMap = { centered: "sb-main-centered", fullscreen: "sb-main-fullscreen", padded: "sb-main-padded" };
    var ansiConverter = new import_ansi_to_html.default({ escapeXML: true });
    var WebView = class {
      constructor() {
        this.testing = false;
        if (typeof document3 < "u") {
          let { __SPECIAL_TEST_PARAMETER__ } = import_qs3.default.parse(document3.location.search, { ignoreQueryPrefix: true });
          switch (__SPECIAL_TEST_PARAMETER__) {
            case "preparing-story": {
              this.showPreparingStory(), this.testing = true;
              break;
            }
            case "preparing-docs": {
              this.showPreparingDocs(), this.testing = true;
              break;
            }
            default:
          }
        }
      }
      prepareForStory(story) {
        return this.showStory(), this.applyLayout(story.parameters.layout), document3.documentElement.scrollTop = 0, document3.documentElement.scrollLeft = 0, this.storyRoot();
      }
      storyRoot() {
        return document3.getElementById("storybook-root");
      }
      prepareForDocs() {
        return this.showMain(), this.showDocs(), this.applyLayout("fullscreen"), document3.documentElement.scrollTop = 0, document3.documentElement.scrollLeft = 0, this.docsRoot();
      }
      docsRoot() {
        return document3.getElementById("storybook-docs");
      }
      applyLayout(layout = "padded") {
        if (layout === "none") {
          document3.body.classList.remove(this.currentLayoutClass), this.currentLayoutClass = null;
          return;
        }
        this.checkIfLayoutExists(layout);
        let layoutClass = layoutClassMap[layout];
        document3.body.classList.remove(this.currentLayoutClass), document3.body.classList.add(layoutClass), this.currentLayoutClass = layoutClass;
      }
      checkIfLayoutExists(layout) {
        layoutClassMap[layout] || import_client_logger13.logger.warn(import_ts_dedent9.dedent`
          The desired layout: ${layout} is not a valid option.
          The possible options are: ${Object.keys(layoutClassMap).join(", ")}, none.
        `);
      }
      showMode(mode) {
        clearTimeout(this.preparingTimeout), Object.keys(Mode).forEach((otherMode) => {
          otherMode === mode ? document3.body.classList.add(classes[otherMode]) : document3.body.classList.remove(classes[otherMode]);
        });
      }
      showErrorDisplay({ message = "", stack = "" }) {
        let header = message, detail = stack, parts = message.split(`
`);
        parts.length > 1 && ([header] = parts, detail = parts.slice(1).join(`
`).replace(/^\n/, "")), document3.getElementById("error-message").innerHTML = ansiConverter.toHtml(header), document3.getElementById("error-stack").innerHTML = ansiConverter.toHtml(detail), this.showMode("ERROR");
      }
      showNoPreview() {
        var _a, _b;
        this.testing || (this.showMode("NOPREVIEW"), (_a = this.storyRoot()) == null ? void 0 : _a.setAttribute("hidden", "true"), (_b = this.docsRoot()) == null ? void 0 : _b.setAttribute("hidden", "true"));
      }
      showPreparingStory({ immediate = false } = {}) {
        clearTimeout(this.preparingTimeout), immediate ? this.showMode("PREPARING_STORY") : this.preparingTimeout = setTimeout(() => this.showMode("PREPARING_STORY"), PREPARING_DELAY);
      }
      showPreparingDocs({ immediate = false } = {}) {
        clearTimeout(this.preparingTimeout), immediate ? this.showMode("PREPARING_DOCS") : this.preparingTimeout = setTimeout(() => this.showMode("PREPARING_DOCS"), PREPARING_DELAY);
      }
      showMain() {
        this.showMode("MAIN");
      }
      showDocs() {
        this.storyRoot().setAttribute("hidden", "true"), this.docsRoot().removeAttribute("hidden");
      }
      showStory() {
        this.docsRoot().setAttribute("hidden", "true"), this.storyRoot().removeAttribute("hidden");
      }
      showStoryDuringRender() {
        document3.body.classList.add(classes.MAIN);
      }
    };
    var PreviewWeb = class extends PreviewWithSelection {
      constructor(importFn, getProjectAnnotations) {
        super(importFn, getProjectAnnotations, new UrlStore(), new WebView());
        this.importFn = importFn;
        this.getProjectAnnotations = getProjectAnnotations;
        import_global9.global.__STORYBOOK_PREVIEW__ = this;
      }
    };
    var import_global10 = require_dist();
    var { document: document4 } = import_global10.global;
    var runScriptTypes = ["application/javascript", "application/ecmascript", "application/x-ecmascript", "application/x-javascript", "text/ecmascript", "text/javascript", "text/javascript1.0", "text/javascript1.1", "text/javascript1.2", "text/javascript1.3", "text/javascript1.4", "text/javascript1.5", "text/jscript", "text/livescript", "text/x-ecmascript", "text/x-javascript", "module"];
    var SCRIPT = "script";
    var SCRIPTS_ROOT_ID = "scripts-root";
    function simulateDOMContentLoaded() {
      let DOMContentLoadedEvent = document4.createEvent("Event");
      DOMContentLoadedEvent.initEvent("DOMContentLoaded", true, true), document4.dispatchEvent(DOMContentLoadedEvent);
    }
    function insertScript($script, callback, $scriptRoot) {
      let scriptEl = document4.createElement("script");
      scriptEl.type = $script.type === "module" ? "module" : "text/javascript", $script.src ? (scriptEl.onload = callback, scriptEl.onerror = callback, scriptEl.src = $script.src) : scriptEl.textContent = $script.innerText, $scriptRoot ? $scriptRoot.appendChild(scriptEl) : document4.head.appendChild(scriptEl), $script.parentNode.removeChild($script), $script.src || callback();
    }
    function insertScriptsSequentially(scriptsToExecute, callback, index = 0) {
      scriptsToExecute[index](() => {
        index++, index === scriptsToExecute.length ? callback() : insertScriptsSequentially(scriptsToExecute, callback, index);
      });
    }
    function simulatePageLoad($container) {
      let $scriptsRoot = document4.getElementById(SCRIPTS_ROOT_ID);
      $scriptsRoot ? $scriptsRoot.innerHTML = "" : ($scriptsRoot = document4.createElement("div"), $scriptsRoot.id = SCRIPTS_ROOT_ID, document4.body.appendChild($scriptsRoot));
      let $scripts = Array.from($container.querySelectorAll(SCRIPT));
      if ($scripts.length) {
        let scriptsToExecute = [];
        $scripts.forEach(($script) => {
          let typeAttr = $script.getAttribute("type");
          (!typeAttr || runScriptTypes.includes(typeAttr)) && scriptsToExecute.push((callback) => insertScript($script, callback, $scriptsRoot));
        }), scriptsToExecute.length && insertScriptsSequentially(scriptsToExecute, simulateDOMContentLoaded, void 0);
      } else
        simulateDOMContentLoaded();
    }
  }
});

// node_modules/.pnpm/@storybook+instrumenter@8.1.5/node_modules/@storybook/instrumenter/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/.pnpm/@storybook+instrumenter@8.1.5/node_modules/@storybook/instrumenter/dist/index.js"(exports2, module2) {
    "use strict";
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __commonJS3 = (cb, mod) => function() {
      return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var require_ansi_styles = __commonJS3({ "../../node_modules/pretty-format/node_modules/ansi-styles/index.js"(exports22, module22) {
      "use strict";
      var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
      function assembleStyles() {
        let codes = /* @__PURE__ */ new Map(), styles2 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        styles2.color.gray = styles2.color.blackBright, styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright, styles2.color.grey = styles2.color.blackBright, styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
        for (let [groupName, group] of Object.entries(styles2)) {
          for (let [styleName, style] of Object.entries(group))
            styles2[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles2[styleName], codes.set(style[0], style[1]);
          Object.defineProperty(styles2, groupName, { value: group, enumerable: false });
        }
        return Object.defineProperty(styles2, "codes", { value: codes, enumerable: false }), styles2.color.close = "\x1B[39m", styles2.bgColor.close = "\x1B[49m", styles2.color.ansi256 = wrapAnsi256(), styles2.color.ansi16m = wrapAnsi16m(), styles2.bgColor.ansi256 = wrapAnsi256(10), styles2.bgColor.ansi16m = wrapAnsi16m(10), Object.defineProperties(styles2, { rgbToAnsi256: { value: (red, green, blue) => red === green && green === blue ? red < 8 ? 16 : red > 248 ? 231 : Math.round((red - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5), enumerable: false }, hexToRgb: { value: (hex2) => {
          let matches = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex2.toString(16));
          if (!matches)
            return [0, 0, 0];
          let { colorString } = matches.groups;
          colorString.length === 3 && (colorString = colorString.split("").map((character) => character + character).join(""));
          let integer = Number.parseInt(colorString, 16);
          return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];
        }, enumerable: false }, hexToAnsi256: { value: (hex2) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex2)), enumerable: false } }), styles2;
      }
      Object.defineProperty(module22, "exports", { enumerable: true, get: assembleStyles });
    } });
    var require_collections = __commonJS3({ "../../node_modules/pretty-format/build/collections.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printIteratorEntries = printIteratorEntries;
      exports22.printIteratorValues = printIteratorValues;
      exports22.printListItems = printListItems;
      exports22.printObjectProperties = printObjectProperties;
      var getKeysOfEnumerableProperties = (object, compareKeys) => {
        let rawKeys = Object.keys(object), keys = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;
        return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(object).forEach((symbol) => {
          Object.getOwnPropertyDescriptor(object, symbol).enumerable && keys.push(symbol);
        }), keys;
      };
      function printIteratorEntries(iterator, config, indentation, depth, refs2, printer, separator = ": ") {
        let result2 = "", width = 0, current = iterator.next();
        if (!current.done) {
          result2 += config.spacingOuter;
          let indentationNext = indentation + config.indent;
          for (; !current.done; ) {
            if (result2 += indentationNext, width++ === config.maxWidth) {
              result2 += "\u2026";
              break;
            }
            let name2 = printer(current.value[0], config, indentationNext, depth, refs2), value2 = printer(current.value[1], config, indentationNext, depth, refs2);
            result2 += name2 + separator + value2, current = iterator.next(), current.done ? config.min || (result2 += ",") : result2 += `,${config.spacingInner}`;
          }
          result2 += config.spacingOuter + indentation;
        }
        return result2;
      }
      function printIteratorValues(iterator, config, indentation, depth, refs2, printer) {
        let result2 = "", width = 0, current = iterator.next();
        if (!current.done) {
          result2 += config.spacingOuter;
          let indentationNext = indentation + config.indent;
          for (; !current.done; ) {
            if (result2 += indentationNext, width++ === config.maxWidth) {
              result2 += "\u2026";
              break;
            }
            result2 += printer(current.value, config, indentationNext, depth, refs2), current = iterator.next(), current.done ? config.min || (result2 += ",") : result2 += `,${config.spacingInner}`;
          }
          result2 += config.spacingOuter + indentation;
        }
        return result2;
      }
      function printListItems(list, config, indentation, depth, refs2, printer) {
        let result2 = "";
        if (list.length) {
          result2 += config.spacingOuter;
          let indentationNext = indentation + config.indent;
          for (let i = 0; i < list.length; i++) {
            if (result2 += indentationNext, i === config.maxWidth) {
              result2 += "\u2026";
              break;
            }
            i in list && (result2 += printer(list[i], config, indentationNext, depth, refs2)), i < list.length - 1 ? result2 += `,${config.spacingInner}` : config.min || (result2 += ",");
          }
          result2 += config.spacingOuter + indentation;
        }
        return result2;
      }
      function printObjectProperties(val, config, indentation, depth, refs2, printer) {
        let result2 = "", keys = getKeysOfEnumerableProperties(val, config.compareKeys);
        if (keys.length) {
          result2 += config.spacingOuter;
          let indentationNext = indentation + config.indent;
          for (let i = 0; i < keys.length; i++) {
            let key2 = keys[i], name2 = printer(key2, config, indentationNext, depth, refs2), value2 = printer(val[key2], config, indentationNext, depth, refs2);
            result2 += `${indentationNext + name2}: ${value2}`, i < keys.length - 1 ? result2 += `,${config.spacingInner}` : config.min || (result2 += ",");
          }
          result2 += config.spacingOuter + indentation;
        }
        return result2;
      }
    } });
    var require_AsymmetricMatcher = __commonJS3({ "../../node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), Symbol22 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, asymmetricMatcher = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("jest.asymmetricMatcher") : 1267621, SPACE = " ", serialize = (val, config, indentation, depth, refs2, printer) => {
        let stringedValue = val.toString();
        if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining")
          return ++depth > config.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE}[${(0, _collections.printListItems)(val.sample, config, indentation, depth, refs2, printer)}]`;
        if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining")
          return ++depth > config.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE}{${(0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs2, printer)}}`;
        if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching" || stringedValue === "StringContaining" || stringedValue === "StringNotContaining")
          return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs2);
        if (typeof val.toAsymmetricMatcher != "function")
          throw new Error(`Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`);
        return val.toAsymmetricMatcher();
      };
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === asymmetricMatcher;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_DOMCollection = __commonJS3({ "../../node_modules/pretty-format/build/plugins/DOMCollection.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), SPACE = " ", OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"], ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/, testName = (name2) => OBJECT_NAMES.indexOf(name2) !== -1 || ARRAY_REGEXP.test(name2), test = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
      exports22.test = test;
      var isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap", serialize = (collection, config, indentation, depth, refs2, printer) => {
        let name2 = collection.constructor.name;
        return ++depth > config.maxDepth ? `[${name2}]` : (config.min ? "" : name2 + SPACE) + (OBJECT_NAMES.indexOf(name2) !== -1 ? `{${(0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}) : { ...collection }, config, indentation, depth, refs2, printer)}}` : `[${(0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs2, printer)}]`);
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_escapeHTML = __commonJS3({ "../../node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = escapeHTML;
      function escapeHTML(str) {
        return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
      }
    } });
    var require_markup = __commonJS3({ "../../node_modules/pretty-format/build/plugins/lib/markup.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printText = exports22.printProps = exports22.printElementAsLeaf = exports22.printElement = exports22.printComment = exports22.printChildren = void 0;
      var _escapeHTML = _interopRequireDefault(require_escapeHTML());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var printProps = (keys, props, config, indentation, depth, refs2, printer) => {
        let indentationNext = indentation + config.indent, colors = config.colors;
        return keys.map((key2) => {
          let value2 = props[key2], printed = printer(value2, config, indentationNext, depth, refs2);
          return typeof value2 != "string" && (printed.indexOf(`
`) !== -1 && (printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation), printed = `{${printed}}`), `${config.spacingInner + indentation + colors.prop.open + key2 + colors.prop.close}=${colors.value.open}${printed}${colors.value.close}`;
        }).join("");
      };
      exports22.printProps = printProps;
      var printChildren = (children2, config, indentation, depth, refs2, printer) => children2.map((child) => config.spacingOuter + indentation + (typeof child == "string" ? printText(child, config) : printer(child, config, indentation, depth, refs2))).join("");
      exports22.printChildren = printChildren;
      var printText = (text, config) => {
        let contentColor = config.colors.content;
        return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
      };
      exports22.printText = printText;
      var printComment = (comment, config) => {
        let commentColor = config.colors.comment;
        return `${commentColor.open}<!--${(0, _escapeHTML.default)(comment)}-->${commentColor.close}`;
      };
      exports22.printComment = printComment;
      var printElement = (type, printedProps, printedChildren, config, indentation) => {
        let tagColor = config.colors.tag;
        return `${tagColor.open}<${type}${printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open}${printedChildren ? `>${tagColor.close}${printedChildren}${config.spacingOuter}${indentation}${tagColor.open}</${type}` : `${printedProps && !config.min ? "" : " "}/`}>${tagColor.close}`;
      };
      exports22.printElement = printElement;
      var printElementAsLeaf = (type, config) => {
        let tagColor = config.colors.tag;
        return `${tagColor.open}<${type}${tagColor.close} \u2026${tagColor.open} />${tagColor.close}`;
      };
      exports22.printElementAsLeaf = printElementAsLeaf;
    } });
    var require_DOMElement = __commonJS3({ "../../node_modules/pretty-format/build/plugins/DOMElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup(), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, FRAGMENT_NODE = 11, ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/, testHasAttribute = (val) => {
        try {
          return typeof val.hasAttribute == "function" && val.hasAttribute("is");
        } catch {
          return false;
        }
      }, testNode = (val) => {
        let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement = typeof tagName == "string" && tagName.includes("-") || testHasAttribute(val);
        return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === "Text" || nodeType === COMMENT_NODE && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
      }, test = (val) => {
        var _a;
        return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);
      };
      exports22.test = test;
      function nodeIsText(node) {
        return node.nodeType === TEXT_NODE;
      }
      function nodeIsComment(node) {
        return node.nodeType === COMMENT_NODE;
      }
      function nodeIsFragment(node) {
        return node.nodeType === FRAGMENT_NODE;
      }
      var serialize = (node, config, indentation, depth, refs2, printer) => {
        if (nodeIsText(node))
          return (0, _markup.printText)(node.data, config);
        if (nodeIsComment(node))
          return (0, _markup.printComment)(node.data, config);
        let type = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
        return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(type, config) : (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes, (attr) => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config, indentation + config.indent, depth, refs2, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs2, printer), config, indentation);
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_Immutable = __commonJS3({ "../../node_modules/pretty-format/build/plugins/Immutable.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@", IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@", IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@", IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@", IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@", IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@", IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@", IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@", IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@", getImmutableName = (name2) => `Immutable.${name2}`, printAsLeaf = (name2) => `[${name2}]`, SPACE = " ", LAZY = "\u2026", printImmutableEntries = (val, config, indentation, depth, refs2, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}{${(0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs2, printer)}}`;
      function getRecordEntries(val) {
        let i = 0;
        return { next() {
          if (i < val._keys.length) {
            let key2 = val._keys[i++];
            return { done: false, value: [key2, val.get(key2)] };
          }
          return { done: true, value: void 0 };
        } };
      }
      var printImmutableRecord = (val, config, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName(val._name || "Record");
        return ++depth > config.maxDepth ? printAsLeaf(name2) : `${name2 + SPACE}{${(0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs2, printer)}}`;
      }, printImmutableSeq = (val, config, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName("Seq");
        return ++depth > config.maxDepth ? printAsLeaf(name2) : val[IS_KEYED_SENTINEL] ? `${name2 + SPACE}{${val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs2, printer) : LAZY}}` : `${name2 + SPACE}[${val._iter || val._array || val._collection || val._iterable ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs2, printer) : LAZY}]`;
      }, printImmutableValues = (val, config, indentation, depth, refs2, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}[${(0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs2, printer)}]`, serialize = (val, config, indentation, depth, refs2, printer) => val[IS_MAP_SENTINEL] ? printImmutableEntries(val, config, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL] ? "OrderedMap" : "Map") : val[IS_LIST_SENTINEL] ? printImmutableValues(val, config, indentation, depth, refs2, printer, "List") : val[IS_SET_SENTINEL] ? printImmutableValues(val, config, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL] ? "OrderedSet" : "Set") : val[IS_STACK_SENTINEL] ? printImmutableValues(val, config, indentation, depth, refs2, printer, "Stack") : val[IS_SEQ_SENTINEL] ? printImmutableSeq(val, config, indentation, depth, refs2, printer) : printImmutableRecord(val, config, indentation, depth, refs2, printer);
      exports22.serialize = serialize;
      var test = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_react_is_production_min = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/cjs/react-is.production.min.js"(exports22) {
      "use strict";
      var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f2 = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
      u = Symbol.for("react.module.reference");
      function v(a) {
        if (typeof a == "object" && a !== null) {
          var r = a.$$typeof;
          switch (r) {
            case b:
              switch (a = a.type, a) {
                case d:
                case f2:
                case e:
                case m:
                case n:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case k:
                    case h:
                    case l:
                    case q:
                    case p:
                    case g:
                      return a;
                    default:
                      return r;
                  }
              }
            case c:
              return r;
          }
        }
      }
      exports22.ContextConsumer = h;
      exports22.ContextProvider = g;
      exports22.Element = b;
      exports22.ForwardRef = l;
      exports22.Fragment = d;
      exports22.Lazy = q;
      exports22.Memo = p;
      exports22.Portal = c;
      exports22.Profiler = f2;
      exports22.StrictMode = e;
      exports22.Suspense = m;
      exports22.SuspenseList = n;
      exports22.isAsyncMode = function() {
        return false;
      };
      exports22.isConcurrentMode = function() {
        return false;
      };
      exports22.isContextConsumer = function(a) {
        return v(a) === h;
      };
      exports22.isContextProvider = function(a) {
        return v(a) === g;
      };
      exports22.isElement = function(a) {
        return typeof a == "object" && a !== null && a.$$typeof === b;
      };
      exports22.isForwardRef = function(a) {
        return v(a) === l;
      };
      exports22.isFragment = function(a) {
        return v(a) === d;
      };
      exports22.isLazy = function(a) {
        return v(a) === q;
      };
      exports22.isMemo = function(a) {
        return v(a) === p;
      };
      exports22.isPortal = function(a) {
        return v(a) === c;
      };
      exports22.isProfiler = function(a) {
        return v(a) === f2;
      };
      exports22.isStrictMode = function(a) {
        return v(a) === e;
      };
      exports22.isSuspense = function(a) {
        return v(a) === m;
      };
      exports22.isSuspenseList = function(a) {
        return v(a) === n;
      };
      exports22.isValidElementType = function(a) {
        return typeof a == "string" || typeof a == "function" || a === d || a === f2 || a === e || a === m || a === n || a === t || typeof a == "object" && a !== null && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || a.getModuleId !== void 0);
      };
      exports22.typeOf = v;
    } });
    var require_react_is_development = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/cjs/react-is.development.js"(exports22) {
      "use strict";
      process.env.NODE_ENV !== "production" && function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, REACT_MODULE_REFERENCE;
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        function isValidElementType(type) {
          return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
        }
        function typeOf(object) {
          if (typeof object == "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        var ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, SuspenseList = REACT_SUSPENSE_LIST_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false, hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isConcurrentMode(object) {
          return hasWarnedAboutDeprecatedIsConcurrentMode || (hasWarnedAboutDeprecatedIsConcurrentMode = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports22.ContextConsumer = ContextConsumer, exports22.ContextProvider = ContextProvider, exports22.Element = Element2, exports22.ForwardRef = ForwardRef, exports22.Fragment = Fragment, exports22.Lazy = Lazy, exports22.Memo = Memo, exports22.Portal = Portal, exports22.Profiler = Profiler, exports22.StrictMode = StrictMode, exports22.Suspense = Suspense, exports22.SuspenseList = SuspenseList, exports22.isAsyncMode = isAsyncMode, exports22.isConcurrentMode = isConcurrentMode, exports22.isContextConsumer = isContextConsumer, exports22.isContextProvider = isContextProvider, exports22.isElement = isElement, exports22.isForwardRef = isForwardRef, exports22.isFragment = isFragment, exports22.isLazy = isLazy, exports22.isMemo = isMemo, exports22.isPortal = isPortal, exports22.isProfiler = isProfiler, exports22.isStrictMode = isStrictMode, exports22.isSuspense = isSuspense, exports22.isSuspenseList = isSuspenseList, exports22.isValidElementType = isValidElementType, exports22.typeOf = typeOf;
      }();
    } });
    var require_react_is = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/index.js"(exports22, module22) {
      "use strict";
      process.env.NODE_ENV === "production" ? module22.exports = require_react_is_production_min() : module22.exports = require_react_is_development();
    } });
    var require_ReactElement = __commonJS3({ "../../node_modules/pretty-format/build/plugins/ReactElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var ReactIs = _interopRequireWildcard(require_react_is()), _markup = require_markup();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap != "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule)
          return obj;
        if (obj === null || typeof obj != "object" && typeof obj != "function")
          return { default: obj };
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj))
          return cache.get(obj);
        var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key2 in obj)
          if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
            desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key2, desc) : newObj[key2] = obj[key2];
          }
        return newObj.default = obj, cache && cache.set(obj, newObj), newObj;
      }
      var getChildren = (arg, children2 = []) => (Array.isArray(arg) ? arg.forEach((item) => {
        getChildren(item, children2);
      }) : arg != null && arg !== false && children2.push(arg), children2), getType3 = (element) => {
        let type = element.type;
        if (typeof type == "string")
          return type;
        if (typeof type == "function")
          return type.displayName || type.name || "Unknown";
        if (ReactIs.isFragment(element))
          return "React.Fragment";
        if (ReactIs.isSuspense(element))
          return "React.Suspense";
        if (typeof type == "object" && type !== null) {
          if (ReactIs.isContextProvider(element))
            return "Context.Provider";
          if (ReactIs.isContextConsumer(element))
            return "Context.Consumer";
          if (ReactIs.isForwardRef(element)) {
            if (type.displayName)
              return type.displayName;
            let functionName = type.render.displayName || type.render.name || "";
            return functionName !== "" ? `ForwardRef(${functionName})` : "ForwardRef";
          }
          if (ReactIs.isMemo(element)) {
            let functionName = type.displayName || type.type.displayName || type.type.name || "";
            return functionName !== "" ? `Memo(${functionName})` : "Memo";
          }
        }
        return "UNDEFINED";
      }, getPropKeys = (element) => {
        let { props } = element;
        return Object.keys(props).filter((key2) => key2 !== "children" && props[key2] !== void 0).sort();
      }, serialize = (element, config, indentation, depth, refs2, printer) => ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(getType3(element), config) : (0, _markup.printElement)(getType3(element), (0, _markup.printProps)(getPropKeys(element), element.props, config, indentation + config.indent, depth, refs2, printer), (0, _markup.printChildren)(getChildren(element.props.children), config, indentation + config.indent, depth, refs2, printer), config, indentation);
      exports22.serialize = serialize;
      var test = (val) => val != null && ReactIs.isElement(val);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_ReactTestComponent = __commonJS3({ "../../node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup(), Symbol22 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, testSymbol = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("react.test.json") : 245830487, getPropKeys = (object) => {
        let { props } = object;
        return props ? Object.keys(props).filter((key2) => props[key2] !== void 0).sort() : [];
      }, serialize = (object, config, indentation, depth, refs2, printer) => ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs2, printer) : "", object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs2, printer) : "", config, indentation);
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === testSymbol;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_build = __commonJS3({ "../../node_modules/pretty-format/build/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = exports22.DEFAULT_OPTIONS = void 0;
      exports22.format = format3;
      exports22.plugins = void 0;
      var _ansiStyles = _interopRequireDefault(require_ansi_styles()), _collections = require_collections(), _AsymmetricMatcher = _interopRequireDefault(require_AsymmetricMatcher()), _DOMCollection = _interopRequireDefault(require_DOMCollection()), _DOMElement = _interopRequireDefault(require_DOMElement()), _Immutable = _interopRequireDefault(require_Immutable()), _ReactElement = _interopRequireDefault(require_ReactElement()), _ReactTestComponent = _interopRequireDefault(require_ReactTestComponent());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var toString22 = Object.prototype.toString, toISOString = Date.prototype.toISOString, errorToString = Error.prototype.toString, regExpToString = RegExp.prototype.toString, getConstructorName = (val) => typeof val.constructor == "function" && val.constructor.name || "Object", isWindow = (val) => typeof window < "u" && val === window, SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/, NEWLINE_REGEXP = /\n/gi, PrettyFormatPluginError = class extends Error {
        constructor(message, stack) {
          super(message), this.stack = stack, this.name = this.constructor.name;
        }
      };
      function isToStringedArrayType(toStringed) {
        return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
      }
      function printNumber(val) {
        return Object.is(val, -0) ? "-0" : String(val);
      }
      function printBigInt(val) {
        return `${val}n`;
      }
      function printFunction(val, printFunctionName) {
        return printFunctionName ? `[Function ${val.name || "anonymous"}]` : "[Function]";
      }
      function printSymbol(val) {
        return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
      }
      function printError(val) {
        return `[${errorToString.call(val)}]`;
      }
      function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
        if (val === true || val === false)
          return `${val}`;
        if (val === void 0)
          return "undefined";
        if (val === null)
          return "null";
        let typeOf = typeof val;
        if (typeOf === "number")
          return printNumber(val);
        if (typeOf === "bigint")
          return printBigInt(val);
        if (typeOf === "string")
          return escapeString ? `"${val.replace(/"|\\/g, "\\$&")}"` : `"${val}"`;
        if (typeOf === "function")
          return printFunction(val, printFunctionName);
        if (typeOf === "symbol")
          return printSymbol(val);
        let toStringed = toString22.call(val);
        return toStringed === "[object WeakMap]" ? "WeakMap {}" : toStringed === "[object WeakSet]" ? "WeakSet {}" : toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]" ? printFunction(val, printFunctionName) : toStringed === "[object Symbol]" ? printSymbol(val) : toStringed === "[object Date]" ? isNaN(+val) ? "Date { NaN }" : toISOString.call(val) : toStringed === "[object Error]" ? printError(val) : toStringed === "[object RegExp]" ? escapeRegex ? regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : regExpToString.call(val) : val instanceof Error ? printError(val) : null;
      }
      function printComplexValue(val, config, indentation, depth, refs2, hasCalledToJSON) {
        if (refs2.indexOf(val) !== -1)
          return "[Circular]";
        refs2 = refs2.slice(), refs2.push(val);
        let hitMaxDepth = ++depth > config.maxDepth, min = config.min;
        if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON == "function" && !hasCalledToJSON)
          return printer(val.toJSON(), config, indentation, depth, refs2, true);
        let toStringed = toString22.call(val);
        return toStringed === "[object Arguments]" ? hitMaxDepth ? "[Arguments]" : `${min ? "" : "Arguments "}[${(0, _collections.printListItems)(val, config, indentation, depth, refs2, printer)}]` : isToStringedArrayType(toStringed) ? hitMaxDepth ? `[${val.constructor.name}]` : `${min || !config.printBasicPrototype && val.constructor.name === "Array" ? "" : `${val.constructor.name} `}[${(0, _collections.printListItems)(val, config, indentation, depth, refs2, printer)}]` : toStringed === "[object Map]" ? hitMaxDepth ? "[Map]" : `Map {${(0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs2, printer, " => ")}}` : toStringed === "[object Set]" ? hitMaxDepth ? "[Set]" : `Set {${(0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs2, printer)}}` : hitMaxDepth || isWindow(val) ? `[${getConstructorName(val)}]` : `${min || !config.printBasicPrototype && getConstructorName(val) === "Object" ? "" : `${getConstructorName(val)} `}{${(0, _collections.printObjectProperties)(val, config, indentation, depth, refs2, printer)}}`;
      }
      function isNewPlugin(plugin) {
        return plugin.serialize != null;
      }
      function printPlugin(plugin, val, config, indentation, depth, refs2) {
        let printed;
        try {
          printed = isNewPlugin(plugin) ? plugin.serialize(val, config, indentation, depth, refs2, printer) : plugin.print(val, (valChild) => printer(valChild, config, indentation, depth, refs2), (str) => {
            let indentationNext = indentation + config.indent;
            return indentationNext + str.replace(NEWLINE_REGEXP, `
${indentationNext}`);
          }, { edgeSpacing: config.spacingOuter, min: config.min, spacing: config.spacingInner }, config.colors);
        } catch (error) {
          throw new PrettyFormatPluginError(error.message, error.stack);
        }
        if (typeof printed != "string")
          throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
        return printed;
      }
      function findPlugin(plugins4, val) {
        for (let p = 0; p < plugins4.length; p++)
          try {
            if (plugins4[p].test(val))
              return plugins4[p];
          } catch (error) {
            throw new PrettyFormatPluginError(error.message, error.stack);
          }
        return null;
      }
      function printer(val, config, indentation, depth, refs2, hasCalledToJSON) {
        let plugin = findPlugin(config.plugins, val);
        if (plugin !== null)
          return printPlugin(plugin, val, config, indentation, depth, refs2);
        let basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);
        return basicResult !== null ? basicResult : printComplexValue(val, config, indentation, depth, refs2, hasCalledToJSON);
      }
      var DEFAULT_THEME = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME), toOptionsSubtype = (options2) => options2, DEFAULT_OPTIONS = toOptionsSubtype({ callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, maxWidth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: DEFAULT_THEME });
      exports22.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
      function validateOptions(options2) {
        if (Object.keys(options2).forEach((key2) => {
          if (!Object.prototype.hasOwnProperty.call(DEFAULT_OPTIONS, key2))
            throw new Error(`pretty-format: Unknown option "${key2}".`);
        }), options2.min && options2.indent !== void 0 && options2.indent !== 0)
          throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
        if (options2.theme !== void 0) {
          if (options2.theme === null)
            throw new Error('pretty-format: Option "theme" must not be null.');
          if (typeof options2.theme != "object")
            throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options2.theme}".`);
        }
      }
      var getColorsHighlight = (options2) => DEFAULT_THEME_KEYS.reduce((colors, key2) => {
        let value2 = options2.theme && options2.theme[key2] !== void 0 ? options2.theme[key2] : DEFAULT_THEME[key2], color = value2 && _ansiStyles.default[value2];
        if (color && typeof color.close == "string" && typeof color.open == "string")
          colors[key2] = color;
        else
          throw new Error(`pretty-format: Option "theme" has a key "${key2}" whose value "${value2}" is undefined in ansi-styles.`);
        return colors;
      }, /* @__PURE__ */ Object.create(null)), getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key2) => (colors[key2] = { close: "", open: "" }, colors), /* @__PURE__ */ Object.create(null)), getPrintFunctionName = (options2) => (options2 == null ? void 0 : options2.printFunctionName) ?? DEFAULT_OPTIONS.printFunctionName, getEscapeRegex = (options2) => (options2 == null ? void 0 : options2.escapeRegex) ?? DEFAULT_OPTIONS.escapeRegex, getEscapeString = (options2) => (options2 == null ? void 0 : options2.escapeString) ?? DEFAULT_OPTIONS.escapeString, getConfig = (options2) => ({ callToJSON: (options2 == null ? void 0 : options2.callToJSON) ?? DEFAULT_OPTIONS.callToJSON, colors: (options2 == null ? void 0 : options2.highlight) ? getColorsHighlight(options2) : getColorsEmpty(), compareKeys: typeof (options2 == null ? void 0 : options2.compareKeys) == "function" || (options2 == null ? void 0 : options2.compareKeys) === null ? options2.compareKeys : DEFAULT_OPTIONS.compareKeys, escapeRegex: getEscapeRegex(options2), escapeString: getEscapeString(options2), indent: (options2 == null ? void 0 : options2.min) ? "" : createIndent((options2 == null ? void 0 : options2.indent) ?? DEFAULT_OPTIONS.indent), maxDepth: (options2 == null ? void 0 : options2.maxDepth) ?? DEFAULT_OPTIONS.maxDepth, maxWidth: (options2 == null ? void 0 : options2.maxWidth) ?? DEFAULT_OPTIONS.maxWidth, min: (options2 == null ? void 0 : options2.min) ?? DEFAULT_OPTIONS.min, plugins: (options2 == null ? void 0 : options2.plugins) ?? DEFAULT_OPTIONS.plugins, printBasicPrototype: (options2 == null ? void 0 : options2.printBasicPrototype) ?? true, printFunctionName: getPrintFunctionName(options2), spacingInner: (options2 == null ? void 0 : options2.min) ? " " : `
`, spacingOuter: (options2 == null ? void 0 : options2.min) ? "" : `
` });
      function createIndent(indent) {
        return new Array(indent + 1).join(" ");
      }
      function format3(val, options2) {
        if (options2 && (validateOptions(options2), options2.plugins)) {
          let plugin = findPlugin(options2.plugins, val);
          if (plugin !== null)
            return printPlugin(plugin, val, getConfig(options2), "", 0, []);
        }
        let basicResult = printBasicValue(val, getPrintFunctionName(options2), getEscapeRegex(options2), getEscapeString(options2));
        return basicResult !== null ? basicResult : printComplexValue(val, getConfig(options2), "", 0, []);
      }
      var plugins3 = { AsymmetricMatcher: _AsymmetricMatcher.default, DOMCollection: _DOMCollection.default, DOMElement: _DOMElement.default, Immutable: _Immutable.default, ReactElement: _ReactElement.default, ReactTestComponent: _ReactTestComponent.default };
      exports22.plugins = plugins3;
      var _default = format3;
      exports22.default = _default;
    } });
    var require_build2 = __commonJS3({ "../../node_modules/diff-sequences/build/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = diffSequence;
      var pkg = "diff-sequences", NOT_YET_SET = 0, countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {
        let nCommon = 0;
        for (; aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex); )
          aIndex += 1, bIndex += 1, nCommon += 1;
        return nCommon;
      }, countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {
        let nCommon = 0;
        for (; aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex); )
          aIndex -= 1, bIndex -= 1, nCommon += 1;
        return nCommon;
      }, extendPathsF = (d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF) => {
        let iF = 0, kF = -d, aFirst = aIndexesF[iF], aIndexPrev1 = aFirst;
        aIndexesF[iF] += countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
        let nF = d < iMaxF ? d : iMaxF;
        for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
          if (iF !== d && aIndexPrev1 < aIndexesF[iF])
            aFirst = aIndexesF[iF];
          else if (aFirst = aIndexPrev1 + 1, aEnd <= aFirst)
            return iF - 1;
          aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aFirst + countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
        }
        return iMaxF;
      }, extendPathsR = (d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR) => {
        let iR = 0, kR = d, aFirst = aIndexesR[iR], aIndexPrev1 = aFirst;
        aIndexesR[iR] -= countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
        let nR = d < iMaxR ? d : iMaxR;
        for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
          if (iR !== d && aIndexesR[iR] < aIndexPrev1)
            aFirst = aIndexesR[iR];
          else if (aFirst = aIndexPrev1 - 1, aFirst < aStart)
            return iR - 1;
          aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aFirst - countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
        }
        return iMaxR;
      }, extendOverlappablePathsF = (d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
        let bF = bStart - aStart, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapF = -baDeltaLength - (d - 1), kMaxOverlapF = -baDeltaLength + (d - 1), aIndexPrev1 = NOT_YET_SET, nF = d < iMaxF ? d : iMaxF;
        for (let iF = 0, kF = -d; iF <= nF; iF += 1, kF += 2) {
          let insert = iF === 0 || iF !== d && aIndexPrev1 < aIndexesF[iF], aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev + 1, bFirst = bF + aFirst - kF, nCommonF = countCommonItemsF(aFirst + 1, aEnd, bFirst + 1, bEnd, isCommon), aLast = aFirst + nCommonF;
          if (aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aLast, kMinOverlapF <= kF && kF <= kMaxOverlapF) {
            let iR = (d - 1 - (kF + baDeltaLength)) / 2;
            if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
              let bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1), nCommonR = countCommonItemsR(aStart, aLastPrev, bStart, bLastPrev, isCommon), aIndexPrevFirst = aLastPrev - nCommonR, bIndexPrevFirst = bLastPrev - nCommonR, aEndPreceding = aIndexPrevFirst + 1, bEndPreceding = bIndexPrevFirst + 1;
              division.nChangePreceding = d - 1, d - 1 === aEndPreceding + bEndPreceding - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aEndPreceding, division.bEndPreceding = bEndPreceding), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aEndPreceding, division.bCommonPreceding = bEndPreceding), division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aFirst + 1, division.bCommonFollowing = bFirst + 1);
              let aStartFollowing = aLast + 1, bStartFollowing = bFirst + nCommonF + 1;
              return division.nChangeFollowing = d - 1, d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing), true;
            }
          }
        }
        return false;
      }, extendOverlappablePathsR = (d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
        let bR = bEnd - aEnd, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapR = baDeltaLength - d, kMaxOverlapR = baDeltaLength + d, aIndexPrev1 = NOT_YET_SET, nR = d < iMaxR ? d : iMaxR;
        for (let iR = 0, kR = d; iR <= nR; iR += 1, kR -= 2) {
          let insert = iR === 0 || iR !== d && aIndexesR[iR] < aIndexPrev1, aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev - 1, bFirst = bR + aFirst - kR, nCommonR = countCommonItemsR(aStart, aFirst - 1, bStart, bFirst - 1, isCommon), aLast = aFirst - nCommonR;
          if (aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aLast, kMinOverlapR <= kR && kR <= kMaxOverlapR) {
            let iF = (d + (kR - baDeltaLength)) / 2;
            if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
              let bLast = bFirst - nCommonR;
              if (division.nChangePreceding = d, d === aLast + bLast - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aLast, division.bEndPreceding = bLast), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aLast, division.bCommonPreceding = bLast), division.nChangeFollowing = d - 1, d === 1)
                division.nCommonFollowing = 0, division.aStartFollowing = aEnd, division.bStartFollowing = bEnd;
              else {
                let bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1), nCommonF = countCommonItemsF(aLastPrev, aEnd, bLastPrev, bEnd, isCommon);
                division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aLastPrev, division.bCommonFollowing = bLastPrev);
                let aStartFollowing = aLastPrev + nCommonF, bStartFollowing = bLastPrev + nCommonF;
                d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing);
              }
              return true;
            }
          }
        }
        return false;
      }, divide = (nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division) => {
        let bF = bStart - aStart, bR = bEnd - aEnd, aLength = aEnd - aStart, bLength = bEnd - bStart, baDeltaLength = bLength - aLength, iMaxF = aLength, iMaxR = aLength;
        if (aIndexesF[0] = aStart - 1, aIndexesR[0] = aEnd, baDeltaLength % 2 === 0) {
          let dMin = (nChange || baDeltaLength) / 2, dMax = (aLength + bLength) / 2;
          for (let d = 1; d <= dMax; d += 1)
            if (iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d < dMin)
              iMaxR = extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
            else if (extendOverlappablePathsR(d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division))
              return;
        } else {
          let dMin = ((nChange || baDeltaLength) + 1) / 2, dMax = (aLength + bLength + 1) / 2, d = 1;
          for (iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d += 1; d <= dMax; d += 1)
            if (iMaxR = extendPathsR(d - 1, aStart, bStart, bR, isCommon, aIndexesR, iMaxR), d < dMin)
              iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
            else if (extendOverlappablePathsF(d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division))
              return;
        }
        throw new Error(`${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`);
      }, findSubsequences = (nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division) => {
        if (bEnd - bStart < aEnd - aStart) {
          if (transposed = !transposed, transposed && callbacks.length === 1) {
            let { foundSubsequence: foundSubsequence2, isCommon: isCommon2 } = callbacks[0];
            callbacks[1] = { foundSubsequence: (nCommon, bCommon, aCommon) => {
              foundSubsequence2(nCommon, aCommon, bCommon);
            }, isCommon: (bIndex, aIndex) => isCommon2(aIndex, bIndex) };
          }
          let tStart = aStart, tEnd = aEnd;
          aStart = bStart, aEnd = bEnd, bStart = tStart, bEnd = tEnd;
        }
        let { foundSubsequence, isCommon } = callbacks[transposed ? 1 : 0];
        divide(nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division);
        let { nChangePreceding, aEndPreceding, bEndPreceding, nCommonPreceding, aCommonPreceding, bCommonPreceding, nCommonFollowing, aCommonFollowing, bCommonFollowing, nChangeFollowing, aStartFollowing, bStartFollowing } = division;
        aStart < aEndPreceding && bStart < bEndPreceding && findSubsequences(nChangePreceding, aStart, aEndPreceding, bStart, bEndPreceding, transposed, callbacks, aIndexesF, aIndexesR, division), nCommonPreceding !== 0 && foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding), nCommonFollowing !== 0 && foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing), aStartFollowing < aEnd && bStartFollowing < bEnd && findSubsequences(nChangeFollowing, aStartFollowing, aEnd, bStartFollowing, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division);
      }, validateLength = (name2, arg) => {
        if (typeof arg != "number")
          throw new TypeError(`${pkg}: ${name2} typeof ${typeof arg} is not a number`);
        if (!Number.isSafeInteger(arg))
          throw new RangeError(`${pkg}: ${name2} value ${arg} is not a safe integer`);
        if (arg < 0)
          throw new RangeError(`${pkg}: ${name2} value ${arg} is a negative integer`);
      }, validateCallback = (name2, arg) => {
        let type = typeof arg;
        if (type !== "function")
          throw new TypeError(`${pkg}: ${name2} typeof ${type} is not a function`);
      };
      function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
        validateLength("aLength", aLength), validateLength("bLength", bLength), validateCallback("isCommon", isCommon), validateCallback("foundSubsequence", foundSubsequence);
        let nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
        if (nCommonF !== 0 && foundSubsequence(nCommonF, 0, 0), aLength !== nCommonF || bLength !== nCommonF) {
          let aStart = nCommonF, bStart = nCommonF, nCommonR = countCommonItemsR(aStart, aLength - 1, bStart, bLength - 1, isCommon), aEnd = aLength - nCommonR, bEnd = bLength - nCommonR, nCommonFR = nCommonF + nCommonR;
          aLength !== nCommonFR && bLength !== nCommonFR && findSubsequences(0, aStart, aEnd, bStart, bEnd, false, [{ foundSubsequence, isCommon }], [NOT_YET_SET], [NOT_YET_SET], { aCommonFollowing: NOT_YET_SET, aCommonPreceding: NOT_YET_SET, aEndPreceding: NOT_YET_SET, aStartFollowing: NOT_YET_SET, bCommonFollowing: NOT_YET_SET, bCommonPreceding: NOT_YET_SET, bEndPreceding: NOT_YET_SET, bStartFollowing: NOT_YET_SET, nChangeFollowing: NOT_YET_SET, nChangePreceding: NOT_YET_SET, nCommonFollowing: NOT_YET_SET, nCommonPreceding: NOT_YET_SET }), nCommonR !== 0 && foundSubsequence(nCommonR, aEnd, bEnd);
        }
      }
    } });
    var require_get_func_name = __commonJS3({ "../../node_modules/get-func-name/index.js"(exports22, module22) {
      "use strict";
      var toString22 = Function.prototype.toString, functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/, maxFunctionSourceLength = 512;
      function getFuncName3(aFunc) {
        if (typeof aFunc != "function")
          return null;
        var name2 = "";
        if (typeof Function.prototype.name > "u" && typeof aFunc.name > "u") {
          var functionSource = toString22.call(aFunc);
          if (functionSource.indexOf("(") > maxFunctionSourceLength)
            return name2;
          var match = functionSource.match(functionNameMatch);
          match && (name2 = match[1]);
        } else
          name2 = aFunc.name;
        return name2;
      }
      module22.exports = getFuncName3;
    } });
    var src_exports = {};
    __export2(src_exports, { CallStates: () => CallStates, EVENTS: () => EVENTS, instrument: () => instrument });
    module2.exports = __toCommonJS2(src_exports);
    var import_preview_api = require_dist7();
    var import_client_logger = require_dist3();
    var import_core_events = require_dist2();
    var import_global = require_dist();
    var import_pretty_format = __toESM3(require_build(), 1);
    var diff$1 = __toESM3(require_build2(), 1);
    var SAFE_TIMERS_SYMBOL = Symbol("vitest:SAFE_TIMERS");
    var SAFE_COLORS_SYMBOL = Symbol("vitest:SAFE_COLORS");
    var colorsMap = { bold: ["\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"], dim: ["\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"], italic: ["\x1B[3m", "\x1B[23m"], underline: ["\x1B[4m", "\x1B[24m"], inverse: ["\x1B[7m", "\x1B[27m"], hidden: ["\x1B[8m", "\x1B[28m"], strikethrough: ["\x1B[9m", "\x1B[29m"], black: ["\x1B[30m", "\x1B[39m"], red: ["\x1B[31m", "\x1B[39m"], green: ["\x1B[32m", "\x1B[39m"], yellow: ["\x1B[33m", "\x1B[39m"], blue: ["\x1B[34m", "\x1B[39m"], magenta: ["\x1B[35m", "\x1B[39m"], cyan: ["\x1B[36m", "\x1B[39m"], white: ["\x1B[37m", "\x1B[39m"], gray: ["\x1B[90m", "\x1B[39m"], bgBlack: ["\x1B[40m", "\x1B[49m"], bgRed: ["\x1B[41m", "\x1B[49m"], bgGreen: ["\x1B[42m", "\x1B[49m"], bgYellow: ["\x1B[43m", "\x1B[49m"], bgBlue: ["\x1B[44m", "\x1B[49m"], bgMagenta: ["\x1B[45m", "\x1B[49m"], bgCyan: ["\x1B[46m", "\x1B[49m"], bgWhite: ["\x1B[47m", "\x1B[49m"] };
    var colorsEntries = Object.entries(colorsMap);
    function string(str) {
      return String(str);
    }
    string.open = "";
    string.close = "";
    var defaultColors = colorsEntries.reduce((acc, [key2]) => (acc[key2] = string, acc), { isColorSupported: false });
    function getColors() {
      return globalThis[SAFE_COLORS_SYMBOL] || defaultColors;
    }
    function getType(value2) {
      if (value2 === void 0)
        return "undefined";
      if (value2 === null)
        return "null";
      if (Array.isArray(value2))
        return "array";
      if (typeof value2 == "boolean")
        return "boolean";
      if (typeof value2 == "function")
        return "function";
      if (typeof value2 == "number")
        return "number";
      if (typeof value2 == "string")
        return "string";
      if (typeof value2 == "bigint")
        return "bigint";
      if (typeof value2 == "object") {
        if (value2 != null) {
          if (value2.constructor === RegExp)
            return "regexp";
          if (value2.constructor === Map)
            return "map";
          if (value2.constructor === Set)
            return "set";
          if (value2.constructor === Date)
            return "date";
        }
        return "object";
      } else if (typeof value2 == "symbol")
        return "symbol";
      throw new Error(`value of unknown type: ${value2}`);
    }
    var DIFF_DELETE = -1;
    var DIFF_INSERT = 1;
    var DIFF_EQUAL = 0;
    var Diff = class {
      0;
      1;
      constructor(op, text) {
        this[0] = op, this[1] = text;
      }
    };
    var NO_DIFF_MESSAGE = "Compared values have no visual difference.";
    var SIMILAR_MESSAGE = "Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead.";
    function formatTrailingSpaces(line, trailingSpaceFormatter) {
      return line.replace(/\s+$/, (match) => trailingSpaceFormatter(match));
    }
    function printDiffLine(line, isFirstOrLast, color, indicator, trailingSpaceFormatter, emptyFirstOrLastLinePlaceholder) {
      return line.length !== 0 ? color(`${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`) : indicator !== " " ? color(indicator) : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0 ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`) : "";
    }
    function printDeleteLine(line, isFirstOrLast, { aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function printInsertLine(line, isFirstOrLast, { bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function printCommonLine(line, isFirstOrLast, { commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function createPatchMark(aStart, aEnd, bStart, bEnd, { patchColor }) {
      return patchColor(`@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`);
    }
    function joinAlignedDiffsNoExpand(diffs, options2) {
      let iLength = diffs.length, nContextLines = options2.contextLines, nContextLines2 = nContextLines + nContextLines, jLength = iLength, hasExcessAtStartOrEnd = false, nExcessesBetweenChanges = 0, i = 0;
      for (; i !== iLength; ) {
        let iStart = i;
        for (; i !== iLength && diffs[i][0] === DIFF_EQUAL; )
          i += 1;
        if (iStart !== i)
          if (iStart === 0)
            i > nContextLines && (jLength -= i - nContextLines, hasExcessAtStartOrEnd = true);
          else if (i === iLength) {
            let n = i - iStart;
            n > nContextLines && (jLength -= n - nContextLines, hasExcessAtStartOrEnd = true);
          } else {
            let n = i - iStart;
            n > nContextLines2 && (jLength -= n - nContextLines2, nExcessesBetweenChanges += 1);
          }
        for (; i !== iLength && diffs[i][0] !== DIFF_EQUAL; )
          i += 1;
      }
      let hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;
      nExcessesBetweenChanges !== 0 ? jLength += nExcessesBetweenChanges + 1 : hasExcessAtStartOrEnd && (jLength += 1);
      let jLast = jLength - 1, lines = [], jPatchMark = 0;
      hasPatch && lines.push("");
      let aStart = 0, bStart = 0, aEnd = 0, bEnd = 0, pushCommonLine = (line) => {
        let j = lines.length;
        lines.push(printCommonLine(line, j === 0 || j === jLast, options2)), aEnd += 1, bEnd += 1;
      }, pushDeleteLine = (line) => {
        let j = lines.length;
        lines.push(printDeleteLine(line, j === 0 || j === jLast, options2)), aEnd += 1;
      }, pushInsertLine = (line) => {
        let j = lines.length;
        lines.push(printInsertLine(line, j === 0 || j === jLast, options2)), bEnd += 1;
      };
      for (i = 0; i !== iLength; ) {
        let iStart = i;
        for (; i !== iLength && diffs[i][0] === DIFF_EQUAL; )
          i += 1;
        if (iStart !== i)
          if (iStart === 0) {
            i > nContextLines && (iStart = i - nContextLines, aStart = iStart, bStart = iStart, aEnd = aStart, bEnd = bStart);
            for (let iCommon = iStart; iCommon !== i; iCommon += 1)
              pushCommonLine(diffs[iCommon][1]);
          } else if (i === iLength) {
            let iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;
            for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1)
              pushCommonLine(diffs[iCommon][1]);
          } else {
            let nCommon = i - iStart;
            if (nCommon > nContextLines2) {
              let iEnd = iStart + nContextLines;
              for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
              lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options2), jPatchMark = lines.length, lines.push("");
              let nOmit = nCommon - nContextLines2;
              aStart = aEnd + nOmit, bStart = bEnd + nOmit, aEnd = aStart, bEnd = bStart;
              for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
            } else
              for (let iCommon = iStart; iCommon !== i; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
          }
        for (; i !== iLength && diffs[i][0] === DIFF_DELETE; )
          pushDeleteLine(diffs[i][1]), i += 1;
        for (; i !== iLength && diffs[i][0] === DIFF_INSERT; )
          pushInsertLine(diffs[i][1]), i += 1;
      }
      return hasPatch && (lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options2)), lines.join(`
`);
    }
    function joinAlignedDiffsExpand(diffs, options2) {
      return diffs.map((diff2, i, diffs2) => {
        let line = diff2[1], isFirstOrLast = i === 0 || i === diffs2.length - 1;
        switch (diff2[0]) {
          case DIFF_DELETE:
            return printDeleteLine(line, isFirstOrLast, options2);
          case DIFF_INSERT:
            return printInsertLine(line, isFirstOrLast, options2);
          default:
            return printCommonLine(line, isFirstOrLast, options2);
        }
      }).join(`
`);
    }
    var noColor = (string2) => string2;
    var DIFF_CONTEXT_DEFAULT = 5;
    function getDefaultOptions() {
      let c = getColors();
      return { aAnnotation: "Expected", aColor: c.green, aIndicator: "-", bAnnotation: "Received", bColor: c.red, bIndicator: "+", changeColor: c.inverse, changeLineTrailingSpaceColor: noColor, commonColor: c.dim, commonIndicator: " ", commonLineTrailingSpaceColor: noColor, compareKeys: void 0, contextLines: DIFF_CONTEXT_DEFAULT, emptyFirstOrLastLinePlaceholder: "", expand: true, includeChangeCounts: false, omitAnnotationLines: false, patchColor: c.yellow };
    }
    function getCompareKeys(compareKeys) {
      return compareKeys && typeof compareKeys == "function" ? compareKeys : void 0;
    }
    function getContextLines(contextLines) {
      return typeof contextLines == "number" && Number.isSafeInteger(contextLines) && contextLines >= 0 ? contextLines : DIFF_CONTEXT_DEFAULT;
    }
    function normalizeDiffOptions(options2 = {}) {
      return { ...getDefaultOptions(), ...options2, compareKeys: getCompareKeys(options2.compareKeys), contextLines: getContextLines(options2.contextLines) };
    }
    function isEmptyString(lines) {
      return lines.length === 1 && lines[0].length === 0;
    }
    function countChanges(diffs) {
      let a = 0, b = 0;
      return diffs.forEach((diff2) => {
        switch (diff2[0]) {
          case DIFF_DELETE:
            a += 1;
            break;
          case DIFF_INSERT:
            b += 1;
            break;
        }
      }), { a, b };
    }
    function printAnnotation({ aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator, includeChangeCounts, omitAnnotationLines }, changeCounts) {
      if (omitAnnotationLines)
        return "";
      let aRest = "", bRest = "";
      if (includeChangeCounts) {
        let aCount = String(changeCounts.a), bCount = String(changeCounts.b), baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length, aAnnotationPadding = " ".repeat(Math.max(0, baAnnotationLengthDiff)), bAnnotationPadding = " ".repeat(Math.max(0, -baAnnotationLengthDiff)), baCountLengthDiff = bCount.length - aCount.length, aCountPadding = " ".repeat(Math.max(0, baCountLengthDiff)), bCountPadding = " ".repeat(Math.max(0, -baCountLengthDiff));
        aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`, bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;
      }
      let a = `${aIndicator} ${aAnnotation}${aRest}`, b = `${bIndicator} ${bAnnotation}${bRest}`;
      return `${aColor(a)}
${bColor(b)}

`;
    }
    function printDiffLines(diffs, options2) {
      return printAnnotation(options2, countChanges(diffs)) + (options2.expand ? joinAlignedDiffsExpand(diffs, options2) : joinAlignedDiffsNoExpand(diffs, options2));
    }
    function diffLinesUnified(aLines, bLines, options2) {
      return printDiffLines(diffLinesRaw(isEmptyString(aLines) ? [] : aLines, isEmptyString(bLines) ? [] : bLines), normalizeDiffOptions(options2));
    }
    function diffLinesUnified2(aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options2) {
      if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare) && (aLinesDisplay = [], aLinesCompare = []), isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare) && (bLinesDisplay = [], bLinesCompare = []), aLinesDisplay.length !== aLinesCompare.length || bLinesDisplay.length !== bLinesCompare.length)
        return diffLinesUnified(aLinesDisplay, bLinesDisplay, options2);
      let diffs = diffLinesRaw(aLinesCompare, bLinesCompare), aIndex = 0, bIndex = 0;
      return diffs.forEach((diff2) => {
        switch (diff2[0]) {
          case DIFF_DELETE:
            diff2[1] = aLinesDisplay[aIndex], aIndex += 1;
            break;
          case DIFF_INSERT:
            diff2[1] = bLinesDisplay[bIndex], bIndex += 1;
            break;
          default:
            diff2[1] = bLinesDisplay[bIndex], aIndex += 1, bIndex += 1;
        }
      }), printDiffLines(diffs, normalizeDiffOptions(options2));
    }
    function diffLinesRaw(aLines, bLines) {
      let aLength = aLines.length, bLength = bLines.length, isCommon = (aIndex2, bIndex2) => aLines[aIndex2] === bLines[bIndex2], diffs = [], aIndex = 0, bIndex = 0, foundSubsequence = (nCommon, aCommon, bCommon) => {
        for (; aIndex !== aCommon; aIndex += 1)
          diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
        for (; bIndex !== bCommon; bIndex += 1)
          diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
        for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1)
          diffs.push(new Diff(DIFF_EQUAL, bLines[bIndex]));
      };
      for ((diff$1.default.default || diff$1.default)(aLength, bLength, isCommon, foundSubsequence); aIndex !== aLength; aIndex += 1)
        diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
      for (; bIndex !== bLength; bIndex += 1)
        diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
      return diffs;
    }
    function getCommonMessage(message, options2) {
      let { commonColor } = normalizeDiffOptions(options2);
      return commonColor(message);
    }
    var { AsymmetricMatcher, DOMCollection, DOMElement, Immutable, ReactElement, ReactTestComponent } = import_pretty_format.plugins;
    var PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];
    var FORMAT_OPTIONS = { plugins: PLUGINS };
    var FALLBACK_FORMAT_OPTIONS = { callToJSON: false, maxDepth: 10, plugins: PLUGINS };
    function diff(a, b, options2) {
      if (Object.is(a, b))
        return "";
      let aType = getType(a), expectedType = aType, omitDifference = false;
      if (aType === "object" && typeof a.asymmetricMatch == "function") {
        if (a.$$typeof !== Symbol.for("jest.asymmetricMatcher") || typeof a.getExpectedType != "function")
          return null;
        expectedType = a.getExpectedType(), omitDifference = expectedType === "string";
      }
      if (expectedType !== getType(b)) {
        let { aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator } = normalizeDiffOptions(options2), formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options2), aDisplay = (0, import_pretty_format.format)(a, formatOptions), bDisplay = (0, import_pretty_format.format)(b, formatOptions), aDiff = `${aColor(`${aIndicator} ${aAnnotation}:`)} 
${aDisplay}`, bDiff = `${bColor(`${bIndicator} ${bAnnotation}:`)} 
${bDisplay}`;
        return `${aDiff}

${bDiff}`;
      }
      if (omitDifference)
        return null;
      switch (aType) {
        case "string":
          return diffLinesUnified(a.split(`
`), b.split(`
`), options2);
        case "boolean":
        case "number":
          return comparePrimitive(a, b, options2);
        case "map":
          return compareObjects(sortMap(a), sortMap(b), options2);
        case "set":
          return compareObjects(sortSet(a), sortSet(b), options2);
        default:
          return compareObjects(a, b, options2);
      }
    }
    function comparePrimitive(a, b, options2) {
      let aFormat = (0, import_pretty_format.format)(a, FORMAT_OPTIONS), bFormat = (0, import_pretty_format.format)(b, FORMAT_OPTIONS);
      return aFormat === bFormat ? "" : diffLinesUnified(aFormat.split(`
`), bFormat.split(`
`), options2);
    }
    function sortMap(map) {
      return new Map(Array.from(map.entries()).sort());
    }
    function sortSet(set2) {
      return new Set(Array.from(set2.values()).sort());
    }
    function compareObjects(a, b, options2) {
      let difference, hasThrown = false;
      try {
        let formatOptions = getFormatOptions(FORMAT_OPTIONS, options2);
        difference = getObjectsDifference(a, b, formatOptions, options2);
      } catch {
        hasThrown = true;
      }
      let noDiffMessage = getCommonMessage(NO_DIFF_MESSAGE, options2);
      if (difference === void 0 || difference === noDiffMessage) {
        let formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options2);
        difference = getObjectsDifference(a, b, formatOptions, options2), difference !== noDiffMessage && !hasThrown && (difference = `${getCommonMessage(SIMILAR_MESSAGE, options2)}

${difference}`);
      }
      return difference;
    }
    function getFormatOptions(formatOptions, options2) {
      let { compareKeys } = normalizeDiffOptions(options2);
      return { ...formatOptions, compareKeys };
    }
    function getObjectsDifference(a, b, formatOptions, options2) {
      let formatOptionsZeroIndent = { ...formatOptions, indent: 0 }, aCompare = (0, import_pretty_format.format)(a, formatOptionsZeroIndent), bCompare = (0, import_pretty_format.format)(b, formatOptionsZeroIndent);
      if (aCompare === bCompare)
        return getCommonMessage(NO_DIFF_MESSAGE, options2);
      {
        let aDisplay = (0, import_pretty_format.format)(a, formatOptions), bDisplay = (0, import_pretty_format.format)(b, formatOptions);
        return diffLinesUnified2(aDisplay.split(`
`), bDisplay.split(`
`), aCompare.split(`
`), bCompare.split(`
`), options2);
      }
    }
    var import_pretty_format2 = __toESM3(require_build(), 1);
    var ansiColors = { bold: ["1", "22"], dim: ["2", "22"], italic: ["3", "23"], underline: ["4", "24"], inverse: ["7", "27"], hidden: ["8", "28"], strike: ["9", "29"], black: ["30", "39"], red: ["31", "39"], green: ["32", "39"], yellow: ["33", "39"], blue: ["34", "39"], magenta: ["35", "39"], cyan: ["36", "39"], white: ["37", "39"], brightblack: ["30;1", "39"], brightred: ["31;1", "39"], brightgreen: ["32;1", "39"], brightyellow: ["33;1", "39"], brightblue: ["34;1", "39"], brightmagenta: ["35;1", "39"], brightcyan: ["36;1", "39"], brightwhite: ["37;1", "39"], grey: ["90", "39"] };
    var styles = { special: "cyan", number: "yellow", bigint: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", symbol: "green", date: "magenta", regexp: "red" };
    var truncator = "\u2026";
    function colorise(value2, styleType) {
      let color = ansiColors[styles[styleType]] || ansiColors[styleType];
      return color ? `\x1B[${color[0]}m${String(value2)}\x1B[${color[1]}m` : String(value2);
    }
    function normaliseOptions({ showHidden = false, depth = 2, colors = false, customInspect = true, showProxy = false, maxArrayLength = 1 / 0, breakLength = 1 / 0, seen = [], truncate: truncate2 = 1 / 0, stylize = String } = {}) {
      let options2 = { showHidden: !!showHidden, depth: Number(depth), colors: !!colors, customInspect: !!customInspect, showProxy: !!showProxy, maxArrayLength: Number(maxArrayLength), breakLength: Number(breakLength), truncate: Number(truncate2), seen, stylize };
      return options2.colors && (options2.stylize = colorise), options2;
    }
    function truncate(string2, length, tail = truncator) {
      string2 = String(string2);
      let tailLength = tail.length, stringLength = string2.length;
      return tailLength > length && stringLength > tailLength ? tail : stringLength > length && stringLength > tailLength ? `${string2.slice(0, length - tailLength)}${tail}` : string2;
    }
    function inspectList(list, options2, inspectItem, separator = ", ") {
      inspectItem = inspectItem || options2.inspect;
      let size = list.length;
      if (size === 0)
        return "";
      let originalLength = options2.truncate, output = "", peek = "", truncated = "";
      for (let i = 0; i < size; i += 1) {
        let last = i + 1 === list.length, secondToLast = i + 2 === list.length;
        truncated = `${truncator}(${list.length - i})`;
        let value2 = list[i];
        options2.truncate = originalLength - output.length - (last ? 0 : separator.length);
        let string2 = peek || inspectItem(value2, options2) + (last ? "" : separator), nextLength = output.length + string2.length, truncatedLength = nextLength + truncated.length;
        if (last && nextLength > originalLength && output.length + truncated.length <= originalLength || !last && !secondToLast && truncatedLength > originalLength || (peek = last ? "" : inspectItem(list[i + 1], options2) + (secondToLast ? "" : separator), !last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength))
          break;
        if (output += string2, !last && !secondToLast && nextLength + peek.length >= originalLength) {
          truncated = `${truncator}(${list.length - i - 1})`;
          break;
        }
        truncated = "";
      }
      return `${output}${truncated}`;
    }
    function quoteComplexKey(key2) {
      return key2.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/) ? key2 : JSON.stringify(key2).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
    }
    function inspectProperty([key2, value2], options2) {
      return options2.truncate -= 2, typeof key2 == "string" ? key2 = quoteComplexKey(key2) : typeof key2 != "number" && (key2 = `[${options2.inspect(key2, options2)}]`), options2.truncate -= key2.length, value2 = options2.inspect(value2, options2), `${key2}: ${value2}`;
    }
    function inspectArray(array, options2) {
      let nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length)
        return "[]";
      options2.truncate -= 4;
      let listContents = inspectList(array, options2);
      options2.truncate -= listContents.length;
      let propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map((key2) => [key2, array[key2]]), options2, inspectProperty)), `[ ${listContents}${propertyContents ? `, ${propertyContents}` : ""} ]`;
    }
    var import_get_func_name = __toESM3(require_get_func_name());
    var getArrayName = (array) => typeof Buffer == "function" && array instanceof Buffer ? "Buffer" : array[Symbol.toStringTag] ? array[Symbol.toStringTag] : (0, import_get_func_name.default)(array.constructor);
    function inspectTypedArray(array, options2) {
      let name2 = getArrayName(array);
      options2.truncate -= name2.length + 4;
      let nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length)
        return `${name2}[]`;
      let output = "";
      for (let i = 0; i < array.length; i++) {
        let string2 = `${options2.stylize(truncate(array[i], options2.truncate), "number")}${i === array.length - 1 ? "" : ", "}`;
        if (options2.truncate -= string2.length, array[i] !== array.length && options2.truncate <= 3) {
          output += `${truncator}(${array.length - array[i] + 1})`;
          break;
        }
        output += string2;
      }
      let propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map((key2) => [key2, array[key2]]), options2, inspectProperty)), `${name2}[ ${output}${propertyContents ? `, ${propertyContents}` : ""} ]`;
    }
    function inspectDate(dateObject, options2) {
      let stringRepresentation = dateObject.toJSON();
      if (stringRepresentation === null)
        return "Invalid Date";
      let split = stringRepresentation.split("T"), date = split[0];
      return options2.stylize(`${date}T${truncate(split[1], options2.truncate - date.length - 1)}`, "date");
    }
    var import_get_func_name2 = __toESM3(require_get_func_name());
    function inspectFunction(func, options2) {
      let name2 = (0, import_get_func_name2.default)(func);
      return name2 ? options2.stylize(`[Function ${truncate(name2, options2.truncate - 11)}]`, "special") : options2.stylize("[Function]", "special");
    }
    function inspectMapEntry([key2, value2], options2) {
      return options2.truncate -= 4, key2 = options2.inspect(key2, options2), options2.truncate -= key2.length, value2 = options2.inspect(value2, options2), `${key2} => ${value2}`;
    }
    function mapToEntries(map) {
      let entries = [];
      return map.forEach((value2, key2) => {
        entries.push([key2, value2]);
      }), entries;
    }
    function inspectMap(map, options2) {
      return map.size - 1 <= 0 ? "Map{}" : (options2.truncate -= 7, `Map{ ${inspectList(mapToEntries(map), options2, inspectMapEntry)} }`);
    }
    var isNaN2 = Number.isNaN || ((i) => i !== i);
    function inspectNumber(number, options2) {
      return isNaN2(number) ? options2.stylize("NaN", "number") : number === 1 / 0 ? options2.stylize("Infinity", "number") : number === -1 / 0 ? options2.stylize("-Infinity", "number") : number === 0 ? options2.stylize(1 / number === 1 / 0 ? "+0" : "-0", "number") : options2.stylize(truncate(number, options2.truncate), "number");
    }
    function inspectBigInt(number, options2) {
      let nums = truncate(number.toString(), options2.truncate - 1);
      return nums !== truncator && (nums += "n"), options2.stylize(nums, "bigint");
    }
    function inspectRegExp(value2, options2) {
      let flags = value2.toString().split("/")[2], sourceLength = options2.truncate - (2 + flags.length), source2 = value2.source;
      return options2.stylize(`/${truncate(source2, sourceLength)}/${flags}`, "regexp");
    }
    function arrayFromSet(set2) {
      let values = [];
      return set2.forEach((value2) => {
        values.push(value2);
      }), values;
    }
    function inspectSet(set2, options2) {
      return set2.size === 0 ? "Set{}" : (options2.truncate -= 7, `Set{ ${inspectList(arrayFromSet(set2), options2)} }`);
    }
    var stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g");
    var escapeCharacters = { "\b": "\\b", "	": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", "'": "\\'", "\\": "\\\\" };
    var hex = 16;
    var unicodeLength = 4;
    function escape2(char) {
      return escapeCharacters[char] || `\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`;
    }
    function inspectString(string2, options2) {
      return stringEscapeChars.test(string2) && (string2 = string2.replace(stringEscapeChars, escape2)), options2.stylize(`'${truncate(string2, options2.truncate - 2)}'`, "string");
    }
    function inspectSymbol(value2) {
      return "description" in Symbol.prototype ? value2.description ? `Symbol(${value2.description})` : "Symbol()" : value2.toString();
    }
    var getPromiseValue = () => "Promise{\u2026}";
    try {
      let { getPromiseDetails, kPending, kRejected } = process.binding("util");
      Array.isArray(getPromiseDetails(Promise.resolve())) && (getPromiseValue = (value2, options2) => {
        let [state, innerValue] = getPromiseDetails(value2);
        return state === kPending ? "Promise{<pending>}" : `Promise${state === kRejected ? "!" : ""}{${options2.inspect(innerValue, options2)}}`;
      });
    } catch {
    }
    var promise_default = getPromiseValue;
    var import_get_func_name3 = __toESM3(require_get_func_name());
    function inspectObject(object, options2) {
      let properties = Object.getOwnPropertyNames(object), symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
      if (properties.length === 0 && symbols.length === 0)
        return "{}";
      if (options2.truncate -= 4, options2.seen = options2.seen || [], options2.seen.indexOf(object) >= 0)
        return "[Circular]";
      options2.seen.push(object);
      let propertyContents = inspectList(properties.map((key2) => [key2, object[key2]]), options2, inspectProperty), symbolContents = inspectList(symbols.map((key2) => [key2, object[key2]]), options2, inspectProperty);
      options2.seen.pop();
      let sep = "";
      return propertyContents && symbolContents && (sep = ", "), `{ ${propertyContents}${sep}${symbolContents} }`;
    }
    var toStringTag = typeof Symbol < "u" && Symbol.toStringTag ? Symbol.toStringTag : false;
    function inspectClass(value2, options2) {
      let name2 = "";
      return toStringTag && toStringTag in value2 && (name2 = value2[toStringTag]), name2 = name2 || (0, import_get_func_name3.default)(value2.constructor), (!name2 || name2 === "_class") && (name2 = "<Anonymous Class>"), options2.truncate -= name2.length, `${name2}${inspectObject(value2, options2)}`;
    }
    function inspectArguments(args2, options2) {
      return args2.length === 0 ? "Arguments[]" : (options2.truncate -= 13, `Arguments[ ${inspectList(args2, options2)} ]`);
    }
    var errorKeys = ["stack", "line", "column", "name", "message", "fileName", "lineNumber", "columnNumber", "number", "description"];
    function inspectObject2(error, options2) {
      let properties = Object.getOwnPropertyNames(error).filter((key2) => errorKeys.indexOf(key2) === -1), name2 = error.name;
      options2.truncate -= name2.length;
      let message = "";
      typeof error.message == "string" ? message = truncate(error.message, options2.truncate) : properties.unshift("message"), message = message ? `: ${message}` : "", options2.truncate -= message.length + 5;
      let propertyContents = inspectList(properties.map((key2) => [key2, error[key2]]), options2, inspectProperty);
      return `${name2}${message}${propertyContents ? ` { ${propertyContents} }` : ""}`;
    }
    function inspectAttribute([key2, value2], options2) {
      return options2.truncate -= 3, value2 ? `${options2.stylize(key2, "yellow")}=${options2.stylize(`"${value2}"`, "string")}` : `${options2.stylize(key2, "yellow")}`;
    }
    function inspectHTMLCollection(collection, options2) {
      return inspectList(collection, options2, inspectHTML, `
`);
    }
    function inspectHTML(element, options2) {
      let properties = element.getAttributeNames(), name2 = element.tagName.toLowerCase(), head = options2.stylize(`<${name2}`, "special"), headClose = options2.stylize(">", "special"), tail = options2.stylize(`</${name2}>`, "special");
      options2.truncate -= name2.length * 2 + 5;
      let propertyContents = "";
      properties.length > 0 && (propertyContents += " ", propertyContents += inspectList(properties.map((key2) => [key2, element.getAttribute(key2)]), options2, inspectAttribute, " ")), options2.truncate -= propertyContents.length;
      let truncate2 = options2.truncate, children2 = inspectHTMLCollection(element.children, options2);
      return children2 && children2.length > truncate2 && (children2 = `${truncator}(${element.children.length})`), `${head}${propertyContents}${headClose}${children2}${tail}`;
    }
    var symbolsSupported = typeof Symbol == "function" && typeof Symbol.for == "function";
    var chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect";
    var nodeInspect = false;
    try {
      let nodeUtil = require("util");
      nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
    } catch {
      nodeInspect = false;
    }
    function FakeMap() {
      this.key = "chai/loupe__" + Math.random() + Date.now();
    }
    FakeMap.prototype = { get: function(key2) {
      return key2[this.key];
    }, has: function(key2) {
      return this.key in key2;
    }, set: function(key2, value2) {
      Object.isExtensible(key2) && Object.defineProperty(key2, this.key, { value: value2, configurable: true });
    } };
    var constructorMap = new (typeof WeakMap == "function" ? WeakMap : FakeMap)();
    var stringTagMap = {};
    var baseTypesMap = { undefined: (value2, options2) => options2.stylize("undefined", "undefined"), null: (value2, options2) => options2.stylize(null, "null"), boolean: (value2, options2) => options2.stylize(value2, "boolean"), Boolean: (value2, options2) => options2.stylize(value2, "boolean"), number: inspectNumber, Number: inspectNumber, bigint: inspectBigInt, BigInt: inspectBigInt, string: inspectString, String: inspectString, function: inspectFunction, Function: inspectFunction, symbol: inspectSymbol, Symbol: inspectSymbol, Array: inspectArray, Date: inspectDate, Map: inspectMap, Set: inspectSet, RegExp: inspectRegExp, Promise: promise_default, WeakSet: (value2, options2) => options2.stylize("WeakSet{\u2026}", "special"), WeakMap: (value2, options2) => options2.stylize("WeakMap{\u2026}", "special"), Arguments: inspectArguments, Int8Array: inspectTypedArray, Uint8Array: inspectTypedArray, Uint8ClampedArray: inspectTypedArray, Int16Array: inspectTypedArray, Uint16Array: inspectTypedArray, Int32Array: inspectTypedArray, Uint32Array: inspectTypedArray, Float32Array: inspectTypedArray, Float64Array: inspectTypedArray, Generator: () => "", DataView: () => "", ArrayBuffer: () => "", Error: inspectObject2, HTMLCollection: inspectHTMLCollection, NodeList: inspectHTMLCollection };
    var inspectCustom = (value2, options2, type) => chaiInspect in value2 && typeof value2[chaiInspect] == "function" ? value2[chaiInspect](options2) : nodeInspect && nodeInspect in value2 && typeof value2[nodeInspect] == "function" ? value2[nodeInspect](options2.depth, options2) : "inspect" in value2 && typeof value2.inspect == "function" ? value2.inspect(options2.depth, options2) : "constructor" in value2 && constructorMap.has(value2.constructor) ? constructorMap.get(value2.constructor)(value2, options2) : stringTagMap[type] ? stringTagMap[type](value2, options2) : "";
    var toString2 = Object.prototype.toString;
    function inspect(value2, options2) {
      options2 = normaliseOptions(options2), options2.inspect = inspect;
      let { customInspect } = options2, type = value2 === null ? "null" : typeof value2;
      if (type === "object" && (type = toString2.call(value2).slice(8, -1)), baseTypesMap[type])
        return baseTypesMap[type](value2, options2);
      if (customInspect && value2) {
        let output = inspectCustom(value2, options2, type);
        if (output)
          return typeof output == "string" ? output : inspect(output, options2);
      }
      let proto = value2 ? Object.getPrototypeOf(value2) : false;
      return proto === Object.prototype || proto === null ? inspectObject(value2, options2) : value2 && typeof HTMLElement == "function" && value2 instanceof HTMLElement ? inspectHTML(value2, options2) : "constructor" in value2 ? value2.constructor !== Object ? inspectClass(value2, options2) : inspectObject(value2, options2) : value2 === Object(value2) ? inspectObject(value2, options2) : options2.stylize(String(value2), type);
    }
    var { AsymmetricMatcher: AsymmetricMatcher2, DOMCollection: DOMCollection2, DOMElement: DOMElement2, Immutable: Immutable2, ReactElement: ReactElement2, ReactTestComponent: ReactTestComponent2 } = import_pretty_format2.plugins;
    var PLUGINS2 = [ReactTestComponent2, ReactElement2, DOMElement2, DOMCollection2, Immutable2, AsymmetricMatcher2];
    function stringify2(object, maxDepth = 10, { maxLength, ...options2 } = {}) {
      let MAX_LENGTH = maxLength ?? 1e4, result2;
      try {
        result2 = (0, import_pretty_format2.format)(object, { maxDepth, escapeString: false, plugins: PLUGINS2, ...options2 });
      } catch {
        result2 = (0, import_pretty_format2.format)(object, { callToJSON: false, maxDepth, escapeString: false, plugins: PLUGINS2, ...options2 });
      }
      return result2.length >= MAX_LENGTH && maxDepth > 1 ? stringify2(object, Math.floor(maxDepth / 2)) : result2;
    }
    var formatRegExp = /%[sdjifoOcj%]/g;
    function format2(...args2) {
      if (typeof args2[0] != "string") {
        let objects = [];
        for (let i2 = 0; i2 < args2.length; i2++)
          objects.push(inspect2(args2[i2], { depth: 0, colors: false, compact: 3 }));
        return objects.join(" ");
      }
      let len = args2.length, i = 1, template = args2[0], str = String(template).replace(formatRegExp, (x) => {
        if (x === "%%")
          return "%";
        if (i >= len)
          return x;
        switch (x) {
          case "%s": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : typeof value2 == "number" && value2 === 0 && 1 / value2 < 0 ? "-0" : typeof value2 == "object" && value2 !== null ? inspect2(value2, { depth: 0, colors: false, compact: 3 }) : String(value2);
          }
          case "%d": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : Number(value2).toString();
          }
          case "%i": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : Number.parseInt(String(value2)).toString();
          }
          case "%f":
            return Number.parseFloat(String(args2[i++])).toString();
          case "%o":
            return inspect2(args2[i++], { showHidden: true, showProxy: true });
          case "%O":
            return inspect2(args2[i++]);
          case "%c":
            return i++, "";
          case "%j":
            try {
              return JSON.stringify(args2[i++]);
            } catch (err) {
              let m = err.message;
              if (m.includes("circular structure") || m.includes("cyclic structures") || m.includes("cyclic object"))
                return "[Circular]";
              throw err;
            }
          default:
            return x;
        }
      });
      for (let x = args2[i]; i < len; x = args2[++i])
        x === null || typeof x != "object" ? str += ` ${x}` : str += ` ${inspect2(x)}`;
      return str;
    }
    function inspect2(obj, options2 = {}) {
      return options2.truncate === 0 && (options2.truncate = Number.POSITIVE_INFINITY), inspect(obj, options2);
    }
    function isFinalObj(obj) {
      return obj === Object.prototype || obj === Function.prototype || obj === RegExp.prototype;
    }
    function getType2(value2) {
      return Object.prototype.toString.apply(value2).slice(8, -1);
    }
    function collectOwnProperties(obj, collector) {
      let collect = typeof collector == "function" ? collector : (key2) => collector.add(key2);
      Object.getOwnPropertyNames(obj).forEach(collect), Object.getOwnPropertySymbols(obj).forEach(collect);
    }
    function getOwnProperties(obj) {
      let ownProps = /* @__PURE__ */ new Set();
      return isFinalObj(obj) ? [] : (collectOwnProperties(obj, ownProps), Array.from(ownProps));
    }
    var defaultCloneOptions = { forceWritable: false };
    function deepClone(val, options2 = defaultCloneOptions) {
      return clone(val, /* @__PURE__ */ new WeakMap(), options2);
    }
    function clone(val, seen, options2 = defaultCloneOptions) {
      let k, out;
      if (seen.has(val))
        return seen.get(val);
      if (Array.isArray(val)) {
        for (out = Array(k = val.length), seen.set(val, out); k--; )
          out[k] = clone(val[k], seen, options2);
        return out;
      }
      if (Object.prototype.toString.call(val) === "[object Object]") {
        out = Object.create(Object.getPrototypeOf(val)), seen.set(val, out);
        let props = getOwnProperties(val);
        for (let k2 of props) {
          let descriptor = Object.getOwnPropertyDescriptor(val, k2);
          if (!descriptor)
            continue;
          let cloned = clone(val[k2], seen, options2);
          "get" in descriptor ? Object.defineProperty(out, k2, { ...descriptor, get() {
            return cloned;
          } }) : Object.defineProperty(out, k2, { ...descriptor, writable: options2.forceWritable ? true : descriptor.writable, value: cloned });
        }
        return out;
      }
      return val;
    }
    var import_pretty_format3 = __toESM3(require_build(), 1);
    var import_diff_sequences = __toESM3(require_build2(), 1);
    var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
    var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
    function isImmutable(v) {
      return v && (v[IS_COLLECTION_SYMBOL] || v[IS_RECORD_SYMBOL]);
    }
    var OBJECT_PROTO = Object.getPrototypeOf({});
    function getUnserializableMessage(err) {
      return err instanceof Error ? `<unserializable>: ${err.message}` : typeof err == "string" ? `<unserializable>: ${err}` : "<unserializable>";
    }
    function serializeError(val, seen = /* @__PURE__ */ new WeakMap()) {
      if (!val || typeof val == "string")
        return val;
      if (typeof val == "function")
        return `Function<${val.name || "anonymous"}>`;
      if (typeof val == "symbol")
        return val.toString();
      if (typeof val != "object")
        return val;
      if (isImmutable(val))
        return serializeError(val.toJSON(), seen);
      if (val instanceof Promise || val.constructor && val.constructor.prototype === "AsyncFunction")
        return "Promise";
      if (typeof Element < "u" && val instanceof Element)
        return val.tagName;
      if (typeof val.asymmetricMatch == "function")
        return `${val.toString()} ${format2(val.sample)}`;
      if (seen.has(val))
        return seen.get(val);
      if (Array.isArray(val)) {
        let clone2 = new Array(val.length);
        return seen.set(val, clone2), val.forEach((e, i) => {
          try {
            clone2[i] = serializeError(e, seen);
          } catch (err) {
            clone2[i] = getUnserializableMessage(err);
          }
        }), clone2;
      } else {
        let clone2 = /* @__PURE__ */ Object.create(null);
        seen.set(val, clone2);
        let obj = val;
        for (; obj && obj !== OBJECT_PROTO; )
          Object.getOwnPropertyNames(obj).forEach((key2) => {
            if (!(key2 in clone2))
              try {
                clone2[key2] = serializeError(val[key2], seen);
              } catch (err) {
                delete clone2[key2], clone2[key2] = getUnserializableMessage(err);
              }
          }), obj = Object.getPrototypeOf(obj);
        return clone2;
      }
    }
    function normalizeErrorMessage(message) {
      return message.replace(/__(vite_ssr_import|vi_import)_\d+__\./g, "");
    }
    function processError(err, diffOptions) {
      if (!err || typeof err != "object")
        return { message: err };
      if (err.stack && (err.stackStr = String(err.stack)), err.name && (err.nameStr = String(err.name)), err.showDiff || err.showDiff === void 0 && err.expected !== void 0 && err.actual !== void 0) {
        let clonedActual = deepClone(err.actual, { forceWritable: true }), clonedExpected = deepClone(err.expected, { forceWritable: true }), { replacedActual, replacedExpected } = replaceAsymmetricMatcher(clonedActual, clonedExpected);
        err.diff = diff(replacedExpected, replacedActual, { ...diffOptions, ...err.diffOptions });
      }
      typeof err.expected != "string" && (err.expected = stringify2(err.expected, 10)), typeof err.actual != "string" && (err.actual = stringify2(err.actual, 10));
      try {
        typeof err.message == "string" && (err.message = normalizeErrorMessage(err.message)), typeof err.cause == "object" && typeof err.cause.message == "string" && (err.cause.message = normalizeErrorMessage(err.cause.message));
      } catch {
      }
      try {
        return serializeError(err);
      } catch (e) {
        return serializeError(new Error(`Failed to fully serialize error: ${e == null ? void 0 : e.message}
Inner error message: ${err == null ? void 0 : err.message}`));
      }
    }
    function isAsymmetricMatcher(data) {
      return getType2(data) === "Object" && typeof data.asymmetricMatch == "function";
    }
    function isReplaceable(obj1, obj2) {
      let obj1Type = getType2(obj1), obj2Type = getType2(obj2);
      return obj1Type === obj2Type && (obj1Type === "Object" || obj1Type === "Array");
    }
    function replaceAsymmetricMatcher(actual, expected, actualReplaced = /* @__PURE__ */ new WeakSet(), expectedReplaced = /* @__PURE__ */ new WeakSet()) {
      return isReplaceable(actual, expected) ? actualReplaced.has(actual) || expectedReplaced.has(expected) ? { replacedActual: actual, replacedExpected: expected } : (actualReplaced.add(actual), expectedReplaced.add(expected), getOwnProperties(expected).forEach((key2) => {
        let expectedValue = expected[key2], actualValue = actual[key2];
        if (isAsymmetricMatcher(expectedValue))
          expectedValue.asymmetricMatch(actualValue) && (actual[key2] = expectedValue);
        else if (isAsymmetricMatcher(actualValue))
          actualValue.asymmetricMatch(expectedValue) && (expected[key2] = actualValue);
        else if (isReplaceable(actualValue, expectedValue)) {
          let replaced = replaceAsymmetricMatcher(actualValue, expectedValue, actualReplaced, expectedReplaced);
          actual[key2] = replaced.replacedActual, expected[key2] = replaced.replacedExpected;
        }
      }), { replacedActual: actual, replacedExpected: expected }) : { replacedActual: actual, replacedExpected: expected };
    }
    var CallStates = ((CallStates2) => (CallStates2.DONE = "done", CallStates2.ERROR = "error", CallStates2.ACTIVE = "active", CallStates2.WAITING = "waiting", CallStates2))(CallStates || {});
    var EVENTS = { CALL: "storybook/instrumenter/call", SYNC: "storybook/instrumenter/sync", START: "storybook/instrumenter/start", BACK: "storybook/instrumenter/back", GOTO: "storybook/instrumenter/goto", NEXT: "storybook/instrumenter/next", END: "storybook/instrumenter/end" };
    var controlsDisabled = { start: false, back: false, goto: false, next: false, end: false };
    var alreadyCompletedException = new Error("This function ran after the play function completed. Did you forget to `await` it?");
    var isObject4 = (o) => Object.prototype.toString.call(o) === "[object Object]";
    var isModule = (o) => Object.prototype.toString.call(o) === "[object Module]";
    var isInstrumentable = (o) => {
      if (!isObject4(o) && !isModule(o))
        return false;
      if (o.constructor === void 0)
        return true;
      let proto = o.constructor.prototype;
      return !!isObject4(proto);
    };
    var construct = (obj) => {
      try {
        return new obj.constructor();
      } catch {
        return {};
      }
    };
    var getInitialState = () => ({ renderPhase: void 0, isDebugging: false, isPlaying: false, isLocked: false, cursor: 0, calls: [], shadowCalls: [], callRefsByResult: /* @__PURE__ */ new Map(), chainedCallIds: /* @__PURE__ */ new Set(), ancestors: [], playUntil: void 0, resolvers: {}, syncTimeout: void 0 });
    var getRetainedState = (state, isDebugging = false) => {
      let calls = (isDebugging ? state.shadowCalls : state.calls).filter((call) => call.retain);
      if (!calls.length)
        return;
      let callRefsByResult = new Map(Array.from(state.callRefsByResult.entries()).filter(([, ref]) => ref.retain));
      return { cursor: calls.length, calls, callRefsByResult };
    };
    var Instrumenter = class {
      constructor() {
        var _a;
        this.initialized = false;
        this.channel = import_preview_api.addons.getChannel(), this.state = ((_a = import_global.global.window) == null ? void 0 : _a.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__) || {};
        let resetState = ({ storyId, isPlaying = true, isDebugging = false }) => {
          let state = this.getState(storyId);
          this.setState(storyId, { ...getInitialState(), ...getRetainedState(state, isDebugging), shadowCalls: isDebugging ? state.shadowCalls : [], chainedCallIds: isDebugging ? state.chainedCallIds : /* @__PURE__ */ new Set(), playUntil: isDebugging ? state.playUntil : void 0, isPlaying, isDebugging }), this.sync(storyId);
        };
        this.channel.on(import_core_events.FORCE_REMOUNT, resetState), this.channel.on(import_core_events.STORY_RENDER_PHASE_CHANGED, ({ storyId, newPhase }) => {
          let { isDebugging } = this.getState(storyId);
          this.setState(storyId, { renderPhase: newPhase }), newPhase === "preparing" && isDebugging && resetState({ storyId }), newPhase === "playing" && resetState({ storyId, isDebugging }), newPhase === "played" && this.setState(storyId, { isLocked: false, isPlaying: false, isDebugging: false }), newPhase === "errored" && this.setState(storyId, { isLocked: false, isPlaying: false });
        }), this.channel.on(import_core_events.SET_CURRENT_STORY, () => {
          this.initialized ? this.cleanup() : this.initialized = true;
        });
        let start = ({ storyId, playUntil }) => {
          this.getState(storyId).isDebugging || this.setState(storyId, ({ calls }) => ({ calls: [], shadowCalls: calls.map((call) => ({ ...call, status: "waiting" })), isDebugging: true }));
          let log = this.getLog(storyId);
          this.setState(storyId, ({ shadowCalls }) => {
            var _a2;
            if (playUntil || !log.length)
              return { playUntil };
            let firstRowIndex = shadowCalls.findIndex((call) => call.id === log[0].callId);
            return { playUntil: (_a2 = shadowCalls.slice(0, firstRowIndex).filter((call) => call.interceptable && !call.ancestors.length).slice(-1)[0]) == null ? void 0 : _a2.id };
          }), this.channel.emit(import_core_events.FORCE_REMOUNT, { storyId, isDebugging: true });
        }, back = ({ storyId }) => {
          var _a2;
          let log = this.getLog(storyId).filter((call) => !call.ancestors.length), last = log.reduceRight((res, item, index) => res >= 0 || item.status === "waiting" ? res : index, -1);
          start({ storyId, playUntil: (_a2 = log[last - 1]) == null ? void 0 : _a2.callId });
        }, goto = ({ storyId, callId }) => {
          var _a2;
          let { calls, shadowCalls, resolvers } = this.getState(storyId), call = calls.find(({ id }) => id === callId), shadowCall = shadowCalls.find(({ id }) => id === callId);
          if (!call && shadowCall && Object.values(resolvers).length > 0) {
            let nextId = (_a2 = this.getLog(storyId).find((c) => c.status === "waiting")) == null ? void 0 : _a2.callId;
            shadowCall.id !== nextId && this.setState(storyId, { playUntil: shadowCall.id }), Object.values(resolvers).forEach((resolve) => resolve());
          } else
            start({ storyId, playUntil: callId });
        }, next = ({ storyId }) => {
          var _a2;
          let { resolvers } = this.getState(storyId);
          if (Object.values(resolvers).length > 0)
            Object.values(resolvers).forEach((resolve) => resolve());
          else {
            let nextId = (_a2 = this.getLog(storyId).find((c) => c.status === "waiting")) == null ? void 0 : _a2.callId;
            nextId ? start({ storyId, playUntil: nextId }) : end({ storyId });
          }
        }, end = ({ storyId }) => {
          this.setState(storyId, { playUntil: void 0, isDebugging: false }), Object.values(this.getState(storyId).resolvers).forEach((resolve) => resolve());
        };
        this.channel.on(EVENTS.START, start), this.channel.on(EVENTS.BACK, back), this.channel.on(EVENTS.GOTO, goto), this.channel.on(EVENTS.NEXT, next), this.channel.on(EVENTS.END, end);
      }
      getState(storyId) {
        return this.state[storyId] || getInitialState();
      }
      setState(storyId, update) {
        var _a;
        let state = this.getState(storyId), patch = typeof update == "function" ? update(state) : update;
        this.state = { ...this.state, [storyId]: { ...state, ...patch } }, ((_a = import_global.global.window) == null ? void 0 : _a.parent) && (import_global.global.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state);
      }
      cleanup() {
        var _a;
        this.state = Object.entries(this.state).reduce((acc, [storyId, state]) => {
          let retainedState = getRetainedState(state);
          return retainedState && (acc[storyId] = Object.assign(getInitialState(), retainedState)), acc;
        }, {});
        let payload = { controlStates: controlsDisabled, logItems: [] };
        this.channel.emit(EVENTS.SYNC, payload), ((_a = import_global.global.window) == null ? void 0 : _a.parent) && (import_global.global.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state);
      }
      getLog(storyId) {
        let { calls, shadowCalls } = this.getState(storyId), merged = [...shadowCalls];
        calls.forEach((call, index) => {
          merged[index] = call;
        });
        let seen = /* @__PURE__ */ new Set();
        return merged.reduceRight((acc, call) => (call.args.forEach((arg) => {
          (arg == null ? void 0 : arg.__callId__) && seen.add(arg.__callId__);
        }), call.path.forEach((node) => {
          node.__callId__ && seen.add(node.__callId__);
        }), (call.interceptable || call.exception) && !seen.has(call.id) && (acc.unshift({ callId: call.id, status: call.status, ancestors: call.ancestors }), seen.add(call.id)), acc), []);
      }
      instrument(obj, options2, depth = 0) {
        if (!isInstrumentable(obj))
          return obj;
        let { mutate = false, path = [] } = options2, keys = options2.getKeys ? options2.getKeys(obj, depth) : Object.keys(obj);
        return depth += 1, keys.reduce((acc, key2) => {
          let descriptor = getPropertyDescriptor(obj, key2);
          if (typeof (descriptor == null ? void 0 : descriptor.get) == "function") {
            let getter = () => {
              var _a, _b;
              return (_b = (_a = descriptor == null ? void 0 : descriptor.get) == null ? void 0 : _a.bind(obj)) == null ? void 0 : _b();
            };
            return Object.defineProperty(acc, key2, { get: () => this.instrument(getter(), { ...options2, path: path.concat(key2) }, depth) }), acc;
          }
          let value2 = obj[key2];
          return typeof value2 != "function" ? (acc[key2] = this.instrument(value2, { ...options2, path: path.concat(key2) }, depth), acc) : "__originalFn__" in value2 && typeof value2.__originalFn__ == "function" ? (acc[key2] = value2, acc) : (acc[key2] = (...args2) => this.track(key2, value2, obj, args2, options2), acc[key2].__originalFn__ = value2, Object.defineProperty(acc[key2], "name", { value: key2, writable: false }), Object.keys(value2).length > 0 && Object.assign(acc[key2], this.instrument({ ...value2 }, { ...options2, path: path.concat(key2) }, depth)), acc);
        }, mutate ? obj : construct(obj));
      }
      track(method, fn2, object, args2, options2) {
        var _a, _b, _c, _d;
        let storyId = ((_a = args2 == null ? void 0 : args2[0]) == null ? void 0 : _a.__storyId__) || ((_d = (_c = (_b = import_global.global.__STORYBOOK_PREVIEW__) == null ? void 0 : _b.selectionStore) == null ? void 0 : _c.selection) == null ? void 0 : _d.storyId), { cursor, ancestors } = this.getState(storyId);
        this.setState(storyId, { cursor: cursor + 1 });
        let id = `${ancestors.slice(-1)[0] || storyId} [${cursor}] ${method}`, { path = [], intercept = false, retain = false } = options2, interceptable = typeof intercept == "function" ? intercept(method, path) : intercept, call = { id, cursor, storyId, ancestors, path, method, args: args2, interceptable, retain }, result2 = (interceptable && !ancestors.length ? this.intercept : this.invoke).call(this, fn2, object, call, options2);
        return this.instrument(result2, { ...options2, mutate: true, path: [{ __callId__: call.id }] });
      }
      intercept(fn2, object, call, options2) {
        let { chainedCallIds, isDebugging, playUntil } = this.getState(call.storyId), isChainedUpon = chainedCallIds.has(call.id);
        return !isDebugging || isChainedUpon || playUntil ? (playUntil === call.id && this.setState(call.storyId, { playUntil: void 0 }), this.invoke(fn2, object, call, options2)) : new Promise((resolve) => {
          this.setState(call.storyId, ({ resolvers }) => ({ isLocked: false, resolvers: { ...resolvers, [call.id]: resolve } }));
        }).then(() => (this.setState(call.storyId, (state) => {
          let { [call.id]: _, ...resolvers } = state.resolvers;
          return { isLocked: true, resolvers };
        }), this.invoke(fn2, object, call, options2)));
      }
      invoke(fn2, object, call, options2) {
        let { callRefsByResult, renderPhase } = this.getState(call.storyId), serializeValues = (value2) => {
          var _a, _b, _c;
          if (callRefsByResult.has(value2))
            return callRefsByResult.get(value2);
          if (value2 instanceof Array)
            return value2.map(serializeValues);
          if (value2 instanceof Date)
            return { __date__: { value: value2.toISOString() } };
          if (value2 instanceof Error) {
            let { name: name2, message, stack } = value2;
            return { __error__: { name: name2, message, stack } };
          }
          if (value2 instanceof RegExp) {
            let { flags, source: source2 } = value2;
            return { __regexp__: { flags, source: source2 } };
          }
          if (value2 instanceof ((_a = import_global.global.window) == null ? void 0 : _a.HTMLElement)) {
            let { prefix, localName, id, classList, innerText } = value2, classNames = Array.from(classList);
            return { __element__: { prefix, localName, id, classNames, innerText } };
          }
          return typeof value2 == "function" ? { __function__: { name: "getMockName" in value2 ? value2.getMockName() : value2.name } } : typeof value2 == "symbol" ? { __symbol__: { description: value2.description } } : typeof value2 == "object" && ((_b = value2 == null ? void 0 : value2.constructor) == null ? void 0 : _b.name) && ((_c = value2 == null ? void 0 : value2.constructor) == null ? void 0 : _c.name) !== "Object" ? { __class__: { name: value2.constructor.name } } : Object.prototype.toString.call(value2) === "[object Object]" ? Object.fromEntries(Object.entries(value2).map(([key2, val]) => [key2, serializeValues(val)])) : value2;
        }, info = { ...call, args: call.args.map(serializeValues) };
        call.path.forEach((ref) => {
          (ref == null ? void 0 : ref.__callId__) && this.setState(call.storyId, ({ chainedCallIds }) => ({ chainedCallIds: new Set(Array.from(chainedCallIds).concat(ref.__callId__)) }));
        });
        let handleException = (e) => {
          if (e instanceof Error) {
            let { name: name2, message, stack, callId = call.id } = e, { showDiff = void 0, diff: diff2 = void 0, actual = void 0, expected = void 0 } = e.name === "AssertionError" ? processError(e) : e, exception = { name: name2, message, stack, callId, showDiff, diff: diff2, actual, expected };
            if (this.update({ ...info, status: "error", exception }), this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [e, { __callId__: call.id, retain: call.retain }]]) })), call.ancestors.length)
              throw Object.prototype.hasOwnProperty.call(e, "callId") || Object.defineProperty(e, "callId", { value: call.id }), e;
          }
          throw e;
        };
        try {
          if (renderPhase === "played" && !call.retain)
            throw alreadyCompletedException;
          let finalArgs = (options2.getArgs ? options2.getArgs(call, this.getState(call.storyId)) : call.args).map((arg) => typeof arg != "function" || Object.keys(arg).length ? arg : (...args2) => {
            let { cursor, ancestors } = this.getState(call.storyId);
            this.setState(call.storyId, { cursor: 0, ancestors: [...ancestors, call.id] });
            let restore = () => this.setState(call.storyId, { cursor, ancestors }), willRestore = false;
            try {
              let res = arg(...args2);
              return res instanceof Promise ? (willRestore = true, res.finally(restore)) : res;
            } finally {
              willRestore || restore();
            }
          }), result2 = fn2.apply(object, finalArgs);
          return result2 && ["object", "function", "symbol"].includes(typeof result2) && this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [result2, { __callId__: call.id, retain: call.retain }]]) })), this.update({ ...info, status: result2 instanceof Promise ? "active" : "done" }), result2 instanceof Promise ? result2.then((value2) => (this.update({ ...info, status: "done" }), value2), handleException) : result2;
        } catch (e) {
          return handleException(e);
        }
      }
      update(call) {
        this.channel.emit(EVENTS.CALL, call), this.setState(call.storyId, ({ calls }) => {
          let callsById = calls.concat(call).reduce((a, c) => Object.assign(a, { [c.id]: c }), {});
          return { calls: Object.values(callsById).sort((a, b) => a.id.localeCompare(b.id, void 0, { numeric: true })) };
        }), this.sync(call.storyId);
      }
      sync(storyId) {
        let synchronize = () => {
          var _a;
          let { isLocked, isPlaying } = this.getState(storyId), logItems = this.getLog(storyId), pausedAt = (_a = logItems.filter(({ ancestors }) => !ancestors.length).find((item) => item.status === "waiting")) == null ? void 0 : _a.callId, hasActive = logItems.some((item) => item.status === "active");
          if (isLocked || hasActive || logItems.length === 0) {
            let payload2 = { controlStates: controlsDisabled, logItems };
            this.channel.emit(EVENTS.SYNC, payload2);
            return;
          }
          let hasPrevious = logItems.some((item) => item.status === "done" || item.status === "error"), payload = { controlStates: { start: hasPrevious, back: hasPrevious, goto: true, next: isPlaying, end: isPlaying }, logItems, pausedAt };
          this.channel.emit(EVENTS.SYNC, payload);
        };
        this.setState(storyId, ({ syncTimeout }) => (clearTimeout(syncTimeout), { syncTimeout: setTimeout(synchronize, 0) }));
      }
    };
    function instrument(obj, options2 = {}) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      try {
        let forceInstrument = false, skipInstrument = false;
        return ((_c = (_b = (_a = import_global.global.window) == null ? void 0 : _a.location) == null ? void 0 : _b.search) == null ? void 0 : _c.includes("instrument=true")) ? forceInstrument = true : ((_f = (_e = (_d = import_global.global.window) == null ? void 0 : _d.location) == null ? void 0 : _e.search) == null ? void 0 : _f.includes("instrument=false")) && (skipInstrument = true), ((_g = import_global.global.window) == null ? void 0 : _g.parent) === import_global.global.window && !forceInstrument || skipInstrument ? obj : (import_global.global.window && !import_global.global.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ && (import_global.global.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ = new Instrumenter()), ((_h = import_global.global.window) == null ? void 0 : _h.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__).instrument(obj, options2));
      } catch (e) {
        return import_client_logger.once.warn(e), obj;
      }
    }
    function getPropertyDescriptor(obj, propName) {
      let target = obj;
      for (; target != null; ) {
        let descriptor = Object.getOwnPropertyDescriptor(target, propName);
        if (descriptor)
          return descriptor;
        target = Object.getPrototypeOf(target);
      }
    }
  }
});

// node_modules/.pnpm/@storybook+test@8.1.5/node_modules/@storybook/test/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/.pnpm/@storybook+test@8.1.5/node_modules/@storybook/test/dist/index.js"(exports2, module2) {
    "use strict";
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __esm2 = (fn3, res) => function() {
      return fn3 && (res = (0, fn3[__getOwnPropNames3(fn3)[0]])(fn3 = 0)), res;
    };
    var __commonJS3 = (cb, mod) => function() {
      return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp3(target, name2, { get: all[name2], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key2 of __getOwnPropNames3(from))
          !__hasOwnProp3.call(to, key2) && key2 !== except && __defProp3(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc3(from, key2)) || desc.enumerable });
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
    var __toCommonJS2 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var require_assertion_error = __commonJS3({ "../../node_modules/assertion-error/index.js"(exports22, module22) {
      "use strict";
      function exclude() {
        var excludes = [].slice.call(arguments);
        function excludeProps(res, obj) {
          Object.keys(obj).forEach(function(key2) {
            ~excludes.indexOf(key2) || (res[key2] = obj[key2]);
          });
        }
        return function() {
          for (var args2 = [].slice.call(arguments), i = 0, res = {}; i < args2.length; i++)
            excludeProps(res, args2[i]);
          return res;
        };
      }
      module22.exports = AssertionError2;
      function AssertionError2(message, _props, ssf) {
        var extend = exclude("name", "message", "stack", "constructor", "toJSON"), props = extend(_props || {});
        this.message = message || "Unspecified AssertionError", this.showDiff = false;
        for (var key2 in props)
          this[key2] = props[key2];
        if (ssf = ssf || AssertionError2, Error.captureStackTrace)
          Error.captureStackTrace(this, ssf);
        else
          try {
            throw new Error();
          } catch (e) {
            this.stack = e.stack;
          }
      }
      AssertionError2.prototype = Object.create(Error.prototype);
      AssertionError2.prototype.name = "AssertionError";
      AssertionError2.prototype.constructor = AssertionError2;
      AssertionError2.prototype.toJSON = function(stack) {
        var extend = exclude("constructor", "toJSON", "stack"), props = extend({ name: this.name }, this);
        return stack !== false && this.stack && (props.stack = this.stack), props;
      };
    } });
    var require_pathval = __commonJS3({ "../../node_modules/pathval/index.js"(exports22, module22) {
      "use strict";
      function hasProperty(obj, name2) {
        return typeof obj > "u" || obj === null ? false : name2 in Object(obj);
      }
      function parsePath(path) {
        var str = path.replace(/([^\\])\[/g, "$1.["), parts = str.match(/(\\\.|[^.]+?)+/g);
        return parts.map(function(value2) {
          if (value2 === "constructor" || value2 === "__proto__" || value2 === "prototype")
            return {};
          var regexp = /^\[(\d+)\]$/, mArr = regexp.exec(value2), parsed = null;
          return mArr ? parsed = { i: parseFloat(mArr[1]) } : parsed = { p: value2.replace(/\\([.[\]])/g, "$1") }, parsed;
        });
      }
      function internalGetPathValue(obj, parsed, pathDepth) {
        var temporaryValue = obj, res = null;
        pathDepth = typeof pathDepth > "u" ? parsed.length : pathDepth;
        for (var i = 0; i < pathDepth; i++) {
          var part = parsed[i];
          temporaryValue && (typeof part.p > "u" ? temporaryValue = temporaryValue[part.i] : temporaryValue = temporaryValue[part.p], i === pathDepth - 1 && (res = temporaryValue));
        }
        return res;
      }
      function internalSetPathValue(obj, val, parsed) {
        for (var tempObj = obj, pathDepth = parsed.length, part = null, i = 0; i < pathDepth; i++) {
          var propName = null, propVal = null;
          if (part = parsed[i], i === pathDepth - 1)
            propName = typeof part.p > "u" ? part.i : part.p, tempObj[propName] = val;
          else if (typeof part.p < "u" && tempObj[part.p])
            tempObj = tempObj[part.p];
          else if (typeof part.i < "u" && tempObj[part.i])
            tempObj = tempObj[part.i];
          else {
            var next = parsed[i + 1];
            propName = typeof part.p > "u" ? part.i : part.p, propVal = typeof next.p > "u" ? [] : {}, tempObj[propName] = propVal, tempObj = tempObj[propName];
          }
        }
      }
      function getPathInfo(obj, path) {
        var parsed = parsePath(path), last = parsed[parsed.length - 1], info = { parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj, name: last.p || last.i, value: internalGetPathValue(obj, parsed) };
        return info.exists = hasProperty(info.parent, info.name), info;
      }
      function getPathValue(obj, path) {
        var info = getPathInfo(obj, path);
        return info.value;
      }
      function setPathValue(obj, path, val) {
        var parsed = parsePath(path);
        return internalSetPathValue(obj, val, parsed), obj;
      }
      module22.exports = { hasProperty, getPathInfo, getPathValue, setPathValue };
    } });
    var require_flag = __commonJS3({ "../../node_modules/chai/lib/chai/utils/flag.js"(exports22, module22) {
      "use strict";
      module22.exports = function(obj, key2, value2) {
        var flags = obj.__flags || (obj.__flags = /* @__PURE__ */ Object.create(null));
        if (arguments.length === 3)
          flags[key2] = value2;
        else
          return flags[key2];
      };
    } });
    var require_test = __commonJS3({ "../../node_modules/chai/lib/chai/utils/test.js"(exports22, module22) {
      "use strict";
      var flag = require_flag();
      module22.exports = function(obj, args2) {
        var negate = flag(obj, "negate"), expr = args2[0];
        return negate ? !expr : expr;
      };
    } });
    var require_type_detect = __commonJS3({ "../../node_modules/type-detect/type-detect.js"(exports22, module22) {
      "use strict";
      (function(global2, factory) {
        typeof exports22 == "object" && typeof module22 < "u" ? module22.exports = factory() : typeof define == "function" && define.amd ? define(factory) : global2.typeDetect = factory();
      })(exports22, function() {
        "use strict";
        var promiseExists = typeof Promise == "function", globalObject = typeof self == "object" ? self : global, symbolExists = typeof Symbol < "u", mapExists = typeof Map < "u", setExists = typeof Set < "u", weakMapExists = typeof WeakMap < "u", weakSetExists = typeof WeakSet < "u", dataViewExists = typeof DataView < "u", symbolIteratorExists = symbolExists && typeof Symbol.iterator < "u", symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag < "u", setEntriesExists = setExists && typeof Set.prototype.entries == "function", mapEntriesExists = mapExists && typeof Map.prototype.entries == "function", setIteratorPrototype = setEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Set()).entries()), mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Map()).entries()), arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] == "function", arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]()), stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] == "function", stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(""[Symbol.iterator]()), toStringLeftSliceLength = 8, toStringRightSliceLength = -1;
        function typeDetect(obj) {
          var typeofObj = typeof obj;
          if (typeofObj !== "object")
            return typeofObj;
          if (obj === null)
            return "null";
          if (obj === globalObject)
            return "global";
          if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj)))
            return "Array";
          if (typeof window == "object" && window !== null) {
            if (typeof window.location == "object" && obj === window.location)
              return "Location";
            if (typeof window.document == "object" && obj === window.document)
              return "Document";
            if (typeof window.navigator == "object") {
              if (typeof window.navigator.mimeTypes == "object" && obj === window.navigator.mimeTypes)
                return "MimeTypeArray";
              if (typeof window.navigator.plugins == "object" && obj === window.navigator.plugins)
                return "PluginArray";
            }
            if ((typeof window.HTMLElement == "function" || typeof window.HTMLElement == "object") && obj instanceof window.HTMLElement) {
              if (obj.tagName === "BLOCKQUOTE")
                return "HTMLQuoteElement";
              if (obj.tagName === "TD")
                return "HTMLTableDataCellElement";
              if (obj.tagName === "TH")
                return "HTMLTableHeaderCellElement";
            }
          }
          var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];
          if (typeof stringTag == "string")
            return stringTag;
          var objPrototype = Object.getPrototypeOf(obj);
          return objPrototype === RegExp.prototype ? "RegExp" : objPrototype === Date.prototype ? "Date" : promiseExists && objPrototype === Promise.prototype ? "Promise" : setExists && objPrototype === Set.prototype ? "Set" : mapExists && objPrototype === Map.prototype ? "Map" : weakSetExists && objPrototype === WeakSet.prototype ? "WeakSet" : weakMapExists && objPrototype === WeakMap.prototype ? "WeakMap" : dataViewExists && objPrototype === DataView.prototype ? "DataView" : mapExists && objPrototype === mapIteratorPrototype ? "Map Iterator" : setExists && objPrototype === setIteratorPrototype ? "Set Iterator" : arrayIteratorExists && objPrototype === arrayIteratorPrototype ? "Array Iterator" : stringIteratorExists && objPrototype === stringIteratorPrototype ? "String Iterator" : objPrototype === null ? "Object" : Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
        }
        return typeDetect;
      });
    } });
    var require_expectTypes = __commonJS3({ "../../node_modules/chai/lib/chai/utils/expectTypes.js"(exports22, module22) {
      "use strict";
      var AssertionError2 = require_assertion_error(), flag = require_flag(), type3 = require_type_detect();
      module22.exports = function(obj, types) {
        var flagMsg = flag(obj, "message"), ssfi = flag(obj, "ssfi");
        flagMsg = flagMsg ? flagMsg + ": " : "", obj = flag(obj, "object"), types = types.map(function(t) {
          return t.toLowerCase();
        }), types.sort();
        var str = types.map(function(t, index) {
          var art = ~["a", "e", "i", "o", "u"].indexOf(t.charAt(0)) ? "an" : "a", or = types.length > 1 && index === types.length - 1 ? "or " : "";
          return or + art + " " + t;
        }).join(", "), objType = type3(obj).toLowerCase();
        if (!types.some(function(expected) {
          return objType === expected;
        }))
          throw new AssertionError2(flagMsg + "object tested must be " + str + ", but " + objType + " given", void 0, ssfi);
      };
    } });
    var require_getActual = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getActual.js"(exports22, module22) {
      "use strict";
      module22.exports = function(obj, args2) {
        return args2.length > 4 ? args2[4] : obj._obj;
      };
    } });
    var require_get_func_name = __commonJS3({ "../../node_modules/get-func-name/index.js"(exports22, module22) {
      "use strict";
      var toString22 = Function.prototype.toString, functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/, maxFunctionSourceLength = 512;
      function getFuncName3(aFunc) {
        if (typeof aFunc != "function")
          return null;
        var name2 = "";
        if (typeof Function.prototype.name > "u" && typeof aFunc.name > "u") {
          var functionSource = toString22.call(aFunc);
          if (functionSource.indexOf("(") > maxFunctionSourceLength)
            return name2;
          var match = functionSource.match(functionNameMatch);
          match && (name2 = match[1]);
        } else
          name2 = aFunc.name;
        return name2;
      }
      module22.exports = getFuncName3;
    } });
    function colorise(value2, styleType) {
      let color = ansiColors[styles[styleType]] || ansiColors[styleType];
      return color ? `\x1B[${color[0]}m${String(value2)}\x1B[${color[1]}m` : String(value2);
    }
    function normaliseOptions({ showHidden = false, depth = 2, colors = false, customInspect = true, showProxy = false, maxArrayLength = 1 / 0, breakLength = 1 / 0, seen = [], truncate: truncate2 = 1 / 0, stylize = String } = {}) {
      let options2 = { showHidden: !!showHidden, depth: Number(depth), colors: !!colors, customInspect: !!customInspect, showProxy: !!showProxy, maxArrayLength: Number(maxArrayLength), breakLength: Number(breakLength), truncate: Number(truncate2), seen, stylize };
      return options2.colors && (options2.stylize = colorise), options2;
    }
    function truncate(string2, length, tail = truncator) {
      string2 = String(string2);
      let tailLength = tail.length, stringLength = string2.length;
      return tailLength > length && stringLength > tailLength ? tail : stringLength > length && stringLength > tailLength ? `${string2.slice(0, length - tailLength)}${tail}` : string2;
    }
    function inspectList(list, options2, inspectItem, separator = ", ") {
      inspectItem = inspectItem || options2.inspect;
      let size = list.length;
      if (size === 0)
        return "";
      let originalLength = options2.truncate, output = "", peek = "", truncated = "";
      for (let i = 0; i < size; i += 1) {
        let last = i + 1 === list.length, secondToLast = i + 2 === list.length;
        truncated = `${truncator}(${list.length - i})`;
        let value2 = list[i];
        options2.truncate = originalLength - output.length - (last ? 0 : separator.length);
        let string2 = peek || inspectItem(value2, options2) + (last ? "" : separator), nextLength = output.length + string2.length, truncatedLength = nextLength + truncated.length;
        if (last && nextLength > originalLength && output.length + truncated.length <= originalLength || !last && !secondToLast && truncatedLength > originalLength || (peek = last ? "" : inspectItem(list[i + 1], options2) + (secondToLast ? "" : separator), !last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength))
          break;
        if (output += string2, !last && !secondToLast && nextLength + peek.length >= originalLength) {
          truncated = `${truncator}(${list.length - i - 1})`;
          break;
        }
        truncated = "";
      }
      return `${output}${truncated}`;
    }
    function quoteComplexKey(key2) {
      return key2.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/) ? key2 : JSON.stringify(key2).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
    }
    function inspectProperty([key2, value2], options2) {
      return options2.truncate -= 2, typeof key2 == "string" ? key2 = quoteComplexKey(key2) : typeof key2 != "number" && (key2 = `[${options2.inspect(key2, options2)}]`), options2.truncate -= key2.length, value2 = options2.inspect(value2, options2), `${key2}: ${value2}`;
    }
    var ansiColors;
    var styles;
    var truncator;
    var init_helpers = __esm2({ "../../node_modules/loupe/lib/helpers.js"() {
      "use strict";
      ansiColors = { bold: ["1", "22"], dim: ["2", "22"], italic: ["3", "23"], underline: ["4", "24"], inverse: ["7", "27"], hidden: ["8", "28"], strike: ["9", "29"], black: ["30", "39"], red: ["31", "39"], green: ["32", "39"], yellow: ["33", "39"], blue: ["34", "39"], magenta: ["35", "39"], cyan: ["36", "39"], white: ["37", "39"], brightblack: ["30;1", "39"], brightred: ["31;1", "39"], brightgreen: ["32;1", "39"], brightyellow: ["33;1", "39"], brightblue: ["34;1", "39"], brightmagenta: ["35;1", "39"], brightcyan: ["36;1", "39"], brightwhite: ["37;1", "39"], grey: ["90", "39"] }, styles = { special: "cyan", number: "yellow", bigint: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", symbol: "green", date: "magenta", regexp: "red" }, truncator = "\u2026";
    } });
    function inspectArray(array, options2) {
      let nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length)
        return "[]";
      options2.truncate -= 4;
      let listContents = inspectList(array, options2);
      options2.truncate -= listContents.length;
      let propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map((key2) => [key2, array[key2]]), options2, inspectProperty)), `[ ${listContents}${propertyContents ? `, ${propertyContents}` : ""} ]`;
    }
    var init_array = __esm2({ "../../node_modules/loupe/lib/array.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectTypedArray(array, options2) {
      let name2 = getArrayName(array);
      options2.truncate -= name2.length + 4;
      let nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length)
        return `${name2}[]`;
      let output = "";
      for (let i = 0; i < array.length; i++) {
        let string2 = `${options2.stylize(truncate(array[i], options2.truncate), "number")}${i === array.length - 1 ? "" : ", "}`;
        if (options2.truncate -= string2.length, array[i] !== array.length && options2.truncate <= 3) {
          output += `${truncator}(${array.length - array[i] + 1})`;
          break;
        }
        output += string2;
      }
      let propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map((key2) => [key2, array[key2]]), options2, inspectProperty)), `${name2}[ ${output}${propertyContents ? `, ${propertyContents}` : ""} ]`;
    }
    var import_get_func_name;
    var getArrayName;
    var init_typedarray = __esm2({ "../../node_modules/loupe/lib/typedarray.js"() {
      "use strict";
      import_get_func_name = __toESM3(require_get_func_name());
      init_helpers();
      getArrayName = (array) => typeof Buffer == "function" && array instanceof Buffer ? "Buffer" : array[Symbol.toStringTag] ? array[Symbol.toStringTag] : (0, import_get_func_name.default)(array.constructor);
    } });
    function inspectDate(dateObject, options2) {
      let stringRepresentation = dateObject.toJSON();
      if (stringRepresentation === null)
        return "Invalid Date";
      let split = stringRepresentation.split("T"), date = split[0];
      return options2.stylize(`${date}T${truncate(split[1], options2.truncate - date.length - 1)}`, "date");
    }
    var init_date = __esm2({ "../../node_modules/loupe/lib/date.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectFunction(func, options2) {
      let name2 = (0, import_get_func_name2.default)(func);
      return name2 ? options2.stylize(`[Function ${truncate(name2, options2.truncate - 11)}]`, "special") : options2.stylize("[Function]", "special");
    }
    var import_get_func_name2;
    var init_function = __esm2({ "../../node_modules/loupe/lib/function.js"() {
      "use strict";
      import_get_func_name2 = __toESM3(require_get_func_name());
      init_helpers();
    } });
    function inspectMapEntry([key2, value2], options2) {
      return options2.truncate -= 4, key2 = options2.inspect(key2, options2), options2.truncate -= key2.length, value2 = options2.inspect(value2, options2), `${key2} => ${value2}`;
    }
    function mapToEntries(map) {
      let entries = [];
      return map.forEach((value2, key2) => {
        entries.push([key2, value2]);
      }), entries;
    }
    function inspectMap(map, options2) {
      return map.size - 1 <= 0 ? "Map{}" : (options2.truncate -= 7, `Map{ ${inspectList(mapToEntries(map), options2, inspectMapEntry)} }`);
    }
    var init_map = __esm2({ "../../node_modules/loupe/lib/map.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectNumber(number, options2) {
      return isNaN2(number) ? options2.stylize("NaN", "number") : number === 1 / 0 ? options2.stylize("Infinity", "number") : number === -1 / 0 ? options2.stylize("-Infinity", "number") : number === 0 ? options2.stylize(1 / number === 1 / 0 ? "+0" : "-0", "number") : options2.stylize(truncate(number, options2.truncate), "number");
    }
    var isNaN2;
    var init_number = __esm2({ "../../node_modules/loupe/lib/number.js"() {
      "use strict";
      init_helpers();
      isNaN2 = Number.isNaN || ((i) => i !== i);
    } });
    function inspectBigInt(number, options2) {
      let nums = truncate(number.toString(), options2.truncate - 1);
      return nums !== truncator && (nums += "n"), options2.stylize(nums, "bigint");
    }
    var init_bigint = __esm2({ "../../node_modules/loupe/lib/bigint.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectRegExp(value2, options2) {
      let flags = value2.toString().split("/")[2], sourceLength = options2.truncate - (2 + flags.length), source2 = value2.source;
      return options2.stylize(`/${truncate(source2, sourceLength)}/${flags}`, "regexp");
    }
    var init_regexp = __esm2({ "../../node_modules/loupe/lib/regexp.js"() {
      "use strict";
      init_helpers();
    } });
    function arrayFromSet(set2) {
      let values = [];
      return set2.forEach((value2) => {
        values.push(value2);
      }), values;
    }
    function inspectSet(set2, options2) {
      return set2.size === 0 ? "Set{}" : (options2.truncate -= 7, `Set{ ${inspectList(arrayFromSet(set2), options2)} }`);
    }
    var init_set = __esm2({ "../../node_modules/loupe/lib/set.js"() {
      "use strict";
      init_helpers();
    } });
    function escape2(char) {
      return escapeCharacters[char] || `\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`;
    }
    function inspectString(string2, options2) {
      return stringEscapeChars.test(string2) && (string2 = string2.replace(stringEscapeChars, escape2)), options2.stylize(`'${truncate(string2, options2.truncate - 2)}'`, "string");
    }
    var stringEscapeChars;
    var escapeCharacters;
    var hex;
    var unicodeLength;
    var init_string = __esm2({ "../../node_modules/loupe/lib/string.js"() {
      "use strict";
      init_helpers();
      stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g"), escapeCharacters = { "\b": "\\b", "	": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", "'": "\\'", "\\": "\\\\" }, hex = 16, unicodeLength = 4;
    } });
    function inspectSymbol(value2) {
      return "description" in Symbol.prototype ? value2.description ? `Symbol(${value2.description})` : "Symbol()" : value2.toString();
    }
    var init_symbol = __esm2({ "../../node_modules/loupe/lib/symbol.js"() {
      "use strict";
    } });
    var getPromiseValue;
    var promise_default;
    var init_promise = __esm2({ "../../node_modules/loupe/lib/promise.js"() {
      "use strict";
      getPromiseValue = () => "Promise{\u2026}";
      try {
        let { getPromiseDetails, kPending, kRejected } = process.binding("util");
        Array.isArray(getPromiseDetails(Promise.resolve())) && (getPromiseValue = (value2, options2) => {
          let [state, innerValue] = getPromiseDetails(value2);
          return state === kPending ? "Promise{<pending>}" : `Promise${state === kRejected ? "!" : ""}{${options2.inspect(innerValue, options2)}}`;
        });
      } catch {
      }
      promise_default = getPromiseValue;
    } });
    function inspectObject(object, options2) {
      let properties = Object.getOwnPropertyNames(object), symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
      if (properties.length === 0 && symbols.length === 0)
        return "{}";
      if (options2.truncate -= 4, options2.seen = options2.seen || [], options2.seen.indexOf(object) >= 0)
        return "[Circular]";
      options2.seen.push(object);
      let propertyContents = inspectList(properties.map((key2) => [key2, object[key2]]), options2, inspectProperty), symbolContents = inspectList(symbols.map((key2) => [key2, object[key2]]), options2, inspectProperty);
      options2.seen.pop();
      let sep = "";
      return propertyContents && symbolContents && (sep = ", "), `{ ${propertyContents}${sep}${symbolContents} }`;
    }
    var init_object = __esm2({ "../../node_modules/loupe/lib/object.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectClass(value2, options2) {
      let name2 = "";
      return toStringTag && toStringTag in value2 && (name2 = value2[toStringTag]), name2 = name2 || (0, import_get_func_name3.default)(value2.constructor), (!name2 || name2 === "_class") && (name2 = "<Anonymous Class>"), options2.truncate -= name2.length, `${name2}${inspectObject(value2, options2)}`;
    }
    var import_get_func_name3;
    var toStringTag;
    var init_class = __esm2({ "../../node_modules/loupe/lib/class.js"() {
      "use strict";
      import_get_func_name3 = __toESM3(require_get_func_name());
      init_object();
      toStringTag = typeof Symbol < "u" && Symbol.toStringTag ? Symbol.toStringTag : false;
    } });
    function inspectArguments(args2, options2) {
      return args2.length === 0 ? "Arguments[]" : (options2.truncate -= 13, `Arguments[ ${inspectList(args2, options2)} ]`);
    }
    var init_arguments = __esm2({ "../../node_modules/loupe/lib/arguments.js"() {
      "use strict";
      init_helpers();
    } });
    function inspectObject2(error, options2) {
      let properties = Object.getOwnPropertyNames(error).filter((key2) => errorKeys.indexOf(key2) === -1), name2 = error.name;
      options2.truncate -= name2.length;
      let message = "";
      typeof error.message == "string" ? message = truncate(error.message, options2.truncate) : properties.unshift("message"), message = message ? `: ${message}` : "", options2.truncate -= message.length + 5;
      let propertyContents = inspectList(properties.map((key2) => [key2, error[key2]]), options2, inspectProperty);
      return `${name2}${message}${propertyContents ? ` { ${propertyContents} }` : ""}`;
    }
    var errorKeys;
    var init_error = __esm2({ "../../node_modules/loupe/lib/error.js"() {
      "use strict";
      init_helpers();
      errorKeys = ["stack", "line", "column", "name", "message", "fileName", "lineNumber", "columnNumber", "number", "description"];
    } });
    function inspectAttribute([key2, value2], options2) {
      return options2.truncate -= 3, value2 ? `${options2.stylize(key2, "yellow")}=${options2.stylize(`"${value2}"`, "string")}` : `${options2.stylize(key2, "yellow")}`;
    }
    function inspectHTMLCollection(collection, options2) {
      return inspectList(collection, options2, inspectHTML, `
`);
    }
    function inspectHTML(element, options2) {
      let properties = element.getAttributeNames(), name2 = element.tagName.toLowerCase(), head = options2.stylize(`<${name2}`, "special"), headClose = options2.stylize(">", "special"), tail = options2.stylize(`</${name2}>`, "special");
      options2.truncate -= name2.length * 2 + 5;
      let propertyContents = "";
      properties.length > 0 && (propertyContents += " ", propertyContents += inspectList(properties.map((key2) => [key2, element.getAttribute(key2)]), options2, inspectAttribute, " ")), options2.truncate -= propertyContents.length;
      let truncate2 = options2.truncate, children2 = inspectHTMLCollection(element.children, options2);
      return children2 && children2.length > truncate2 && (children2 = `${truncator}(${element.children.length})`), `${head}${propertyContents}${headClose}${children2}${tail}`;
    }
    var init_html = __esm2({ "../../node_modules/loupe/lib/html.js"() {
      "use strict";
      init_helpers();
    } });
    var loupe_exports = {};
    __export2(loupe_exports, { custom: () => custom, default: () => loupe_default, inspect: () => inspect, registerConstructor: () => registerConstructor, registerStringTag: () => registerStringTag });
    function FakeMap() {
      this.key = "chai/loupe__" + Math.random() + Date.now();
    }
    function inspect(value2, options2) {
      options2 = normaliseOptions(options2), options2.inspect = inspect;
      let { customInspect } = options2, type3 = value2 === null ? "null" : typeof value2;
      if (type3 === "object" && (type3 = toString2.call(value2).slice(8, -1)), baseTypesMap[type3])
        return baseTypesMap[type3](value2, options2);
      if (customInspect && value2) {
        let output = inspectCustom(value2, options2, type3);
        if (output)
          return typeof output == "string" ? output : inspect(output, options2);
      }
      let proto = value2 ? Object.getPrototypeOf(value2) : false;
      return proto === Object.prototype || proto === null ? inspectObject(value2, options2) : value2 && typeof HTMLElement == "function" && value2 instanceof HTMLElement ? inspectHTML(value2, options2) : "constructor" in value2 ? value2.constructor !== Object ? inspectClass(value2, options2) : inspectObject(value2, options2) : value2 === Object(value2) ? inspectObject(value2, options2) : options2.stylize(String(value2), type3);
    }
    function registerConstructor(constructor, inspector) {
      return constructorMap.has(constructor) ? false : (constructorMap.set(constructor, inspector), true);
    }
    function registerStringTag(stringTag, inspector) {
      return stringTag in stringTagMap ? false : (stringTagMap[stringTag] = inspector, true);
    }
    var symbolsSupported;
    var chaiInspect;
    var nodeInspect;
    var constructorMap;
    var stringTagMap;
    var baseTypesMap;
    var inspectCustom;
    var toString2;
    var custom;
    var loupe_default;
    var init_loupe = __esm2({ "../../node_modules/loupe/index.js"() {
      "use strict";
      init_array();
      init_typedarray();
      init_date();
      init_function();
      init_map();
      init_number();
      init_bigint();
      init_regexp();
      init_set();
      init_string();
      init_symbol();
      init_promise();
      init_class();
      init_object();
      init_arguments();
      init_error();
      init_html();
      init_helpers();
      symbolsSupported = typeof Symbol == "function" && typeof Symbol.for == "function", chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect", nodeInspect = false;
      try {
        let nodeUtil = require("util");
        nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
      } catch {
        nodeInspect = false;
      }
      FakeMap.prototype = { get: function(key2) {
        return key2[this.key];
      }, has: function(key2) {
        return this.key in key2;
      }, set: function(key2, value2) {
        Object.isExtensible(key2) && Object.defineProperty(key2, this.key, { value: value2, configurable: true });
      } };
      constructorMap = new (typeof WeakMap == "function" ? WeakMap : FakeMap)(), stringTagMap = {}, baseTypesMap = { undefined: (value2, options2) => options2.stylize("undefined", "undefined"), null: (value2, options2) => options2.stylize(null, "null"), boolean: (value2, options2) => options2.stylize(value2, "boolean"), Boolean: (value2, options2) => options2.stylize(value2, "boolean"), number: inspectNumber, Number: inspectNumber, bigint: inspectBigInt, BigInt: inspectBigInt, string: inspectString, String: inspectString, function: inspectFunction, Function: inspectFunction, symbol: inspectSymbol, Symbol: inspectSymbol, Array: inspectArray, Date: inspectDate, Map: inspectMap, Set: inspectSet, RegExp: inspectRegExp, Promise: promise_default, WeakSet: (value2, options2) => options2.stylize("WeakSet{\u2026}", "special"), WeakMap: (value2, options2) => options2.stylize("WeakMap{\u2026}", "special"), Arguments: inspectArguments, Int8Array: inspectTypedArray, Uint8Array: inspectTypedArray, Uint8ClampedArray: inspectTypedArray, Int16Array: inspectTypedArray, Uint16Array: inspectTypedArray, Int32Array: inspectTypedArray, Uint32Array: inspectTypedArray, Float32Array: inspectTypedArray, Float64Array: inspectTypedArray, Generator: () => "", DataView: () => "", ArrayBuffer: () => "", Error: inspectObject2, HTMLCollection: inspectHTMLCollection, NodeList: inspectHTMLCollection }, inspectCustom = (value2, options2, type3) => chaiInspect in value2 && typeof value2[chaiInspect] == "function" ? value2[chaiInspect](options2) : nodeInspect && nodeInspect in value2 && typeof value2[nodeInspect] == "function" ? value2[nodeInspect](options2.depth, options2) : "inspect" in value2 && typeof value2.inspect == "function" ? value2.inspect(options2.depth, options2) : "constructor" in value2 && constructorMap.has(value2.constructor) ? constructorMap.get(value2.constructor)(value2, options2) : stringTagMap[type3] ? stringTagMap[type3](value2, options2) : "", toString2 = Object.prototype.toString;
      custom = chaiInspect, loupe_default = inspect;
    } });
    var require_config = __commonJS3({ "../../node_modules/chai/lib/chai/config.js"(exports22, module22) {
      "use strict";
      module22.exports = { includeStack: false, showDiff: true, truncateThreshold: 40, useProxy: true, proxyExcludedKeys: ["then", "catch", "inspect", "toJSON"], deepEqual: null };
    } });
    var require_inspect = __commonJS3({ "../../node_modules/chai/lib/chai/utils/inspect.js"(exports22, module22) {
      "use strict";
      var getName = require_get_func_name(), loupe = (init_loupe(), __toCommonJS2(loupe_exports)), config3 = require_config();
      module22.exports = inspect3;
      function inspect3(obj, showHidden, depth, colors) {
        var options2 = { colors, depth: typeof depth > "u" ? 2 : depth, showHidden, truncate: config3.truncateThreshold ? config3.truncateThreshold : 1 / 0 };
        return loupe.inspect(obj, options2);
      }
    } });
    var require_objDisplay = __commonJS3({ "../../node_modules/chai/lib/chai/utils/objDisplay.js"(exports22, module22) {
      "use strict";
      var inspect3 = require_inspect(), config3 = require_config();
      module22.exports = function(obj) {
        var str = inspect3(obj), type3 = Object.prototype.toString.call(obj);
        if (config3.truncateThreshold && str.length >= config3.truncateThreshold) {
          if (type3 === "[object Function]")
            return !obj.name || obj.name === "" ? "[Function]" : "[Function: " + obj.name + "]";
          if (type3 === "[object Array]")
            return "[ Array(" + obj.length + ") ]";
          if (type3 === "[object Object]") {
            var keys2 = Object.keys(obj), kstr = keys2.length > 2 ? keys2.splice(0, 2).join(", ") + ", ..." : keys2.join(", ");
            return "{ Object (" + kstr + ") }";
          } else
            return str;
        } else
          return str;
      };
    } });
    var require_getMessage = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getMessage.js"(exports22, module22) {
      "use strict";
      var flag = require_flag(), getActual = require_getActual(), objDisplay2 = require_objDisplay();
      module22.exports = function(obj, args2) {
        var negate = flag(obj, "negate"), val = flag(obj, "object"), expected = args2[3], actual = getActual(obj, args2), msg = negate ? args2[2] : args2[1], flagMsg = flag(obj, "message");
        return typeof msg == "function" && (msg = msg()), msg = msg || "", msg = msg.replace(/#\{this\}/g, function() {
          return objDisplay2(val);
        }).replace(/#\{act\}/g, function() {
          return objDisplay2(actual);
        }).replace(/#\{exp\}/g, function() {
          return objDisplay2(expected);
        }), flagMsg ? flagMsg + ": " + msg : msg;
      };
    } });
    var require_transferFlags = __commonJS3({ "../../node_modules/chai/lib/chai/utils/transferFlags.js"(exports22, module22) {
      "use strict";
      module22.exports = function(assertion, object, includeAll) {
        var flags = assertion.__flags || (assertion.__flags = /* @__PURE__ */ Object.create(null));
        object.__flags || (object.__flags = /* @__PURE__ */ Object.create(null)), includeAll = arguments.length === 3 ? includeAll : true;
        for (var flag in flags)
          (includeAll || flag !== "object" && flag !== "ssfi" && flag !== "lockSsfi" && flag != "message") && (object.__flags[flag] = flags[flag]);
      };
    } });
    var require_deep_eql = __commonJS3({ "../../node_modules/deep-eql/index.js"(exports22, module22) {
      "use strict";
      var type3 = require_type_detect();
      function FakeMap2() {
        this._key = "chai/deep-eql__" + Math.random() + Date.now();
      }
      FakeMap2.prototype = { get: function(key2) {
        return key2[this._key];
      }, set: function(key2, value2) {
        Object.isExtensible(key2) && Object.defineProperty(key2, this._key, { value: value2, configurable: true });
      } };
      var MemoizeMap = typeof WeakMap == "function" ? WeakMap : FakeMap2;
      function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
        if (!memoizeMap || isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand))
          return null;
        var leftHandMap = memoizeMap.get(leftHandOperand);
        if (leftHandMap) {
          var result2 = leftHandMap.get(rightHandOperand);
          if (typeof result2 == "boolean")
            return result2;
        }
        return null;
      }
      function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result2) {
        if (!(!memoizeMap || isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand))) {
          var leftHandMap = memoizeMap.get(leftHandOperand);
          leftHandMap ? leftHandMap.set(rightHandOperand, result2) : (leftHandMap = new MemoizeMap(), leftHandMap.set(rightHandOperand, result2), memoizeMap.set(leftHandOperand, leftHandMap));
        }
      }
      module22.exports = deepEqual;
      module22.exports.MemoizeMap = MemoizeMap;
      function deepEqual(leftHandOperand, rightHandOperand, options2) {
        if (options2 && options2.comparator)
          return extensiveDeepEqual(leftHandOperand, rightHandOperand, options2);
        var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
        return simpleResult !== null ? simpleResult : extensiveDeepEqual(leftHandOperand, rightHandOperand, options2);
      }
      function simpleEqual(leftHandOperand, rightHandOperand) {
        return leftHandOperand === rightHandOperand ? leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand : leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand ? true : isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand) ? false : null;
      }
      function extensiveDeepEqual(leftHandOperand, rightHandOperand, options2) {
        options2 = options2 || {}, options2.memoize = options2.memoize === false ? false : options2.memoize || new MemoizeMap();
        var comparator = options2 && options2.comparator, memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options2.memoize);
        if (memoizeResultLeft !== null)
          return memoizeResultLeft;
        var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options2.memoize);
        if (memoizeResultRight !== null)
          return memoizeResultRight;
        if (comparator) {
          var comparatorResult = comparator(leftHandOperand, rightHandOperand);
          if (comparatorResult === false || comparatorResult === true)
            return memoizeSet(leftHandOperand, rightHandOperand, options2.memoize, comparatorResult), comparatorResult;
          var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
          if (simpleResult !== null)
            return simpleResult;
        }
        var leftHandType = type3(leftHandOperand);
        if (leftHandType !== type3(rightHandOperand))
          return memoizeSet(leftHandOperand, rightHandOperand, options2.memoize, false), false;
        memoizeSet(leftHandOperand, rightHandOperand, options2.memoize, true);
        var result2 = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options2);
        return memoizeSet(leftHandOperand, rightHandOperand, options2.memoize, result2), result2;
      }
      function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options2) {
        switch (leftHandType) {
          case "String":
          case "Number":
          case "Boolean":
          case "Date":
            return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
          case "Promise":
          case "Symbol":
          case "function":
          case "WeakMap":
          case "WeakSet":
            return leftHandOperand === rightHandOperand;
          case "Error":
            return keysEqual(leftHandOperand, rightHandOperand, ["name", "message", "code"], options2);
          case "Arguments":
          case "Int8Array":
          case "Uint8Array":
          case "Uint8ClampedArray":
          case "Int16Array":
          case "Uint16Array":
          case "Int32Array":
          case "Uint32Array":
          case "Float32Array":
          case "Float64Array":
          case "Array":
            return iterableEqual(leftHandOperand, rightHandOperand, options2);
          case "RegExp":
            return regexpEqual(leftHandOperand, rightHandOperand);
          case "Generator":
            return generatorEqual(leftHandOperand, rightHandOperand, options2);
          case "DataView":
            return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options2);
          case "ArrayBuffer":
            return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options2);
          case "Set":
            return entriesEqual(leftHandOperand, rightHandOperand, options2);
          case "Map":
            return entriesEqual(leftHandOperand, rightHandOperand, options2);
          case "Temporal.PlainDate":
          case "Temporal.PlainTime":
          case "Temporal.PlainDateTime":
          case "Temporal.Instant":
          case "Temporal.ZonedDateTime":
          case "Temporal.PlainYearMonth":
          case "Temporal.PlainMonthDay":
            return leftHandOperand.equals(rightHandOperand);
          case "Temporal.Duration":
            return leftHandOperand.total("nanoseconds") === rightHandOperand.total("nanoseconds");
          case "Temporal.TimeZone":
          case "Temporal.Calendar":
            return leftHandOperand.toString() === rightHandOperand.toString();
          default:
            return objectEqual(leftHandOperand, rightHandOperand, options2);
        }
      }
      function regexpEqual(leftHandOperand, rightHandOperand) {
        return leftHandOperand.toString() === rightHandOperand.toString();
      }
      function entriesEqual(leftHandOperand, rightHandOperand, options2) {
        if (leftHandOperand.size !== rightHandOperand.size)
          return false;
        if (leftHandOperand.size === 0)
          return true;
        var leftHandItems = [], rightHandItems = [];
        return leftHandOperand.forEach(function(key2, value2) {
          leftHandItems.push([key2, value2]);
        }), rightHandOperand.forEach(function(key2, value2) {
          rightHandItems.push([key2, value2]);
        }), iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options2);
      }
      function iterableEqual(leftHandOperand, rightHandOperand, options2) {
        var length = leftHandOperand.length;
        if (length !== rightHandOperand.length)
          return false;
        if (length === 0)
          return true;
        for (var index = -1; ++index < length; )
          if (deepEqual(leftHandOperand[index], rightHandOperand[index], options2) === false)
            return false;
        return true;
      }
      function generatorEqual(leftHandOperand, rightHandOperand, options2) {
        return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options2);
      }
      function hasIteratorFunction(target) {
        return typeof Symbol < "u" && typeof target == "object" && typeof Symbol.iterator < "u" && typeof target[Symbol.iterator] == "function";
      }
      function getIteratorEntries(target) {
        if (hasIteratorFunction(target))
          try {
            return getGeneratorEntries(target[Symbol.iterator]());
          } catch {
            return [];
          }
        return [];
      }
      function getGeneratorEntries(generator) {
        for (var generatorResult = generator.next(), accumulator = [generatorResult.value]; generatorResult.done === false; )
          generatorResult = generator.next(), accumulator.push(generatorResult.value);
        return accumulator;
      }
      function getEnumerableKeys(target) {
        var keys2 = [];
        for (var key2 in target)
          keys2.push(key2);
        return keys2;
      }
      function getEnumerableSymbols(target) {
        for (var keys2 = [], allKeys = Object.getOwnPropertySymbols(target), i = 0; i < allKeys.length; i += 1) {
          var key2 = allKeys[i];
          Object.getOwnPropertyDescriptor(target, key2).enumerable && keys2.push(key2);
        }
        return keys2;
      }
      function keysEqual(leftHandOperand, rightHandOperand, keys2, options2) {
        var length = keys2.length;
        if (length === 0)
          return true;
        for (var i = 0; i < length; i += 1)
          if (deepEqual(leftHandOperand[keys2[i]], rightHandOperand[keys2[i]], options2) === false)
            return false;
        return true;
      }
      function objectEqual(leftHandOperand, rightHandOperand, options2) {
        var leftHandKeys = getEnumerableKeys(leftHandOperand), rightHandKeys = getEnumerableKeys(rightHandOperand), leftHandSymbols = getEnumerableSymbols(leftHandOperand), rightHandSymbols = getEnumerableSymbols(rightHandOperand);
        if (leftHandKeys = leftHandKeys.concat(leftHandSymbols), rightHandKeys = rightHandKeys.concat(rightHandSymbols), leftHandKeys.length && leftHandKeys.length === rightHandKeys.length)
          return iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false ? false : keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options2);
        var leftHandEntries = getIteratorEntries(leftHandOperand), rightHandEntries = getIteratorEntries(rightHandOperand);
        return leftHandEntries.length && leftHandEntries.length === rightHandEntries.length ? (leftHandEntries.sort(), rightHandEntries.sort(), iterableEqual(leftHandEntries, rightHandEntries, options2)) : leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0;
      }
      function isPrimitive2(value2) {
        return value2 === null || typeof value2 != "object";
      }
      function mapSymbols(arr) {
        return arr.map(function(entry) {
          return typeof entry == "symbol" ? entry.toString() : entry;
        });
      }
    } });
    var require_isProxyEnabled = __commonJS3({ "../../node_modules/chai/lib/chai/utils/isProxyEnabled.js"(exports22, module22) {
      "use strict";
      var config3 = require_config();
      module22.exports = function() {
        return config3.useProxy && typeof Proxy < "u" && typeof Reflect < "u";
      };
    } });
    var require_addProperty = __commonJS3({ "../../node_modules/chai/lib/chai/utils/addProperty.js"(exports22, module22) {
      "use strict";
      var chai2 = require_chai(), flag = require_flag(), isProxyEnabled = require_isProxyEnabled(), transferFlags = require_transferFlags();
      module22.exports = function(ctx, name2, getter) {
        getter = getter === void 0 ? function() {
        } : getter, Object.defineProperty(ctx, name2, { get: function propertyGetter() {
          !isProxyEnabled() && !flag(this, "lockSsfi") && flag(this, "ssfi", propertyGetter);
          var result2 = getter.call(this);
          if (result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        }, configurable: true });
      };
    } });
    var require_addLengthGuard = __commonJS3({ "../../node_modules/chai/lib/chai/utils/addLengthGuard.js"(exports22, module22) {
      "use strict";
      var fnLengthDesc = Object.getOwnPropertyDescriptor(function() {
      }, "length");
      module22.exports = function(fn3, assertionName, isChainable) {
        return fnLengthDesc.configurable && Object.defineProperty(fn3, "length", { get: function() {
          throw Error(isChainable ? "Invalid Chai property: " + assertionName + '.length. Due to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.' : "Invalid Chai property: " + assertionName + '.length. See docs for proper usage of "' + assertionName + '".');
        } }), fn3;
      };
    } });
    var require_getProperties = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getProperties.js"(exports22, module22) {
      "use strict";
      module22.exports = function(object) {
        var result2 = Object.getOwnPropertyNames(object);
        function addProperty(property) {
          result2.indexOf(property) === -1 && result2.push(property);
        }
        for (var proto = Object.getPrototypeOf(object); proto !== null; )
          Object.getOwnPropertyNames(proto).forEach(addProperty), proto = Object.getPrototypeOf(proto);
        return result2;
      };
    } });
    var require_proxify = __commonJS3({ "../../node_modules/chai/lib/chai/utils/proxify.js"(exports22, module22) {
      "use strict";
      var config3 = require_config(), flag = require_flag(), getProperties = require_getProperties(), isProxyEnabled = require_isProxyEnabled();
      var builtins = ["__flags", "__methods", "_obj", "assert"];
      module22.exports = function(obj, nonChainableMethodName) {
        return isProxyEnabled() ? new Proxy(obj, { get: function proxyGetter(target, property) {
          if (typeof property == "string" && config3.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
            if (nonChainableMethodName)
              throw Error("Invalid Chai property: " + nonChainableMethodName + "." + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
            var suggestion = null, suggestionDistance = 4;
            throw getProperties(target).forEach(function(prop) {
              if (!Object.prototype.hasOwnProperty(prop) && builtins.indexOf(prop) === -1) {
                var dist = stringDistanceCapped(property, prop, suggestionDistance);
                dist < suggestionDistance && (suggestion = prop, suggestionDistance = dist);
              }
            }), Error(suggestion !== null ? "Invalid Chai property: " + property + '. Did you mean "' + suggestion + '"?' : "Invalid Chai property: " + property);
          }
          return builtins.indexOf(property) === -1 && !flag(target, "lockSsfi") && flag(target, "ssfi", proxyGetter), Reflect.get(target, property);
        } }) : obj;
      };
      function stringDistanceCapped(strA, strB, cap) {
        if (Math.abs(strA.length - strB.length) >= cap)
          return cap;
        for (var memo = [], i = 0; i <= strA.length; i++)
          memo[i] = Array(strB.length + 1).fill(0), memo[i][0] = i;
        for (var j = 0; j < strB.length; j++)
          memo[0][j] = j;
        for (var i = 1; i <= strA.length; i++)
          for (var ch = strA.charCodeAt(i - 1), j = 1; j <= strB.length; j++) {
            if (Math.abs(i - j) >= cap) {
              memo[i][j] = cap;
              continue;
            }
            memo[i][j] = Math.min(memo[i - 1][j] + 1, memo[i][j - 1] + 1, memo[i - 1][j - 1] + (ch === strB.charCodeAt(j - 1) ? 0 : 1));
          }
        return memo[strA.length][strB.length];
      }
    } });
    var require_addMethod = __commonJS3({ "../../node_modules/chai/lib/chai/utils/addMethod.js"(exports22, module22) {
      "use strict";
      var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
      module22.exports = function(ctx, name2, method) {
        var methodWrapper = function() {
          flag(this, "lockSsfi") || flag(this, "ssfi", methodWrapper);
          var result2 = method.apply(this, arguments);
          if (result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        };
        addLengthGuard(methodWrapper, name2, false), ctx[name2] = proxify(methodWrapper, name2);
      };
    } });
    var require_overwriteProperty = __commonJS3({ "../../node_modules/chai/lib/chai/utils/overwriteProperty.js"(exports22, module22) {
      "use strict";
      var chai2 = require_chai(), flag = require_flag(), isProxyEnabled = require_isProxyEnabled(), transferFlags = require_transferFlags();
      module22.exports = function(ctx, name2, getter) {
        var _get = Object.getOwnPropertyDescriptor(ctx, name2), _super = function() {
        };
        _get && typeof _get.get == "function" && (_super = _get.get), Object.defineProperty(ctx, name2, { get: function overwritingPropertyGetter() {
          !isProxyEnabled() && !flag(this, "lockSsfi") && flag(this, "ssfi", overwritingPropertyGetter);
          var origLockSsfi = flag(this, "lockSsfi");
          flag(this, "lockSsfi", true);
          var result2 = getter(_super).call(this);
          if (flag(this, "lockSsfi", origLockSsfi), result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        }, configurable: true });
      };
    } });
    var require_overwriteMethod = __commonJS3({ "../../node_modules/chai/lib/chai/utils/overwriteMethod.js"(exports22, module22) {
      "use strict";
      var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
      module22.exports = function(ctx, name2, method) {
        var _method = ctx[name2], _super = function() {
          throw new Error(name2 + " is not a function");
        };
        _method && typeof _method == "function" && (_super = _method);
        var overwritingMethodWrapper = function() {
          flag(this, "lockSsfi") || flag(this, "ssfi", overwritingMethodWrapper);
          var origLockSsfi = flag(this, "lockSsfi");
          flag(this, "lockSsfi", true);
          var result2 = method(_super).apply(this, arguments);
          if (flag(this, "lockSsfi", origLockSsfi), result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        };
        addLengthGuard(overwritingMethodWrapper, name2, false), ctx[name2] = proxify(overwritingMethodWrapper, name2);
      };
    } });
    var require_addChainableMethod = __commonJS3({ "../../node_modules/chai/lib/chai/utils/addChainableMethod.js"(exports22, module22) {
      "use strict";
      var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
      var canSetPrototype = typeof Object.setPrototypeOf == "function", testFn = function() {
      }, excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name2) {
        var propDesc = Object.getOwnPropertyDescriptor(testFn, name2);
        return typeof propDesc != "object" ? true : !propDesc.configurable;
      }), call = Function.prototype.call, apply = Function.prototype.apply;
      module22.exports = function(ctx, name2, method, chainingBehavior) {
        typeof chainingBehavior != "function" && (chainingBehavior = function() {
        });
        var chainableBehavior = { method, chainingBehavior };
        ctx.__methods || (ctx.__methods = {}), ctx.__methods[name2] = chainableBehavior, Object.defineProperty(ctx, name2, { get: function() {
          chainableBehavior.chainingBehavior.call(this);
          var chainableMethodWrapper = function() {
            flag(this, "lockSsfi") || flag(this, "ssfi", chainableMethodWrapper);
            var result2 = chainableBehavior.method.apply(this, arguments);
            if (result2 !== void 0)
              return result2;
            var newAssertion = new chai2.Assertion();
            return transferFlags(this, newAssertion), newAssertion;
          };
          if (addLengthGuard(chainableMethodWrapper, name2, true), canSetPrototype) {
            var prototype = Object.create(this);
            prototype.call = call, prototype.apply = apply, Object.setPrototypeOf(chainableMethodWrapper, prototype);
          } else {
            var asserterNames = Object.getOwnPropertyNames(ctx);
            asserterNames.forEach(function(asserterName) {
              if (excludeNames.indexOf(asserterName) === -1) {
                var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
                Object.defineProperty(chainableMethodWrapper, asserterName, pd);
              }
            });
          }
          return transferFlags(this, chainableMethodWrapper), proxify(chainableMethodWrapper);
        }, configurable: true });
      };
    } });
    var require_overwriteChainableMethod = __commonJS3({ "../../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js"(exports22, module22) {
      "use strict";
      var chai2 = require_chai(), transferFlags = require_transferFlags();
      module22.exports = function(ctx, name2, method, chainingBehavior) {
        var chainableBehavior = ctx.__methods[name2], _chainingBehavior = chainableBehavior.chainingBehavior;
        chainableBehavior.chainingBehavior = function() {
          var result2 = chainingBehavior(_chainingBehavior).call(this);
          if (result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        };
        var _method = chainableBehavior.method;
        chainableBehavior.method = function() {
          var result2 = method(_method).apply(this, arguments);
          if (result2 !== void 0)
            return result2;
          var newAssertion = new chai2.Assertion();
          return transferFlags(this, newAssertion), newAssertion;
        };
      };
    } });
    var require_compareByInspect = __commonJS3({ "../../node_modules/chai/lib/chai/utils/compareByInspect.js"(exports22, module22) {
      "use strict";
      var inspect3 = require_inspect();
      module22.exports = function(a, b2) {
        return inspect3(a) < inspect3(b2) ? -1 : 1;
      };
    } });
    var require_getOwnEnumerablePropertySymbols = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js"(exports22, module22) {
      "use strict";
      module22.exports = function(obj) {
        return typeof Object.getOwnPropertySymbols != "function" ? [] : Object.getOwnPropertySymbols(obj).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
        });
      };
    } });
    var require_getOwnEnumerableProperties = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js"(exports22, module22) {
      "use strict";
      var getOwnEnumerablePropertySymbols = require_getOwnEnumerablePropertySymbols();
      module22.exports = function(obj) {
        return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
      };
    } });
    var require_check_error = __commonJS3({ "../../node_modules/check-error/index.js"(exports22, module22) {
      "use strict";
      var getFunctionName2 = require_get_func_name();
      function compatibleInstance(thrown, errorLike) {
        return errorLike instanceof Error && thrown === errorLike;
      }
      function compatibleConstructor(thrown, errorLike) {
        return errorLike instanceof Error ? thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor : errorLike.prototype instanceof Error || errorLike === Error ? thrown.constructor === errorLike || thrown instanceof errorLike : false;
      }
      function compatibleMessage(thrown, errMatcher) {
        var comparisonString = typeof thrown == "string" ? thrown : thrown.message;
        return errMatcher instanceof RegExp ? errMatcher.test(comparisonString) : typeof errMatcher == "string" ? comparisonString.indexOf(errMatcher) !== -1 : false;
      }
      function getConstructorName(errorLike) {
        var constructorName = errorLike;
        if (errorLike instanceof Error)
          constructorName = getFunctionName2(errorLike.constructor);
        else if (typeof errorLike == "function" && (constructorName = getFunctionName2(errorLike), constructorName === "")) {
          var newConstructorName = getFunctionName2(new errorLike());
          constructorName = newConstructorName || constructorName;
        }
        return constructorName;
      }
      function getMessage2(errorLike) {
        var msg = "";
        return errorLike && errorLike.message ? msg = errorLike.message : typeof errorLike == "string" && (msg = errorLike), msg;
      }
      module22.exports = { compatibleInstance, compatibleConstructor, compatibleMessage, getMessage: getMessage2, getConstructorName };
    } });
    var require_isNaN = __commonJS3({ "../../node_modules/chai/lib/chai/utils/isNaN.js"(exports22, module22) {
      "use strict";
      function isNaN3(value2) {
        return value2 !== value2;
      }
      module22.exports = Number.isNaN || isNaN3;
    } });
    var require_getOperator = __commonJS3({ "../../node_modules/chai/lib/chai/utils/getOperator.js"(exports22, module22) {
      "use strict";
      var type3 = require_type_detect(), flag = require_flag();
      function isObjectType(obj) {
        var objectType = type3(obj), objectTypes = ["Array", "Object", "function"];
        return objectTypes.indexOf(objectType) !== -1;
      }
      module22.exports = function(obj, args2) {
        var operator = flag(obj, "operator"), negate = flag(obj, "negate"), expected = args2[3], msg = negate ? args2[2] : args2[1];
        if (operator)
          return operator;
        if (typeof msg == "function" && (msg = msg()), msg = msg || "", !!msg && !/\shave\s/.test(msg)) {
          var isObject22 = isObjectType(expected);
          return /\snot\s/.test(msg) ? isObject22 ? "notDeepStrictEqual" : "notStrictEqual" : isObject22 ? "deepStrictEqual" : "strictEqual";
        }
      };
    } });
    var require_utils2 = __commonJS3({ "../../node_modules/chai/lib/chai/utils/index.js"(exports22) {
      "use strict";
      var pathval = require_pathval();
      exports22.test = require_test();
      exports22.type = require_type_detect();
      exports22.expectTypes = require_expectTypes();
      exports22.getMessage = require_getMessage();
      exports22.getActual = require_getActual();
      exports22.inspect = require_inspect();
      exports22.objDisplay = require_objDisplay();
      exports22.flag = require_flag();
      exports22.transferFlags = require_transferFlags();
      exports22.eql = require_deep_eql();
      exports22.getPathInfo = pathval.getPathInfo;
      exports22.hasProperty = pathval.hasProperty;
      exports22.getName = require_get_func_name();
      exports22.addProperty = require_addProperty();
      exports22.addMethod = require_addMethod();
      exports22.overwriteProperty = require_overwriteProperty();
      exports22.overwriteMethod = require_overwriteMethod();
      exports22.addChainableMethod = require_addChainableMethod();
      exports22.overwriteChainableMethod = require_overwriteChainableMethod();
      exports22.compareByInspect = require_compareByInspect();
      exports22.getOwnEnumerablePropertySymbols = require_getOwnEnumerablePropertySymbols();
      exports22.getOwnEnumerableProperties = require_getOwnEnumerableProperties();
      exports22.checkError = require_check_error();
      exports22.proxify = require_proxify();
      exports22.addLengthGuard = require_addLengthGuard();
      exports22.isProxyEnabled = require_isProxyEnabled();
      exports22.isNaN = require_isNaN();
      exports22.getOperator = require_getOperator();
    } });
    var require_assertion = __commonJS3({ "../../node_modules/chai/lib/chai/assertion.js"(exports22, module22) {
      "use strict";
      var config3 = require_config();
      module22.exports = function(_chai, util2) {
        var AssertionError2 = _chai.AssertionError, flag = util2.flag;
        _chai.Assertion = Assertion2;
        function Assertion2(obj, msg, ssfi, lockSsfi) {
          return flag(this, "ssfi", ssfi || Assertion2), flag(this, "lockSsfi", lockSsfi), flag(this, "object", obj), flag(this, "message", msg), flag(this, "eql", config3.deepEqual || util2.eql), util2.proxify(this);
        }
        Object.defineProperty(Assertion2, "includeStack", { get: function() {
          return console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."), config3.includeStack;
        }, set: function(value2) {
          console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."), config3.includeStack = value2;
        } }), Object.defineProperty(Assertion2, "showDiff", { get: function() {
          return console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."), config3.showDiff;
        }, set: function(value2) {
          console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."), config3.showDiff = value2;
        } }), Assertion2.addProperty = function(name2, fn3) {
          util2.addProperty(this.prototype, name2, fn3);
        }, Assertion2.addMethod = function(name2, fn3) {
          util2.addMethod(this.prototype, name2, fn3);
        }, Assertion2.addChainableMethod = function(name2, fn3, chainingBehavior) {
          util2.addChainableMethod(this.prototype, name2, fn3, chainingBehavior);
        }, Assertion2.overwriteProperty = function(name2, fn3) {
          util2.overwriteProperty(this.prototype, name2, fn3);
        }, Assertion2.overwriteMethod = function(name2, fn3) {
          util2.overwriteMethod(this.prototype, name2, fn3);
        }, Assertion2.overwriteChainableMethod = function(name2, fn3, chainingBehavior) {
          util2.overwriteChainableMethod(this.prototype, name2, fn3, chainingBehavior);
        }, Assertion2.prototype.assert = function(expr, msg, negateMsg, expected, _actual, showDiff) {
          var ok = util2.test(this, arguments);
          if (showDiff !== false && (showDiff = true), expected === void 0 && _actual === void 0 && (showDiff = false), config3.showDiff !== true && (showDiff = false), !ok) {
            msg = util2.getMessage(this, arguments);
            var actual = util2.getActual(this, arguments), assertionErrorObjectProperties = { actual, expected, showDiff }, operator = util2.getOperator(this, arguments);
            throw operator && (assertionErrorObjectProperties.operator = operator), new AssertionError2(msg, assertionErrorObjectProperties, config3.includeStack ? this.assert : flag(this, "ssfi"));
          }
        };
        Object.defineProperty(Assertion2.prototype, "_obj", { get: function() {
          return flag(this, "object");
        }, set: function(val) {
          flag(this, "object", val);
        } });
      };
    } });
    var require_assertions = __commonJS3({ "../../node_modules/chai/lib/chai/core/assertions.js"(exports22, module22) {
      "use strict";
      module22.exports = function(chai2, _) {
        var Assertion2 = chai2.Assertion, AssertionError2 = chai2.AssertionError, flag = _.flag;
        ["to", "be", "been", "is", "and", "has", "have", "with", "that", "which", "at", "of", "same", "but", "does", "still", "also"].forEach(function(chain) {
          Assertion2.addProperty(chain);
        }), Assertion2.addProperty("not", function() {
          flag(this, "negate", true);
        }), Assertion2.addProperty("deep", function() {
          flag(this, "deep", true);
        }), Assertion2.addProperty("nested", function() {
          flag(this, "nested", true);
        }), Assertion2.addProperty("own", function() {
          flag(this, "own", true);
        }), Assertion2.addProperty("ordered", function() {
          flag(this, "ordered", true);
        }), Assertion2.addProperty("any", function() {
          flag(this, "any", true), flag(this, "all", false);
        }), Assertion2.addProperty("all", function() {
          flag(this, "all", true), flag(this, "any", false);
        });
        function an(type3, msg) {
          msg && flag(this, "message", msg), type3 = type3.toLowerCase();
          var obj = flag(this, "object"), article = ~["a", "e", "i", "o", "u"].indexOf(type3.charAt(0)) ? "an " : "a ";
          this.assert(type3 === _.type(obj).toLowerCase(), "expected #{this} to be " + article + type3, "expected #{this} not to be " + article + type3);
        }
        Assertion2.addChainableMethod("an", an), Assertion2.addChainableMethod("a", an);
        function SameValueZero(a, b2) {
          return _.isNaN(a) && _.isNaN(b2) || a === b2;
        }
        function includeChainingBehavior() {
          flag(this, "contains", true);
        }
        function include(val, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, "message"), negate = flag(this, "negate"), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), descriptor = isDeep ? "deep " : "", isEql = isDeep ? flag(this, "eql") : SameValueZero;
          flagMsg = flagMsg ? flagMsg + ": " : "";
          var included = false;
          switch (objType) {
            case "string":
              included = obj.indexOf(val) !== -1;
              break;
            case "weakset":
              if (isDeep)
                throw new AssertionError2(flagMsg + "unable to use .deep.include with WeakSet", void 0, ssfi);
              included = obj.has(val);
              break;
            case "map":
              obj.forEach(function(item) {
                included = included || isEql(item, val);
              });
              break;
            case "set":
              isDeep ? obj.forEach(function(item) {
                included = included || isEql(item, val);
              }) : included = obj.has(val);
              break;
            case "array":
              isDeep ? included = obj.some(function(item) {
                return isEql(item, val);
              }) : included = obj.indexOf(val) !== -1;
              break;
            default:
              if (val !== Object(val))
                throw new AssertionError2(flagMsg + "the given combination of arguments (" + objType + " and " + _.type(val).toLowerCase() + ") is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a " + _.type(val).toLowerCase(), void 0, ssfi);
              var props = Object.keys(val), firstErr = null, numErrs = 0;
              if (props.forEach(function(prop) {
                var propAssertion = new Assertion2(obj);
                if (_.transferFlags(this, propAssertion, true), flag(propAssertion, "lockSsfi", true), !negate || props.length === 1) {
                  propAssertion.property(prop, val[prop]);
                  return;
                }
                try {
                  propAssertion.property(prop, val[prop]);
                } catch (err) {
                  if (!_.checkError.compatibleConstructor(err, AssertionError2))
                    throw err;
                  firstErr === null && (firstErr = err), numErrs++;
                }
              }, this), negate && props.length > 1 && numErrs === props.length)
                throw firstErr;
              return;
          }
          this.assert(included, "expected #{this} to " + descriptor + "include " + _.inspect(val), "expected #{this} to not " + descriptor + "include " + _.inspect(val));
        }
        Assertion2.addChainableMethod("include", include, includeChainingBehavior), Assertion2.addChainableMethod("contain", include, includeChainingBehavior), Assertion2.addChainableMethod("contains", include, includeChainingBehavior), Assertion2.addChainableMethod("includes", include, includeChainingBehavior), Assertion2.addProperty("ok", function() {
          this.assert(flag(this, "object"), "expected #{this} to be truthy", "expected #{this} to be falsy");
        }), Assertion2.addProperty("true", function() {
          this.assert(flag(this, "object") === true, "expected #{this} to be true", "expected #{this} to be false", !flag(this, "negate"));
        }), Assertion2.addProperty("false", function() {
          this.assert(flag(this, "object") === false, "expected #{this} to be false", "expected #{this} to be true", !!flag(this, "negate"));
        }), Assertion2.addProperty("null", function() {
          this.assert(flag(this, "object") === null, "expected #{this} to be null", "expected #{this} not to be null");
        }), Assertion2.addProperty("undefined", function() {
          this.assert(flag(this, "object") === void 0, "expected #{this} to be undefined", "expected #{this} not to be undefined");
        }), Assertion2.addProperty("NaN", function() {
          this.assert(_.isNaN(flag(this, "object")), "expected #{this} to be NaN", "expected #{this} not to be NaN");
        });
        function assertExist() {
          var val = flag(this, "object");
          this.assert(val != null, "expected #{this} to exist", "expected #{this} to not exist");
        }
        Assertion2.addProperty("exist", assertExist), Assertion2.addProperty("exists", assertExist), Assertion2.addProperty("empty", function() {
          var val = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), itemsCount;
          switch (flagMsg = flagMsg ? flagMsg + ": " : "", _.type(val).toLowerCase()) {
            case "array":
            case "string":
              itemsCount = val.length;
              break;
            case "map":
            case "set":
              itemsCount = val.size;
              break;
            case "weakmap":
            case "weakset":
              throw new AssertionError2(flagMsg + ".empty was passed a weak collection", void 0, ssfi);
            case "function":
              var msg = flagMsg + ".empty was passed a function " + _.getName(val);
              throw new AssertionError2(msg.trim(), void 0, ssfi);
            default:
              if (val !== Object(val))
                throw new AssertionError2(flagMsg + ".empty was passed non-string primitive " + _.inspect(val), void 0, ssfi);
              itemsCount = Object.keys(val).length;
          }
          this.assert(itemsCount === 0, "expected #{this} to be empty", "expected #{this} not to be empty");
        });
        function checkArguments() {
          var obj = flag(this, "object"), type3 = _.type(obj);
          this.assert(type3 === "Arguments", "expected #{this} to be arguments but got " + type3, "expected #{this} to not be arguments");
        }
        Assertion2.addProperty("arguments", checkArguments), Assertion2.addProperty("Arguments", checkArguments);
        function assertEqual(val, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object");
          if (flag(this, "deep")) {
            var prevLockSsfi = flag(this, "lockSsfi");
            flag(this, "lockSsfi", true), this.eql(val), flag(this, "lockSsfi", prevLockSsfi);
          } else
            this.assert(val === obj, "expected #{this} to equal #{exp}", "expected #{this} to not equal #{exp}", val, this._obj, true);
        }
        Assertion2.addMethod("equal", assertEqual), Assertion2.addMethod("equals", assertEqual), Assertion2.addMethod("eq", assertEqual);
        function assertEql(obj, msg) {
          msg && flag(this, "message", msg);
          var eql = flag(this, "eql");
          this.assert(eql(obj, flag(this, "object")), "expected #{this} to deeply equal #{exp}", "expected #{this} to not deeply equal #{exp}", obj, this._obj, true);
        }
        Assertion2.addMethod("eql", assertEql), Assertion2.addMethod("eqls", assertEql);
        function assertAbove(n, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
          if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date")
            errorMessage = msgPrefix + "the argument to above must be a date";
          else if (nType !== "number" && (doLength || objType === "number"))
            errorMessage = msgPrefix + "the argument to above must be a number";
          else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
          } else
            shouldThrow = false;
          if (shouldThrow)
            throw new AssertionError2(errorMessage, void 0, ssfi);
          if (doLength) {
            var descriptor = "length", itemsCount;
            objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount > n, "expected #{this} to have a " + descriptor + " above #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " above #{exp}", n, itemsCount);
          } else
            this.assert(obj > n, "expected #{this} to be above #{exp}", "expected #{this} to be at most #{exp}", n);
        }
        Assertion2.addMethod("above", assertAbove), Assertion2.addMethod("gt", assertAbove), Assertion2.addMethod("greaterThan", assertAbove);
        function assertLeast(n, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
          if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date")
            errorMessage = msgPrefix + "the argument to least must be a date";
          else if (nType !== "number" && (doLength || objType === "number"))
            errorMessage = msgPrefix + "the argument to least must be a number";
          else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
          } else
            shouldThrow = false;
          if (shouldThrow)
            throw new AssertionError2(errorMessage, void 0, ssfi);
          if (doLength) {
            var descriptor = "length", itemsCount;
            objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount >= n, "expected #{this} to have a " + descriptor + " at least #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " below #{exp}", n, itemsCount);
          } else
            this.assert(obj >= n, "expected #{this} to be at least #{exp}", "expected #{this} to be below #{exp}", n);
        }
        Assertion2.addMethod("least", assertLeast), Assertion2.addMethod("gte", assertLeast), Assertion2.addMethod("greaterThanOrEqual", assertLeast);
        function assertBelow(n, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
          if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date")
            errorMessage = msgPrefix + "the argument to below must be a date";
          else if (nType !== "number" && (doLength || objType === "number"))
            errorMessage = msgPrefix + "the argument to below must be a number";
          else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
          } else
            shouldThrow = false;
          if (shouldThrow)
            throw new AssertionError2(errorMessage, void 0, ssfi);
          if (doLength) {
            var descriptor = "length", itemsCount;
            objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount < n, "expected #{this} to have a " + descriptor + " below #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " below #{exp}", n, itemsCount);
          } else
            this.assert(obj < n, "expected #{this} to be below #{exp}", "expected #{this} to be at least #{exp}", n);
        }
        Assertion2.addMethod("below", assertBelow), Assertion2.addMethod("lt", assertBelow), Assertion2.addMethod("lessThan", assertBelow);
        function assertMost(n, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
          if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date")
            errorMessage = msgPrefix + "the argument to most must be a date";
          else if (nType !== "number" && (doLength || objType === "number"))
            errorMessage = msgPrefix + "the argument to most must be a number";
          else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
          } else
            shouldThrow = false;
          if (shouldThrow)
            throw new AssertionError2(errorMessage, void 0, ssfi);
          if (doLength) {
            var descriptor = "length", itemsCount;
            objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount <= n, "expected #{this} to have a " + descriptor + " at most #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " above #{exp}", n, itemsCount);
          } else
            this.assert(obj <= n, "expected #{this} to be at most #{exp}", "expected #{this} to be above #{exp}", n);
        }
        Assertion2.addMethod("most", assertMost), Assertion2.addMethod("lte", assertMost), Assertion2.addMethod("lessThanOrEqual", assertMost), Assertion2.addMethod("within", function(start, finish, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), errorMessage, shouldThrow = true, range = startType === "date" && finishType === "date" ? start.toISOString() + ".." + finish.toISOString() : start + ".." + finish;
          if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && (startType !== "date" || finishType !== "date"))
            errorMessage = msgPrefix + "the arguments to within must be dates";
          else if ((startType !== "number" || finishType !== "number") && (doLength || objType === "number"))
            errorMessage = msgPrefix + "the arguments to within must be numbers";
          else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
          } else
            shouldThrow = false;
          if (shouldThrow)
            throw new AssertionError2(errorMessage, void 0, ssfi);
          if (doLength) {
            var descriptor = "length", itemsCount;
            objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount >= start && itemsCount <= finish, "expected #{this} to have a " + descriptor + " within " + range, "expected #{this} to not have a " + descriptor + " within " + range);
          } else
            this.assert(obj >= start && obj <= finish, "expected #{this} to be within " + range, "expected #{this} to not be within " + range);
        });
        function assertInstanceOf(constructor, msg) {
          msg && flag(this, "message", msg);
          var target = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message");
          try {
            var isInstanceOf = target instanceof constructor;
          } catch (err) {
            throw err instanceof TypeError ? (flagMsg = flagMsg ? flagMsg + ": " : "", new AssertionError2(flagMsg + "The instanceof assertion needs a constructor but " + _.type(constructor) + " was given.", void 0, ssfi)) : err;
          }
          var name2 = _.getName(constructor);
          name2 === null && (name2 = "an unnamed constructor"), this.assert(isInstanceOf, "expected #{this} to be an instance of " + name2, "expected #{this} to not be an instance of " + name2);
        }
        Assertion2.addMethod("instanceof", assertInstanceOf), Assertion2.addMethod("instanceOf", assertInstanceOf);
        function assertProperty(name2, val, msg) {
          msg && flag(this, "message", msg);
          var isNested = flag(this, "nested"), isOwn = flag(this, "own"), flagMsg = flag(this, "message"), obj = flag(this, "object"), ssfi = flag(this, "ssfi"), nameType = typeof name2;
          if (flagMsg = flagMsg ? flagMsg + ": " : "", isNested) {
            if (nameType !== "string")
              throw new AssertionError2(flagMsg + "the argument to property must be a string when using nested syntax", void 0, ssfi);
          } else if (nameType !== "string" && nameType !== "number" && nameType !== "symbol")
            throw new AssertionError2(flagMsg + "the argument to property must be a string, number, or symbol", void 0, ssfi);
          if (isNested && isOwn)
            throw new AssertionError2(flagMsg + 'The "nested" and "own" flags cannot be combined.', void 0, ssfi);
          if (obj == null)
            throw new AssertionError2(flagMsg + "Target cannot be null or undefined.", void 0, ssfi);
          var isDeep = flag(this, "deep"), negate = flag(this, "negate"), pathInfo = isNested ? _.getPathInfo(obj, name2) : null, value2 = isNested ? pathInfo.value : obj[name2], isEql = isDeep ? flag(this, "eql") : (val1, val2) => val1 === val2, descriptor = "";
          isDeep && (descriptor += "deep "), isOwn && (descriptor += "own "), isNested && (descriptor += "nested "), descriptor += "property ";
          var hasProperty;
          isOwn ? hasProperty = Object.prototype.hasOwnProperty.call(obj, name2) : isNested ? hasProperty = pathInfo.exists : hasProperty = _.hasProperty(obj, name2), (!negate || arguments.length === 1) && this.assert(hasProperty, "expected #{this} to have " + descriptor + _.inspect(name2), "expected #{this} to not have " + descriptor + _.inspect(name2)), arguments.length > 1 && this.assert(hasProperty && isEql(val, value2), "expected #{this} to have " + descriptor + _.inspect(name2) + " of #{exp}, but got #{act}", "expected #{this} to not have " + descriptor + _.inspect(name2) + " of #{act}", val, value2), flag(this, "object", value2);
        }
        Assertion2.addMethod("property", assertProperty);
        function assertOwnProperty(name2, value2, msg) {
          flag(this, "own", true), assertProperty.apply(this, arguments);
        }
        Assertion2.addMethod("ownProperty", assertOwnProperty), Assertion2.addMethod("haveOwnProperty", assertOwnProperty);
        function assertOwnPropertyDescriptor(name2, descriptor, msg) {
          typeof descriptor == "string" && (msg = descriptor, descriptor = null), msg && flag(this, "message", msg);
          var obj = flag(this, "object"), actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name2), eql = flag(this, "eql");
          actualDescriptor && descriptor ? this.assert(eql(descriptor, actualDescriptor), "expected the own property descriptor for " + _.inspect(name2) + " on #{this} to match " + _.inspect(descriptor) + ", got " + _.inspect(actualDescriptor), "expected the own property descriptor for " + _.inspect(name2) + " on #{this} to not match " + _.inspect(descriptor), descriptor, actualDescriptor, true) : this.assert(actualDescriptor, "expected #{this} to have an own property descriptor for " + _.inspect(name2), "expected #{this} to not have an own property descriptor for " + _.inspect(name2)), flag(this, "object", actualDescriptor);
        }
        Assertion2.addMethod("ownPropertyDescriptor", assertOwnPropertyDescriptor), Assertion2.addMethod("haveOwnPropertyDescriptor", assertOwnPropertyDescriptor);
        function assertLengthChain() {
          flag(this, "doLength", true);
        }
        function assertLength(n, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), descriptor = "length", itemsCount;
          switch (objType) {
            case "map":
            case "set":
              descriptor = "size", itemsCount = obj.size;
              break;
            default:
              new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), itemsCount = obj.length;
          }
          this.assert(itemsCount == n, "expected #{this} to have a " + descriptor + " of #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " of #{act}", n, itemsCount);
        }
        Assertion2.addChainableMethod("length", assertLength, assertLengthChain), Assertion2.addChainableMethod("lengthOf", assertLength, assertLengthChain);
        function assertMatch(re, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object");
          this.assert(re.exec(obj), "expected #{this} to match " + re, "expected #{this} not to match " + re);
        }
        Assertion2.addMethod("match", assertMatch), Assertion2.addMethod("matches", assertMatch), Assertion2.addMethod("string", function(str, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          new Assertion2(obj, flagMsg, ssfi, true).is.a("string"), this.assert(~obj.indexOf(str), "expected #{this} to contain " + _.inspect(str), "expected #{this} to not contain " + _.inspect(str));
        });
        function assertKeys(keys2) {
          var obj = flag(this, "object"), objType = _.type(obj), keysType = _.type(keys2), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), str, deepStr = "", actual, ok = true, flagMsg = flag(this, "message");
          flagMsg = flagMsg ? flagMsg + ": " : "";
          var mixedArgsMsg = flagMsg + "when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments";
          if (objType === "Map" || objType === "Set")
            deepStr = isDeep ? "deeply " : "", actual = [], obj.forEach(function(val, key2) {
              actual.push(key2);
            }), keysType !== "Array" && (keys2 = Array.prototype.slice.call(arguments));
          else {
            switch (actual = _.getOwnEnumerableProperties(obj), keysType) {
              case "Array":
                if (arguments.length > 1)
                  throw new AssertionError2(mixedArgsMsg, void 0, ssfi);
                break;
              case "Object":
                if (arguments.length > 1)
                  throw new AssertionError2(mixedArgsMsg, void 0, ssfi);
                keys2 = Object.keys(keys2);
                break;
              default:
                keys2 = Array.prototype.slice.call(arguments);
            }
            keys2 = keys2.map(function(val) {
              return typeof val == "symbol" ? val : String(val);
            });
          }
          if (!keys2.length)
            throw new AssertionError2(flagMsg + "keys required", void 0, ssfi);
          var len = keys2.length, any = flag(this, "any"), all = flag(this, "all"), expected = keys2, isEql = isDeep ? flag(this, "eql") : (val1, val2) => val1 === val2;
          if (!any && !all && (all = true), any && (ok = expected.some(function(expectedKey) {
            return actual.some(function(actualKey) {
              return isEql(expectedKey, actualKey);
            });
          })), all && (ok = expected.every(function(expectedKey) {
            return actual.some(function(actualKey) {
              return isEql(expectedKey, actualKey);
            });
          }), flag(this, "contains") || (ok = ok && keys2.length == actual.length)), len > 1) {
            keys2 = keys2.map(function(key2) {
              return _.inspect(key2);
            });
            var last = keys2.pop();
            all && (str = keys2.join(", ") + ", and " + last), any && (str = keys2.join(", ") + ", or " + last);
          } else
            str = _.inspect(keys2[0]);
          str = (len > 1 ? "keys " : "key ") + str, str = (flag(this, "contains") ? "contain " : "have ") + str, this.assert(ok, "expected #{this} to " + deepStr + str, "expected #{this} to not " + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
        }
        Assertion2.addMethod("keys", assertKeys), Assertion2.addMethod("key", assertKeys);
        function assertThrows(errorLike, errMsgMatcher, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), negate = flag(this, "negate") || false;
          new Assertion2(obj, flagMsg, ssfi, true).is.a("function"), (errorLike instanceof RegExp || typeof errorLike == "string") && (errMsgMatcher = errorLike, errorLike = null);
          var caughtErr;
          try {
            obj();
          } catch (err) {
            caughtErr = err;
          }
          var everyArgIsUndefined = errorLike === void 0 && errMsgMatcher === void 0, everyArgIsDefined = !!(errorLike && errMsgMatcher), errorLikeFail = false, errMsgMatcherFail = false;
          if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
            var errorLikeString = "an error";
            errorLike instanceof Error ? errorLikeString = "#{exp}" : errorLike && (errorLikeString = _.checkError.getConstructorName(errorLike)), this.assert(caughtErr, "expected #{this} to throw " + errorLikeString, "expected #{this} to not throw an error but #{act} was thrown", errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr == "string" ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr));
          }
          if (errorLike && caughtErr) {
            if (errorLike instanceof Error) {
              var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
              isCompatibleInstance === negate && (everyArgIsDefined && negate ? errorLikeFail = true : this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr && !negate ? " but #{act} was thrown" : ""), errorLike.toString(), caughtErr.toString()));
            }
            var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
            isCompatibleConstructor === negate && (everyArgIsDefined && negate ? errorLikeFail = true : this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
          }
          if (caughtErr && errMsgMatcher !== void 0 && errMsgMatcher !== null) {
            var placeholder = "including";
            errMsgMatcher instanceof RegExp && (placeholder = "matching");
            var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
            isCompatibleMessage === negate && (everyArgIsDefined && negate ? errMsgMatcherFail = true : this.assert(negate, "expected #{this} to throw error " + placeholder + " #{exp} but got #{act}", "expected #{this} to throw error not " + placeholder + " #{exp}", errMsgMatcher, _.checkError.getMessage(caughtErr)));
          }
          errorLikeFail && errMsgMatcherFail && this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)), flag(this, "object", caughtErr);
        }
        Assertion2.addMethod("throw", assertThrows), Assertion2.addMethod("throws", assertThrows), Assertion2.addMethod("Throw", assertThrows);
        function respondTo(method, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), itself = flag(this, "itself"), context = typeof obj == "function" && !itself ? obj.prototype[method] : obj[method];
          this.assert(typeof context == "function", "expected #{this} to respond to " + _.inspect(method), "expected #{this} to not respond to " + _.inspect(method));
        }
        Assertion2.addMethod("respondTo", respondTo), Assertion2.addMethod("respondsTo", respondTo), Assertion2.addProperty("itself", function() {
          flag(this, "itself", true);
        });
        function satisfy(matcher, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), result2 = matcher(obj);
          this.assert(result2, "expected #{this} to satisfy " + _.objDisplay(matcher), "expected #{this} to not satisfy" + _.objDisplay(matcher), !flag(this, "negate"), result2);
        }
        Assertion2.addMethod("satisfy", satisfy), Assertion2.addMethod("satisfies", satisfy);
        function closeTo(expected, delta, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          if (new Assertion2(obj, flagMsg, ssfi, true).is.a("number"), typeof expected != "number" || typeof delta != "number") {
            flagMsg = flagMsg ? flagMsg + ": " : "";
            var deltaMessage = delta === void 0 ? ", and a delta is required" : "";
            throw new AssertionError2(flagMsg + "the arguments to closeTo or approximately must be numbers" + deltaMessage, void 0, ssfi);
          }
          this.assert(Math.abs(obj - expected) <= delta, "expected #{this} to be close to " + expected + " +/- " + delta, "expected #{this} not to be close to " + expected + " +/- " + delta);
        }
        Assertion2.addMethod("closeTo", closeTo), Assertion2.addMethod("approximately", closeTo);
        function isSubsetOf(subset, superset, cmp, contains, ordered) {
          if (!contains) {
            if (subset.length !== superset.length)
              return false;
            superset = superset.slice();
          }
          return subset.every(function(elem, idx) {
            if (ordered)
              return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
            if (!cmp) {
              var matchIdx = superset.indexOf(elem);
              return matchIdx === -1 ? false : (contains || superset.splice(matchIdx, 1), true);
            }
            return superset.some(function(elem2, matchIdx2) {
              return cmp(elem, elem2) ? (contains || superset.splice(matchIdx2, 1), true) : false;
            });
          });
        }
        Assertion2.addMethod("members", function(subset, msg) {
          msg && flag(this, "message", msg);
          var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          new Assertion2(obj, flagMsg, ssfi, true).to.be.an("array"), new Assertion2(subset, flagMsg, ssfi, true).to.be.an("array");
          var contains = flag(this, "contains"), ordered = flag(this, "ordered"), subject, failMsg, failNegateMsg;
          contains ? (subject = ordered ? "an ordered superset" : "a superset", failMsg = "expected #{this} to be " + subject + " of #{exp}", failNegateMsg = "expected #{this} to not be " + subject + " of #{exp}") : (subject = ordered ? "ordered members" : "members", failMsg = "expected #{this} to have the same " + subject + " as #{exp}", failNegateMsg = "expected #{this} to not have the same " + subject + " as #{exp}");
          var cmp = flag(this, "deep") ? flag(this, "eql") : void 0;
          this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
        });
        function oneOf(list, msg) {
          msg && flag(this, "message", msg);
          var expected = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), contains = flag(this, "contains"), isDeep = flag(this, "deep"), eql = flag(this, "eql");
          new Assertion2(list, flagMsg, ssfi, true).to.be.an("array"), contains ? this.assert(list.some(function(possibility) {
            return expected.indexOf(possibility) > -1;
          }), "expected #{this} to contain one of #{exp}", "expected #{this} to not contain one of #{exp}", list, expected) : isDeep ? this.assert(list.some(function(possibility) {
            return eql(expected, possibility);
          }), "expected #{this} to deeply equal one of #{exp}", "expected #{this} to deeply equal one of #{exp}", list, expected) : this.assert(list.indexOf(expected) > -1, "expected #{this} to be one of #{exp}", "expected #{this} to not be one of #{exp}", list, expected);
        }
        Assertion2.addMethod("oneOf", oneOf);
        function assertChanges(subject, prop, msg) {
          msg && flag(this, "message", msg);
          var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
          var initial;
          prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), fn3();
          var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
          flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "change"), flag(this, "realDelta", final !== initial), this.assert(initial !== final, "expected " + msgObj + " to change", "expected " + msgObj + " to not change");
        }
        Assertion2.addMethod("change", assertChanges), Assertion2.addMethod("changes", assertChanges);
        function assertIncreases(subject, prop, msg) {
          msg && flag(this, "message", msg);
          var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
          var initial;
          prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), new Assertion2(initial, flagMsg, ssfi, true).is.a("number"), fn3();
          var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
          flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "increase"), flag(this, "realDelta", final - initial), this.assert(final - initial > 0, "expected " + msgObj + " to increase", "expected " + msgObj + " to not increase");
        }
        Assertion2.addMethod("increase", assertIncreases), Assertion2.addMethod("increases", assertIncreases);
        function assertDecreases(subject, prop, msg) {
          msg && flag(this, "message", msg);
          var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
          new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
          var initial;
          prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), new Assertion2(initial, flagMsg, ssfi, true).is.a("number"), fn3();
          var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
          flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "decrease"), flag(this, "realDelta", initial - final), this.assert(final - initial < 0, "expected " + msgObj + " to decrease", "expected " + msgObj + " to not decrease");
        }
        Assertion2.addMethod("decrease", assertDecreases), Assertion2.addMethod("decreases", assertDecreases);
        function assertDelta(delta, msg) {
          msg && flag(this, "message", msg);
          var msgObj = flag(this, "deltaMsgObj"), initial = flag(this, "initialDeltaValue"), final = flag(this, "finalDeltaValue"), behavior2 = flag(this, "deltaBehavior"), realDelta = flag(this, "realDelta"), expression;
          behavior2 === "change" ? expression = Math.abs(final - initial) === Math.abs(delta) : expression = realDelta === Math.abs(delta), this.assert(expression, "expected " + msgObj + " to " + behavior2 + " by " + delta, "expected " + msgObj + " to not " + behavior2 + " by " + delta);
        }
        Assertion2.addMethod("by", assertDelta), Assertion2.addProperty("extensible", function() {
          var obj = flag(this, "object"), isExtensible = obj === Object(obj) && Object.isExtensible(obj);
          this.assert(isExtensible, "expected #{this} to be extensible", "expected #{this} to not be extensible");
        }), Assertion2.addProperty("sealed", function() {
          var obj = flag(this, "object"), isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
          this.assert(isSealed, "expected #{this} to be sealed", "expected #{this} to not be sealed");
        }), Assertion2.addProperty("frozen", function() {
          var obj = flag(this, "object"), isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
          this.assert(isFrozen, "expected #{this} to be frozen", "expected #{this} to not be frozen");
        }), Assertion2.addProperty("finite", function(msg) {
          var obj = flag(this, "object");
          this.assert(typeof obj == "number" && isFinite(obj), "expected #{this} to be a finite number", "expected #{this} to not be a finite number");
        });
      };
    } });
    var require_expect = __commonJS3({ "../../node_modules/chai/lib/chai/interface/expect.js"(exports22, module22) {
      "use strict";
      module22.exports = function(chai2, util2) {
        chai2.expect = function(val, message) {
          return new chai2.Assertion(val, message);
        }, chai2.expect.fail = function(actual, expected, message, operator) {
          throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "expect.fail()", new chai2.AssertionError(message, { actual, expected, operator }, chai2.expect.fail);
        };
      };
    } });
    var require_should = __commonJS3({ "../../node_modules/chai/lib/chai/interface/should.js"(exports22, module22) {
      "use strict";
      module22.exports = function(chai2, util2) {
        var Assertion2 = chai2.Assertion;
        function loadShould() {
          function shouldGetter() {
            return this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol == "function" && this instanceof Symbol || typeof BigInt == "function" && this instanceof BigInt ? new Assertion2(this.valueOf(), null, shouldGetter) : new Assertion2(this, null, shouldGetter);
          }
          function shouldSetter(value2) {
            Object.defineProperty(this, "should", { value: value2, enumerable: true, configurable: true, writable: true });
          }
          Object.defineProperty(Object.prototype, "should", { set: shouldSetter, get: shouldGetter, configurable: true });
          var should2 = {};
          return should2.fail = function(actual, expected, message, operator) {
            throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "should.fail()", new chai2.AssertionError(message, { actual, expected, operator }, should2.fail);
          }, should2.equal = function(val1, val2, msg) {
            new Assertion2(val1, msg).to.equal(val2);
          }, should2.Throw = function(fn3, errt, errs, msg) {
            new Assertion2(fn3, msg).to.Throw(errt, errs);
          }, should2.exist = function(val, msg) {
            new Assertion2(val, msg).to.exist;
          }, should2.not = {}, should2.not.equal = function(val1, val2, msg) {
            new Assertion2(val1, msg).to.not.equal(val2);
          }, should2.not.Throw = function(fn3, errt, errs, msg) {
            new Assertion2(fn3, msg).to.not.Throw(errt, errs);
          }, should2.not.exist = function(val, msg) {
            new Assertion2(val, msg).to.not.exist;
          }, should2.throw = should2.Throw, should2.not.throw = should2.not.Throw, should2;
        }
        chai2.should = loadShould, chai2.Should = loadShould;
      };
    } });
    var require_assert = __commonJS3({ "../../node_modules/chai/lib/chai/interface/assert.js"(exports22, module22) {
      "use strict";
      module22.exports = function(chai2, util2) {
        var Assertion2 = chai2.Assertion, flag = util2.flag;
        var assert2 = chai2.assert = function(express, errmsg) {
          var test = new Assertion2(null, null, chai2.assert, true);
          test.assert(express, errmsg, "[ negation message unavailable ]");
        };
        assert2.fail = function(actual, expected, message, operator) {
          throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "assert.fail()", new chai2.AssertionError(message, { actual, expected, operator }, assert2.fail);
        }, assert2.isOk = function(val, msg) {
          new Assertion2(val, msg, assert2.isOk, true).is.ok;
        }, assert2.isNotOk = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotOk, true).is.not.ok;
        }, assert2.equal = function(act, exp, msg) {
          var test = new Assertion2(act, msg, assert2.equal, true);
          test.assert(exp == flag(test, "object"), "expected #{this} to equal #{exp}", "expected #{this} to not equal #{act}", exp, act, true);
        }, assert2.notEqual = function(act, exp, msg) {
          var test = new Assertion2(act, msg, assert2.notEqual, true);
          test.assert(exp != flag(test, "object"), "expected #{this} to not equal #{exp}", "expected #{this} to equal #{act}", exp, act, true);
        }, assert2.strictEqual = function(act, exp, msg) {
          new Assertion2(act, msg, assert2.strictEqual, true).to.equal(exp);
        }, assert2.notStrictEqual = function(act, exp, msg) {
          new Assertion2(act, msg, assert2.notStrictEqual, true).to.not.equal(exp);
        }, assert2.deepEqual = assert2.deepStrictEqual = function(act, exp, msg) {
          new Assertion2(act, msg, assert2.deepEqual, true).to.eql(exp);
        }, assert2.notDeepEqual = function(act, exp, msg) {
          new Assertion2(act, msg, assert2.notDeepEqual, true).to.not.eql(exp);
        }, assert2.isAbove = function(val, abv, msg) {
          new Assertion2(val, msg, assert2.isAbove, true).to.be.above(abv);
        }, assert2.isAtLeast = function(val, atlst, msg) {
          new Assertion2(val, msg, assert2.isAtLeast, true).to.be.least(atlst);
        }, assert2.isBelow = function(val, blw, msg) {
          new Assertion2(val, msg, assert2.isBelow, true).to.be.below(blw);
        }, assert2.isAtMost = function(val, atmst, msg) {
          new Assertion2(val, msg, assert2.isAtMost, true).to.be.most(atmst);
        }, assert2.isTrue = function(val, msg) {
          new Assertion2(val, msg, assert2.isTrue, true).is.true;
        }, assert2.isNotTrue = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotTrue, true).to.not.equal(true);
        }, assert2.isFalse = function(val, msg) {
          new Assertion2(val, msg, assert2.isFalse, true).is.false;
        }, assert2.isNotFalse = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotFalse, true).to.not.equal(false);
        }, assert2.isNull = function(val, msg) {
          new Assertion2(val, msg, assert2.isNull, true).to.equal(null);
        }, assert2.isNotNull = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotNull, true).to.not.equal(null);
        }, assert2.isNaN = function(val, msg) {
          new Assertion2(val, msg, assert2.isNaN, true).to.be.NaN;
        }, assert2.isNotNaN = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotNaN, true).not.to.be.NaN;
        }, assert2.exists = function(val, msg) {
          new Assertion2(val, msg, assert2.exists, true).to.exist;
        }, assert2.notExists = function(val, msg) {
          new Assertion2(val, msg, assert2.notExists, true).to.not.exist;
        }, assert2.isUndefined = function(val, msg) {
          new Assertion2(val, msg, assert2.isUndefined, true).to.equal(void 0);
        }, assert2.isDefined = function(val, msg) {
          new Assertion2(val, msg, assert2.isDefined, true).to.not.equal(void 0);
        }, assert2.isFunction = function(val, msg) {
          new Assertion2(val, msg, assert2.isFunction, true).to.be.a("function");
        }, assert2.isNotFunction = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotFunction, true).to.not.be.a("function");
        }, assert2.isObject = function(val, msg) {
          new Assertion2(val, msg, assert2.isObject, true).to.be.a("object");
        }, assert2.isNotObject = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotObject, true).to.not.be.a("object");
        }, assert2.isArray = function(val, msg) {
          new Assertion2(val, msg, assert2.isArray, true).to.be.an("array");
        }, assert2.isNotArray = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotArray, true).to.not.be.an("array");
        }, assert2.isString = function(val, msg) {
          new Assertion2(val, msg, assert2.isString, true).to.be.a("string");
        }, assert2.isNotString = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotString, true).to.not.be.a("string");
        }, assert2.isNumber = function(val, msg) {
          new Assertion2(val, msg, assert2.isNumber, true).to.be.a("number");
        }, assert2.isNotNumber = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotNumber, true).to.not.be.a("number");
        }, assert2.isFinite = function(val, msg) {
          new Assertion2(val, msg, assert2.isFinite, true).to.be.finite;
        }, assert2.isBoolean = function(val, msg) {
          new Assertion2(val, msg, assert2.isBoolean, true).to.be.a("boolean");
        }, assert2.isNotBoolean = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotBoolean, true).to.not.be.a("boolean");
        }, assert2.typeOf = function(val, type3, msg) {
          new Assertion2(val, msg, assert2.typeOf, true).to.be.a(type3);
        }, assert2.notTypeOf = function(val, type3, msg) {
          new Assertion2(val, msg, assert2.notTypeOf, true).to.not.be.a(type3);
        }, assert2.instanceOf = function(val, type3, msg) {
          new Assertion2(val, msg, assert2.instanceOf, true).to.be.instanceOf(type3);
        }, assert2.notInstanceOf = function(val, type3, msg) {
          new Assertion2(val, msg, assert2.notInstanceOf, true).to.not.be.instanceOf(type3);
        }, assert2.include = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.include, true).include(inc);
        }, assert2.notInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notInclude, true).not.include(inc);
        }, assert2.deepInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.deepInclude, true).deep.include(inc);
        }, assert2.notDeepInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notDeepInclude, true).not.deep.include(inc);
        }, assert2.nestedInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.nestedInclude, true).nested.include(inc);
        }, assert2.notNestedInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notNestedInclude, true).not.nested.include(inc);
        }, assert2.deepNestedInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.deepNestedInclude, true).deep.nested.include(inc);
        }, assert2.notDeepNestedInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notDeepNestedInclude, true).not.deep.nested.include(inc);
        }, assert2.ownInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.ownInclude, true).own.include(inc);
        }, assert2.notOwnInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notOwnInclude, true).not.own.include(inc);
        }, assert2.deepOwnInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.deepOwnInclude, true).deep.own.include(inc);
        }, assert2.notDeepOwnInclude = function(exp, inc, msg) {
          new Assertion2(exp, msg, assert2.notDeepOwnInclude, true).not.deep.own.include(inc);
        }, assert2.match = function(exp, re, msg) {
          new Assertion2(exp, msg, assert2.match, true).to.match(re);
        }, assert2.notMatch = function(exp, re, msg) {
          new Assertion2(exp, msg, assert2.notMatch, true).to.not.match(re);
        }, assert2.property = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.property, true).to.have.property(prop);
        }, assert2.notProperty = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.notProperty, true).to.not.have.property(prop);
        }, assert2.propertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.propertyVal, true).to.have.property(prop, val);
        }, assert2.notPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.notPropertyVal, true).to.not.have.property(prop, val);
        }, assert2.deepPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.deepPropertyVal, true).to.have.deep.property(prop, val);
        }, assert2.notDeepPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
        }, assert2.ownProperty = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.ownProperty, true).to.have.own.property(prop);
        }, assert2.notOwnProperty = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.notOwnProperty, true).to.not.have.own.property(prop);
        }, assert2.ownPropertyVal = function(obj, prop, value2, msg) {
          new Assertion2(obj, msg, assert2.ownPropertyVal, true).to.have.own.property(prop, value2);
        }, assert2.notOwnPropertyVal = function(obj, prop, value2, msg) {
          new Assertion2(obj, msg, assert2.notOwnPropertyVal, true).to.not.have.own.property(prop, value2);
        }, assert2.deepOwnPropertyVal = function(obj, prop, value2, msg) {
          new Assertion2(obj, msg, assert2.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value2);
        }, assert2.notDeepOwnPropertyVal = function(obj, prop, value2, msg) {
          new Assertion2(obj, msg, assert2.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value2);
        }, assert2.nestedProperty = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.nestedProperty, true).to.have.nested.property(prop);
        }, assert2.notNestedProperty = function(obj, prop, msg) {
          new Assertion2(obj, msg, assert2.notNestedProperty, true).to.not.have.nested.property(prop);
        }, assert2.nestedPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.nestedPropertyVal, true).to.have.nested.property(prop, val);
        }, assert2.notNestedPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
        }, assert2.deepNestedPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
        }, assert2.notDeepNestedPropertyVal = function(obj, prop, val, msg) {
          new Assertion2(obj, msg, assert2.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
        }, assert2.lengthOf = function(exp, len, msg) {
          new Assertion2(exp, msg, assert2.lengthOf, true).to.have.lengthOf(len);
        }, assert2.hasAnyKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.hasAnyKeys, true).to.have.any.keys(keys2);
        }, assert2.hasAllKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.hasAllKeys, true).to.have.all.keys(keys2);
        }, assert2.containsAllKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.containsAllKeys, true).to.contain.all.keys(keys2);
        }, assert2.doesNotHaveAnyKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys2);
        }, assert2.doesNotHaveAllKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.doesNotHaveAllKeys, true).to.not.have.all.keys(keys2);
        }, assert2.hasAnyDeepKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.hasAnyDeepKeys, true).to.have.any.deep.keys(keys2);
        }, assert2.hasAllDeepKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.hasAllDeepKeys, true).to.have.all.deep.keys(keys2);
        }, assert2.containsAllDeepKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.containsAllDeepKeys, true).to.contain.all.deep.keys(keys2);
        }, assert2.doesNotHaveAnyDeepKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys2);
        }, assert2.doesNotHaveAllDeepKeys = function(obj, keys2, msg) {
          new Assertion2(obj, msg, assert2.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys2);
        }, assert2.throws = function(fn3, errorLike, errMsgMatcher, msg) {
          (typeof errorLike == "string" || errorLike instanceof RegExp) && (errMsgMatcher = errorLike, errorLike = null);
          var assertErr = new Assertion2(fn3, msg, assert2.throws, true).to.throw(errorLike, errMsgMatcher);
          return flag(assertErr, "object");
        }, assert2.doesNotThrow = function(fn3, errorLike, errMsgMatcher, msg) {
          (typeof errorLike == "string" || errorLike instanceof RegExp) && (errMsgMatcher = errorLike, errorLike = null), new Assertion2(fn3, msg, assert2.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
        }, assert2.operator = function(val, operator, val2, msg) {
          var ok;
          switch (operator) {
            case "==":
              ok = val == val2;
              break;
            case "===":
              ok = val === val2;
              break;
            case ">":
              ok = val > val2;
              break;
            case ">=":
              ok = val >= val2;
              break;
            case "<":
              ok = val < val2;
              break;
            case "<=":
              ok = val <= val2;
              break;
            case "!=":
              ok = val != val2;
              break;
            case "!==":
              ok = val !== val2;
              break;
            default:
              throw msg = msg && msg + ": ", new chai2.AssertionError(msg + 'Invalid operator "' + operator + '"', void 0, assert2.operator);
          }
          var test = new Assertion2(ok, msg, assert2.operator, true);
          test.assert(flag(test, "object") === true, "expected " + util2.inspect(val) + " to be " + operator + " " + util2.inspect(val2), "expected " + util2.inspect(val) + " to not be " + operator + " " + util2.inspect(val2));
        }, assert2.closeTo = function(act, exp, delta, msg) {
          new Assertion2(act, msg, assert2.closeTo, true).to.be.closeTo(exp, delta);
        }, assert2.approximately = function(act, exp, delta, msg) {
          new Assertion2(act, msg, assert2.approximately, true).to.be.approximately(exp, delta);
        }, assert2.sameMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.sameMembers, true).to.have.same.members(set2);
        }, assert2.notSameMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.notSameMembers, true).to.not.have.same.members(set2);
        }, assert2.sameDeepMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.sameDeepMembers, true).to.have.same.deep.members(set2);
        }, assert2.notSameDeepMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
        }, assert2.sameOrderedMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.sameOrderedMembers, true).to.have.same.ordered.members(set2);
        }, assert2.notSameOrderedMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
        }, assert2.sameDeepOrderedMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
        }, assert2.notSameDeepOrderedMembers = function(set1, set2, msg) {
          new Assertion2(set1, msg, assert2.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
        }, assert2.includeMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.includeMembers, true).to.include.members(subset);
        }, assert2.notIncludeMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.notIncludeMembers, true).to.not.include.members(subset);
        }, assert2.includeDeepMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.includeDeepMembers, true).to.include.deep.members(subset);
        }, assert2.notIncludeDeepMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
        }, assert2.includeOrderedMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.includeOrderedMembers, true).to.include.ordered.members(subset);
        }, assert2.notIncludeOrderedMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
        }, assert2.includeDeepOrderedMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
        }, assert2.notIncludeDeepOrderedMembers = function(superset, subset, msg) {
          new Assertion2(superset, msg, assert2.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
        }, assert2.oneOf = function(inList, list, msg) {
          new Assertion2(inList, msg, assert2.oneOf, true).to.be.oneOf(list);
        }, assert2.changes = function(fn3, obj, prop, msg) {
          arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.changes, true).to.change(obj, prop);
        }, assert2.changesBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.changesBy, true).to.change(obj, prop).by(delta);
        }, assert2.doesNotChange = function(fn3, obj, prop, msg) {
          return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotChange, true).to.not.change(obj, prop);
        }, assert2.changesButNotBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
        }, assert2.increases = function(fn3, obj, prop, msg) {
          return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.increases, true).to.increase(obj, prop);
        }, assert2.increasesBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.increasesBy, true).to.increase(obj, prop).by(delta);
        }, assert2.doesNotIncrease = function(fn3, obj, prop, msg) {
          return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotIncrease, true).to.not.increase(obj, prop);
        }, assert2.increasesButNotBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
        }, assert2.decreases = function(fn3, obj, prop, msg) {
          return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.decreases, true).to.decrease(obj, prop);
        }, assert2.decreasesBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.decreasesBy, true).to.decrease(obj, prop).by(delta);
        }, assert2.doesNotDecrease = function(fn3, obj, prop, msg) {
          return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotDecrease, true).to.not.decrease(obj, prop);
        }, assert2.doesNotDecreaseBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          return new Assertion2(fn3, msg, assert2.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
        }, assert2.decreasesButNotBy = function(fn3, obj, prop, delta, msg) {
          if (arguments.length === 4 && typeof obj == "function") {
            var tmpMsg = delta;
            delta = prop, msg = tmpMsg;
          } else
            arguments.length === 3 && (delta = prop, prop = null);
          new Assertion2(fn3, msg, assert2.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
        };
        assert2.ifError = function(val) {
          if (val)
            throw val;
        }, assert2.isExtensible = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isExtensible, true).to.be.extensible;
        }, assert2.isNotExtensible = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isNotExtensible, true).to.not.be.extensible;
        }, assert2.isSealed = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isSealed, true).to.be.sealed;
        }, assert2.isNotSealed = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isNotSealed, true).to.not.be.sealed;
        }, assert2.isFrozen = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isFrozen, true).to.be.frozen;
        }, assert2.isNotFrozen = function(obj, msg) {
          new Assertion2(obj, msg, assert2.isNotFrozen, true).to.not.be.frozen;
        }, assert2.isEmpty = function(val, msg) {
          new Assertion2(val, msg, assert2.isEmpty, true).to.be.empty;
        }, assert2.isNotEmpty = function(val, msg) {
          new Assertion2(val, msg, assert2.isNotEmpty, true).to.not.be.empty;
        };
        (function alias(name2, as) {
          return assert2[as] = assert2[name2], alias;
        })("isOk", "ok")("isNotOk", "notOk")("throws", "throw")("throws", "Throw")("isExtensible", "extensible")("isNotExtensible", "notExtensible")("isSealed", "sealed")("isNotSealed", "notSealed")("isFrozen", "frozen")("isNotFrozen", "notFrozen")("isEmpty", "empty")("isNotEmpty", "notEmpty");
      };
    } });
    var require_chai = __commonJS3({ "../../node_modules/chai/lib/chai.js"(exports22) {
      "use strict";
      var used = [];
      exports22.version = "4.3.8";
      exports22.AssertionError = require_assertion_error();
      var util2 = require_utils2();
      exports22.use = function(fn3) {
        return ~used.indexOf(fn3) || (fn3(exports22, util2), used.push(fn3)), exports22;
      };
      exports22.util = util2;
      var config3 = require_config();
      exports22.config = config3;
      var assertion = require_assertion();
      exports22.use(assertion);
      var core2 = require_assertions();
      exports22.use(core2);
      var expect4 = require_expect();
      exports22.use(expect4);
      var should2 = require_should();
      exports22.use(should2);
      var assert2 = require_assert();
      exports22.use(assert2);
    } });
    var require_chai2 = __commonJS3({ "../../node_modules/chai/index.js"(exports22, module22) {
      "use strict";
      module22.exports = require_chai();
    } });
    var require_ansi_styles = __commonJS3({ "../../node_modules/pretty-format/node_modules/ansi-styles/index.js"(exports22, module22) {
      "use strict";
      var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
      function assembleStyles() {
        let codes = /* @__PURE__ */ new Map(), styles2 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        styles2.color.gray = styles2.color.blackBright, styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright, styles2.color.grey = styles2.color.blackBright, styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
        for (let [groupName, group] of Object.entries(styles2)) {
          for (let [styleName, style] of Object.entries(group))
            styles2[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles2[styleName], codes.set(style[0], style[1]);
          Object.defineProperty(styles2, groupName, { value: group, enumerable: false });
        }
        return Object.defineProperty(styles2, "codes", { value: codes, enumerable: false }), styles2.color.close = "\x1B[39m", styles2.bgColor.close = "\x1B[49m", styles2.color.ansi256 = wrapAnsi256(), styles2.color.ansi16m = wrapAnsi16m(), styles2.bgColor.ansi256 = wrapAnsi256(10), styles2.bgColor.ansi16m = wrapAnsi16m(10), Object.defineProperties(styles2, { rgbToAnsi256: { value: (red, green, blue) => red === green && green === blue ? red < 8 ? 16 : red > 248 ? 231 : Math.round((red - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5), enumerable: false }, hexToRgb: { value: (hex2) => {
          let matches3 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex2.toString(16));
          if (!matches3)
            return [0, 0, 0];
          let { colorString } = matches3.groups;
          colorString.length === 3 && (colorString = colorString.split("").map((character) => character + character).join(""));
          let integer = Number.parseInt(colorString, 16);
          return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];
        }, enumerable: false }, hexToAnsi256: { value: (hex2) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex2)), enumerable: false } }), styles2;
      }
      Object.defineProperty(module22, "exports", { enumerable: true, get: assembleStyles });
    } });
    var require_collections = __commonJS3({ "../../node_modules/pretty-format/build/collections.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printIteratorEntries = printIteratorEntries;
      exports22.printIteratorValues = printIteratorValues;
      exports22.printListItems = printListItems;
      exports22.printObjectProperties = printObjectProperties;
      var getKeysOfEnumerableProperties = (object, compareKeys) => {
        let rawKeys = Object.keys(object), keys2 = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;
        return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(object).forEach((symbol) => {
          Object.getOwnPropertyDescriptor(object, symbol).enumerable && keys2.push(symbol);
        }), keys2;
      };
      function printIteratorEntries(iterator, config3, indentation, depth, refs2, printer, separator = ": ") {
        let result2 = "", width = 0, current = iterator.next();
        if (!current.done) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (; !current.done; ) {
            if (result2 += indentationNext, width++ === config3.maxWidth) {
              result2 += "\u2026";
              break;
            }
            let name2 = printer(current.value[0], config3, indentationNext, depth, refs2), value2 = printer(current.value[1], config3, indentationNext, depth, refs2);
            result2 += name2 + separator + value2, current = iterator.next(), current.done ? config3.min || (result2 += ",") : result2 += `,${config3.spacingInner}`;
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printIteratorValues(iterator, config3, indentation, depth, refs2, printer) {
        let result2 = "", width = 0, current = iterator.next();
        if (!current.done) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (; !current.done; ) {
            if (result2 += indentationNext, width++ === config3.maxWidth) {
              result2 += "\u2026";
              break;
            }
            result2 += printer(current.value, config3, indentationNext, depth, refs2), current = iterator.next(), current.done ? config3.min || (result2 += ",") : result2 += `,${config3.spacingInner}`;
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printListItems(list, config3, indentation, depth, refs2, printer) {
        let result2 = "";
        if (list.length) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (let i = 0; i < list.length; i++) {
            if (result2 += indentationNext, i === config3.maxWidth) {
              result2 += "\u2026";
              break;
            }
            i in list && (result2 += printer(list[i], config3, indentationNext, depth, refs2)), i < list.length - 1 ? result2 += `,${config3.spacingInner}` : config3.min || (result2 += ",");
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printObjectProperties(val, config3, indentation, depth, refs2, printer) {
        let result2 = "", keys2 = getKeysOfEnumerableProperties(val, config3.compareKeys);
        if (keys2.length) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (let i = 0; i < keys2.length; i++) {
            let key2 = keys2[i], name2 = printer(key2, config3, indentationNext, depth, refs2), value2 = printer(val[key2], config3, indentationNext, depth, refs2);
            result2 += `${indentationNext + name2}: ${value2}`, i < keys2.length - 1 ? result2 += `,${config3.spacingInner}` : config3.min || (result2 += ",");
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
    } });
    var require_AsymmetricMatcher = __commonJS3({ "../../node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), Symbol22 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, asymmetricMatcher = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("jest.asymmetricMatcher") : 1267621, SPACE = " ", serialize = (val, config3, indentation, depth, refs2, printer) => {
        let stringedValue = val.toString();
        if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining")
          return ++depth > config3.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE}[${(0, _collections.printListItems)(val.sample, config3, indentation, depth, refs2, printer)}]`;
        if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining")
          return ++depth > config3.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE}{${(0, _collections.printObjectProperties)(val.sample, config3, indentation, depth, refs2, printer)}}`;
        if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching" || stringedValue === "StringContaining" || stringedValue === "StringNotContaining")
          return stringedValue + SPACE + printer(val.sample, config3, indentation, depth, refs2);
        if (typeof val.toAsymmetricMatcher != "function")
          throw new Error(`Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`);
        return val.toAsymmetricMatcher();
      };
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === asymmetricMatcher;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_DOMCollection = __commonJS3({ "../../node_modules/pretty-format/build/plugins/DOMCollection.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), SPACE = " ", OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"], ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/, testName = (name2) => OBJECT_NAMES.indexOf(name2) !== -1 || ARRAY_REGEXP.test(name2), test = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
      exports22.test = test;
      var isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap", serialize = (collection, config3, indentation, depth, refs2, printer) => {
        let name2 = collection.constructor.name;
        return ++depth > config3.maxDepth ? `[${name2}]` : (config3.min ? "" : name2 + SPACE) + (OBJECT_NAMES.indexOf(name2) !== -1 ? `{${(0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}) : { ...collection }, config3, indentation, depth, refs2, printer)}}` : `[${(0, _collections.printListItems)(Array.from(collection), config3, indentation, depth, refs2, printer)}]`);
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_escapeHTML = __commonJS3({ "../../node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = escapeHTML2;
      function escapeHTML2(str) {
        return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
      }
    } });
    var require_markup = __commonJS3({ "../../node_modules/pretty-format/build/plugins/lib/markup.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printText = exports22.printProps = exports22.printElementAsLeaf = exports22.printElement = exports22.printComment = exports22.printChildren = void 0;
      var _escapeHTML = _interopRequireDefault(require_escapeHTML());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var printProps2 = (keys2, props, config3, indentation, depth, refs2, printer) => {
        let indentationNext = indentation + config3.indent, colors = config3.colors;
        return keys2.map((key2) => {
          let value2 = props[key2], printed = printer(value2, config3, indentationNext, depth, refs2);
          return typeof value2 != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = `{${printed}}`), `${config3.spacingInner + indentation + colors.prop.open + key2 + colors.prop.close}=${colors.value.open}${printed}${colors.value.close}`;
        }).join("");
      };
      exports22.printProps = printProps2;
      var printChildren2 = (children2, config3, indentation, depth, refs2, printer) => children2.map((child) => config3.spacingOuter + indentation + (typeof child == "string" ? printText2(child, config3) : printer(child, config3, indentation, depth, refs2))).join("");
      exports22.printChildren = printChildren2;
      var printText2 = (text, config3) => {
        let contentColor = config3.colors.content;
        return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
      };
      exports22.printText = printText2;
      var printComment2 = (comment, config3) => {
        let commentColor = config3.colors.comment;
        return `${commentColor.open}<!--${(0, _escapeHTML.default)(comment)}-->${commentColor.close}`;
      };
      exports22.printComment = printComment2;
      var printElement2 = (type3, printedProps, printedChildren, config3, indentation) => {
        let tagColor = config3.colors.tag;
        return `${tagColor.open}<${type3}${printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open}${printedChildren ? `>${tagColor.close}${printedChildren}${config3.spacingOuter}${indentation}${tagColor.open}</${type3}` : `${printedProps && !config3.min ? "" : " "}/`}>${tagColor.close}`;
      };
      exports22.printElement = printElement2;
      var printElementAsLeaf2 = (type3, config3) => {
        let tagColor = config3.colors.tag;
        return `${tagColor.open}<${type3}${tagColor.close} \u2026${tagColor.open} />${tagColor.close}`;
      };
      exports22.printElementAsLeaf = printElementAsLeaf2;
    } });
    var require_DOMElement = __commonJS3({ "../../node_modules/pretty-format/build/plugins/DOMElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup(), ELEMENT_NODE2 = 1, TEXT_NODE2 = 3, COMMENT_NODE2 = 8, FRAGMENT_NODE2 = 11, ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/, testHasAttribute = (val) => {
        try {
          return typeof val.hasAttribute == "function" && val.hasAttribute("is");
        } catch {
          return false;
        }
      }, testNode2 = (val) => {
        let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || testHasAttribute(val);
        return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
      }, test = (val) => {
        var _a;
        return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode2(val);
      };
      exports22.test = test;
      function nodeIsText2(node) {
        return node.nodeType === TEXT_NODE2;
      }
      function nodeIsComment2(node) {
        return node.nodeType === COMMENT_NODE2;
      }
      function nodeIsFragment2(node) {
        return node.nodeType === FRAGMENT_NODE2;
      }
      var serialize = (node, config3, indentation, depth, refs2, printer) => {
        if (nodeIsText2(node))
          return (0, _markup.printText)(node.data, config3);
        if (nodeIsComment2(node))
          return (0, _markup.printComment)(node.data, config3);
        let type3 = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
        return ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(type3, config3) : (0, _markup.printElement)(type3, (0, _markup.printProps)(nodeIsFragment2(node) ? [] : Array.from(node.attributes, (attr) => attr.name).sort(), nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs2, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config3, indentation + config3.indent, depth, refs2, printer), config3, indentation);
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_Immutable = __commonJS3({ "../../node_modules/pretty-format/build/plugins/Immutable.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections(), IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@", IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@", IS_KEYED_SENTINEL2 = "@@__IMMUTABLE_KEYED__@@", IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@", IS_ORDERED_SENTINEL2 = "@@__IMMUTABLE_ORDERED__@@", IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@", IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@", IS_SET_SENTINEL2 = "@@__IMMUTABLE_SET__@@", IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@", getImmutableName = (name2) => `Immutable.${name2}`, printAsLeaf = (name2) => `[${name2}]`, SPACE = " ", LAZY = "\u2026", printImmutableEntries = (val, config3, indentation, depth, refs2, printer, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : `${getImmutableName(type3) + SPACE}{${(0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer)}}`;
      function getRecordEntries(val) {
        let i = 0;
        return { next() {
          if (i < val._keys.length) {
            let key2 = val._keys[i++];
            return { done: false, value: [key2, val.get(key2)] };
          }
          return { done: true, value: void 0 };
        } };
      }
      var printImmutableRecord = (val, config3, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName(val._name || "Record");
        return ++depth > config3.maxDepth ? printAsLeaf(name2) : `${name2 + SPACE}{${(0, _collections.printIteratorEntries)(getRecordEntries(val), config3, indentation, depth, refs2, printer)}}`;
      }, printImmutableSeq = (val, config3, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName("Seq");
        return ++depth > config3.maxDepth ? printAsLeaf(name2) : val[IS_KEYED_SENTINEL2] ? `${name2 + SPACE}{${val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer) : LAZY}}` : `${name2 + SPACE}[${val._iter || val._array || val._collection || val._iterable ? (0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer) : LAZY}]`;
      }, printImmutableValues = (val, config3, indentation, depth, refs2, printer, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : `${getImmutableName(type3) + SPACE}[${(0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer)}]`, serialize = (val, config3, indentation, depth, refs2, printer) => val[IS_MAP_SENTINEL] ? printImmutableEntries(val, config3, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL2] ? "OrderedMap" : "Map") : val[IS_LIST_SENTINEL] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, "List") : val[IS_SET_SENTINEL2] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL2] ? "OrderedSet" : "Set") : val[IS_STACK_SENTINEL] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, "Stack") : val[IS_SEQ_SENTINEL] ? printImmutableSeq(val, config3, indentation, depth, refs2, printer) : printImmutableRecord(val, config3, indentation, depth, refs2, printer);
      exports22.serialize = serialize;
      var test = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_react_is_production_min = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/cjs/react-is.production.min.js"(exports22) {
      "use strict";
      var b2 = Symbol.for("react.element"), c = Symbol.for("react.portal"), d2 = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f2 = Symbol.for("react.profiler"), g2 = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m2 = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p2 = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u2;
      u2 = Symbol.for("react.module.reference");
      function v2(a) {
        if (typeof a == "object" && a !== null) {
          var r = a.$$typeof;
          switch (r) {
            case b2:
              switch (a = a.type, a) {
                case d2:
                case f2:
                case e:
                case m2:
                case n:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case k:
                    case h:
                    case l:
                    case q:
                    case p2:
                    case g2:
                      return a;
                    default:
                      return r;
                  }
              }
            case c:
              return r;
          }
        }
      }
      exports22.ContextConsumer = h;
      exports22.ContextProvider = g2;
      exports22.Element = b2;
      exports22.ForwardRef = l;
      exports22.Fragment = d2;
      exports22.Lazy = q;
      exports22.Memo = p2;
      exports22.Portal = c;
      exports22.Profiler = f2;
      exports22.StrictMode = e;
      exports22.Suspense = m2;
      exports22.SuspenseList = n;
      exports22.isAsyncMode = function() {
        return false;
      };
      exports22.isConcurrentMode = function() {
        return false;
      };
      exports22.isContextConsumer = function(a) {
        return v2(a) === h;
      };
      exports22.isContextProvider = function(a) {
        return v2(a) === g2;
      };
      exports22.isElement = function(a) {
        return typeof a == "object" && a !== null && a.$$typeof === b2;
      };
      exports22.isForwardRef = function(a) {
        return v2(a) === l;
      };
      exports22.isFragment = function(a) {
        return v2(a) === d2;
      };
      exports22.isLazy = function(a) {
        return v2(a) === q;
      };
      exports22.isMemo = function(a) {
        return v2(a) === p2;
      };
      exports22.isPortal = function(a) {
        return v2(a) === c;
      };
      exports22.isProfiler = function(a) {
        return v2(a) === f2;
      };
      exports22.isStrictMode = function(a) {
        return v2(a) === e;
      };
      exports22.isSuspense = function(a) {
        return v2(a) === m2;
      };
      exports22.isSuspenseList = function(a) {
        return v2(a) === n;
      };
      exports22.isValidElementType = function(a) {
        return typeof a == "string" || typeof a == "function" || a === d2 || a === f2 || a === e || a === m2 || a === n || a === t || typeof a == "object" && a !== null && (a.$$typeof === q || a.$$typeof === p2 || a.$$typeof === g2 || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u2 || a.getModuleId !== void 0);
      };
      exports22.typeOf = v2;
    } });
    var require_react_is_development = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/cjs/react-is.development.js"(exports22) {
      "use strict";
      process.env.NODE_ENV !== "production" && function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, REACT_MODULE_REFERENCE;
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        function isValidElementType(type3) {
          return !!(typeof type3 == "string" || typeof type3 == "function" || type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || enableDebugTracing || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type3 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type3 == "object" && type3 !== null && (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MODULE_REFERENCE || type3.getModuleId !== void 0));
        }
        function typeOf(object) {
          if (typeof object == "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type3 = object.type;
                switch (type3) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type3;
                  default:
                    var $$typeofType = type3 && type3.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        var ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, SuspenseList = REACT_SUSPENSE_LIST_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false, hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isConcurrentMode(object) {
          return hasWarnedAboutDeprecatedIsConcurrentMode || (hasWarnedAboutDeprecatedIsConcurrentMode = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement5(object) {
          return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports22.ContextConsumer = ContextConsumer, exports22.ContextProvider = ContextProvider, exports22.Element = Element2, exports22.ForwardRef = ForwardRef, exports22.Fragment = Fragment, exports22.Lazy = Lazy, exports22.Memo = Memo, exports22.Portal = Portal, exports22.Profiler = Profiler, exports22.StrictMode = StrictMode, exports22.Suspense = Suspense, exports22.SuspenseList = SuspenseList, exports22.isAsyncMode = isAsyncMode, exports22.isConcurrentMode = isConcurrentMode, exports22.isContextConsumer = isContextConsumer, exports22.isContextProvider = isContextProvider, exports22.isElement = isElement5, exports22.isForwardRef = isForwardRef, exports22.isFragment = isFragment, exports22.isLazy = isLazy, exports22.isMemo = isMemo, exports22.isPortal = isPortal, exports22.isProfiler = isProfiler, exports22.isStrictMode = isStrictMode, exports22.isSuspense = isSuspense, exports22.isSuspenseList = isSuspenseList, exports22.isValidElementType = isValidElementType, exports22.typeOf = typeOf;
      }();
    } });
    var require_react_is = __commonJS3({ "../../node_modules/pretty-format/node_modules/react-is/index.js"(exports22, module22) {
      "use strict";
      process.env.NODE_ENV === "production" ? module22.exports = require_react_is_production_min() : module22.exports = require_react_is_development();
    } });
    var require_ReactElement = __commonJS3({ "../../node_modules/pretty-format/build/plugins/ReactElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var ReactIs = _interopRequireWildcard(require_react_is()), _markup = require_markup();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap != "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule)
          return obj;
        if (obj === null || typeof obj != "object" && typeof obj != "function")
          return { default: obj };
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj))
          return cache.get(obj);
        var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key2 in obj)
          if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
            desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key2, desc) : newObj[key2] = obj[key2];
          }
        return newObj.default = obj, cache && cache.set(obj, newObj), newObj;
      }
      var getChildren = (arg, children2 = []) => (Array.isArray(arg) ? arg.forEach((item) => {
        getChildren(item, children2);
      }) : arg != null && arg !== false && children2.push(arg), children2), getType3 = (element) => {
        let type3 = element.type;
        if (typeof type3 == "string")
          return type3;
        if (typeof type3 == "function")
          return type3.displayName || type3.name || "Unknown";
        if (ReactIs.isFragment(element))
          return "React.Fragment";
        if (ReactIs.isSuspense(element))
          return "React.Suspense";
        if (typeof type3 == "object" && type3 !== null) {
          if (ReactIs.isContextProvider(element))
            return "Context.Provider";
          if (ReactIs.isContextConsumer(element))
            return "Context.Consumer";
          if (ReactIs.isForwardRef(element)) {
            if (type3.displayName)
              return type3.displayName;
            let functionName = type3.render.displayName || type3.render.name || "";
            return functionName !== "" ? `ForwardRef(${functionName})` : "ForwardRef";
          }
          if (ReactIs.isMemo(element)) {
            let functionName = type3.displayName || type3.type.displayName || type3.type.name || "";
            return functionName !== "" ? `Memo(${functionName})` : "Memo";
          }
        }
        return "UNDEFINED";
      }, getPropKeys = (element) => {
        let { props } = element;
        return Object.keys(props).filter((key2) => key2 !== "children" && props[key2] !== void 0).sort();
      }, serialize = (element, config3, indentation, depth, refs2, printer) => ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(getType3(element), config3) : (0, _markup.printElement)(getType3(element), (0, _markup.printProps)(getPropKeys(element), element.props, config3, indentation + config3.indent, depth, refs2, printer), (0, _markup.printChildren)(getChildren(element.props.children), config3, indentation + config3.indent, depth, refs2, printer), config3, indentation);
      exports22.serialize = serialize;
      var test = (val) => val != null && ReactIs.isElement(val);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_ReactTestComponent = __commonJS3({ "../../node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup(), Symbol22 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, testSymbol = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("react.test.json") : 245830487, getPropKeys = (object) => {
        let { props } = object;
        return props ? Object.keys(props).filter((key2) => props[key2] !== void 0).sort() : [];
      }, serialize = (object, config3, indentation, depth, refs2, printer) => ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config3) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config3, indentation + config3.indent, depth, refs2, printer) : "", object.children ? (0, _markup.printChildren)(object.children, config3, indentation + config3.indent, depth, refs2, printer) : "", config3, indentation);
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === testSymbol;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_build = __commonJS3({ "../../node_modules/pretty-format/build/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = exports22.DEFAULT_OPTIONS = void 0;
      exports22.format = format4;
      exports22.plugins = void 0;
      var _ansiStyles = _interopRequireDefault(require_ansi_styles()), _collections = require_collections(), _AsymmetricMatcher = _interopRequireDefault(require_AsymmetricMatcher()), _DOMCollection = _interopRequireDefault(require_DOMCollection()), _DOMElement = _interopRequireDefault(require_DOMElement()), _Immutable = _interopRequireDefault(require_Immutable()), _ReactElement = _interopRequireDefault(require_ReactElement()), _ReactTestComponent = _interopRequireDefault(require_ReactTestComponent());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var toString22 = Object.prototype.toString, toISOString = Date.prototype.toISOString, errorToString = Error.prototype.toString, regExpToString = RegExp.prototype.toString, getConstructorName = (val) => typeof val.constructor == "function" && val.constructor.name || "Object", isWindow = (val) => typeof window < "u" && val === window, SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/, NEWLINE_REGEXP = /\n/gi, PrettyFormatPluginError = class extends Error {
        constructor(message, stack) {
          super(message), this.stack = stack, this.name = this.constructor.name;
        }
      };
      function isToStringedArrayType(toStringed) {
        return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
      }
      function printNumber(val) {
        return Object.is(val, -0) ? "-0" : String(val);
      }
      function printBigInt(val) {
        return `${val}n`;
      }
      function printFunction(val, printFunctionName) {
        return printFunctionName ? `[Function ${val.name || "anonymous"}]` : "[Function]";
      }
      function printSymbol(val) {
        return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
      }
      function printError(val) {
        return `[${errorToString.call(val)}]`;
      }
      function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
        if (val === true || val === false)
          return `${val}`;
        if (val === void 0)
          return "undefined";
        if (val === null)
          return "null";
        let typeOf = typeof val;
        if (typeOf === "number")
          return printNumber(val);
        if (typeOf === "bigint")
          return printBigInt(val);
        if (typeOf === "string")
          return escapeString ? `"${val.replace(/"|\\/g, "\\$&")}"` : `"${val}"`;
        if (typeOf === "function")
          return printFunction(val, printFunctionName);
        if (typeOf === "symbol")
          return printSymbol(val);
        let toStringed = toString22.call(val);
        return toStringed === "[object WeakMap]" ? "WeakMap {}" : toStringed === "[object WeakSet]" ? "WeakSet {}" : toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]" ? printFunction(val, printFunctionName) : toStringed === "[object Symbol]" ? printSymbol(val) : toStringed === "[object Date]" ? isNaN(+val) ? "Date { NaN }" : toISOString.call(val) : toStringed === "[object Error]" ? printError(val) : toStringed === "[object RegExp]" ? escapeRegex ? regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : regExpToString.call(val) : val instanceof Error ? printError(val) : null;
      }
      function printComplexValue(val, config3, indentation, depth, refs2, hasCalledToJSON) {
        if (refs2.indexOf(val) !== -1)
          return "[Circular]";
        refs2 = refs2.slice(), refs2.push(val);
        let hitMaxDepth = ++depth > config3.maxDepth, min = config3.min;
        if (config3.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON == "function" && !hasCalledToJSON)
          return printer(val.toJSON(), config3, indentation, depth, refs2, true);
        let toStringed = toString22.call(val);
        return toStringed === "[object Arguments]" ? hitMaxDepth ? "[Arguments]" : `${min ? "" : "Arguments "}[${(0, _collections.printListItems)(val, config3, indentation, depth, refs2, printer)}]` : isToStringedArrayType(toStringed) ? hitMaxDepth ? `[${val.constructor.name}]` : `${min || !config3.printBasicPrototype && val.constructor.name === "Array" ? "" : `${val.constructor.name} `}[${(0, _collections.printListItems)(val, config3, indentation, depth, refs2, printer)}]` : toStringed === "[object Map]" ? hitMaxDepth ? "[Map]" : `Map {${(0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer, " => ")}}` : toStringed === "[object Set]" ? hitMaxDepth ? "[Set]" : `Set {${(0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer)}}` : hitMaxDepth || isWindow(val) ? `[${getConstructorName(val)}]` : `${min || !config3.printBasicPrototype && getConstructorName(val) === "Object" ? "" : `${getConstructorName(val)} `}{${(0, _collections.printObjectProperties)(val, config3, indentation, depth, refs2, printer)}}`;
      }
      function isNewPlugin(plugin) {
        return plugin.serialize != null;
      }
      function printPlugin(plugin, val, config3, indentation, depth, refs2) {
        let printed;
        try {
          printed = isNewPlugin(plugin) ? plugin.serialize(val, config3, indentation, depth, refs2, printer) : plugin.print(val, (valChild) => printer(valChild, config3, indentation, depth, refs2), (str) => {
            let indentationNext = indentation + config3.indent;
            return indentationNext + str.replace(NEWLINE_REGEXP, `
${indentationNext}`);
          }, { edgeSpacing: config3.spacingOuter, min: config3.min, spacing: config3.spacingInner }, config3.colors);
        } catch (error) {
          throw new PrettyFormatPluginError(error.message, error.stack);
        }
        if (typeof printed != "string")
          throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
        return printed;
      }
      function findPlugin(plugins5, val) {
        for (let p2 = 0; p2 < plugins5.length; p2++)
          try {
            if (plugins5[p2].test(val))
              return plugins5[p2];
          } catch (error) {
            throw new PrettyFormatPluginError(error.message, error.stack);
          }
        return null;
      }
      function printer(val, config3, indentation, depth, refs2, hasCalledToJSON) {
        let plugin = findPlugin(config3.plugins, val);
        if (plugin !== null)
          return printPlugin(plugin, val, config3, indentation, depth, refs2);
        let basicResult = printBasicValue(val, config3.printFunctionName, config3.escapeRegex, config3.escapeString);
        return basicResult !== null ? basicResult : printComplexValue(val, config3, indentation, depth, refs2, hasCalledToJSON);
      }
      var DEFAULT_THEME = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME), toOptionsSubtype = (options2) => options2, DEFAULT_OPTIONS = toOptionsSubtype({ callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, maxWidth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: DEFAULT_THEME });
      exports22.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
      function validateOptions(options2) {
        if (Object.keys(options2).forEach((key2) => {
          if (!Object.prototype.hasOwnProperty.call(DEFAULT_OPTIONS, key2))
            throw new Error(`pretty-format: Unknown option "${key2}".`);
        }), options2.min && options2.indent !== void 0 && options2.indent !== 0)
          throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
        if (options2.theme !== void 0) {
          if (options2.theme === null)
            throw new Error('pretty-format: Option "theme" must not be null.');
          if (typeof options2.theme != "object")
            throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options2.theme}".`);
        }
      }
      var getColorsHighlight = (options2) => DEFAULT_THEME_KEYS.reduce((colors, key2) => {
        let value2 = options2.theme && options2.theme[key2] !== void 0 ? options2.theme[key2] : DEFAULT_THEME[key2], color = value2 && _ansiStyles.default[value2];
        if (color && typeof color.close == "string" && typeof color.open == "string")
          colors[key2] = color;
        else
          throw new Error(`pretty-format: Option "theme" has a key "${key2}" whose value "${value2}" is undefined in ansi-styles.`);
        return colors;
      }, /* @__PURE__ */ Object.create(null)), getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key2) => (colors[key2] = { close: "", open: "" }, colors), /* @__PURE__ */ Object.create(null)), getPrintFunctionName = (options2) => (options2 == null ? void 0 : options2.printFunctionName) ?? DEFAULT_OPTIONS.printFunctionName, getEscapeRegex = (options2) => (options2 == null ? void 0 : options2.escapeRegex) ?? DEFAULT_OPTIONS.escapeRegex, getEscapeString = (options2) => (options2 == null ? void 0 : options2.escapeString) ?? DEFAULT_OPTIONS.escapeString, getConfig3 = (options2) => ({ callToJSON: (options2 == null ? void 0 : options2.callToJSON) ?? DEFAULT_OPTIONS.callToJSON, colors: (options2 == null ? void 0 : options2.highlight) ? getColorsHighlight(options2) : getColorsEmpty(), compareKeys: typeof (options2 == null ? void 0 : options2.compareKeys) == "function" || (options2 == null ? void 0 : options2.compareKeys) === null ? options2.compareKeys : DEFAULT_OPTIONS.compareKeys, escapeRegex: getEscapeRegex(options2), escapeString: getEscapeString(options2), indent: (options2 == null ? void 0 : options2.min) ? "" : createIndent((options2 == null ? void 0 : options2.indent) ?? DEFAULT_OPTIONS.indent), maxDepth: (options2 == null ? void 0 : options2.maxDepth) ?? DEFAULT_OPTIONS.maxDepth, maxWidth: (options2 == null ? void 0 : options2.maxWidth) ?? DEFAULT_OPTIONS.maxWidth, min: (options2 == null ? void 0 : options2.min) ?? DEFAULT_OPTIONS.min, plugins: (options2 == null ? void 0 : options2.plugins) ?? DEFAULT_OPTIONS.plugins, printBasicPrototype: (options2 == null ? void 0 : options2.printBasicPrototype) ?? true, printFunctionName: getPrintFunctionName(options2), spacingInner: (options2 == null ? void 0 : options2.min) ? " " : `
`, spacingOuter: (options2 == null ? void 0 : options2.min) ? "" : `
` });
      function createIndent(indent) {
        return new Array(indent + 1).join(" ");
      }
      function format4(val, options2) {
        if (options2 && (validateOptions(options2), options2.plugins)) {
          let plugin = findPlugin(options2.plugins, val);
          if (plugin !== null)
            return printPlugin(plugin, val, getConfig3(options2), "", 0, []);
        }
        let basicResult = printBasicValue(val, getPrintFunctionName(options2), getEscapeRegex(options2), getEscapeString(options2));
        return basicResult !== null ? basicResult : printComplexValue(val, getConfig3(options2), "", 0, []);
      }
      var plugins4 = { AsymmetricMatcher: _AsymmetricMatcher.default, DOMCollection: _DOMCollection.default, DOMElement: _DOMElement.default, Immutable: _Immutable.default, ReactElement: _ReactElement.default, ReactTestComponent: _ReactTestComponent.default };
      exports22.plugins = plugins4;
      var _default = format4;
      exports22.default = _default;
    } });
    var require_build2 = __commonJS3({ "../../node_modules/diff-sequences/build/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = diffSequence;
      var pkg = "diff-sequences", NOT_YET_SET = 0, countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {
        let nCommon = 0;
        for (; aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex); )
          aIndex += 1, bIndex += 1, nCommon += 1;
        return nCommon;
      }, countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {
        let nCommon = 0;
        for (; aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex); )
          aIndex -= 1, bIndex -= 1, nCommon += 1;
        return nCommon;
      }, extendPathsF = (d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF) => {
        let iF = 0, kF = -d2, aFirst = aIndexesF[iF], aIndexPrev1 = aFirst;
        aIndexesF[iF] += countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
        let nF = d2 < iMaxF ? d2 : iMaxF;
        for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
          if (iF !== d2 && aIndexPrev1 < aIndexesF[iF])
            aFirst = aIndexesF[iF];
          else if (aFirst = aIndexPrev1 + 1, aEnd <= aFirst)
            return iF - 1;
          aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aFirst + countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
        }
        return iMaxF;
      }, extendPathsR = (d2, aStart, bStart, bR, isCommon, aIndexesR, iMaxR) => {
        let iR = 0, kR = d2, aFirst = aIndexesR[iR], aIndexPrev1 = aFirst;
        aIndexesR[iR] -= countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
        let nR = d2 < iMaxR ? d2 : iMaxR;
        for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
          if (iR !== d2 && aIndexesR[iR] < aIndexPrev1)
            aFirst = aIndexesR[iR];
          else if (aFirst = aIndexPrev1 - 1, aFirst < aStart)
            return iR - 1;
          aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aFirst - countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
        }
        return iMaxR;
      }, extendOverlappablePathsF = (d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
        let bF = bStart - aStart, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapF = -baDeltaLength - (d2 - 1), kMaxOverlapF = -baDeltaLength + (d2 - 1), aIndexPrev1 = NOT_YET_SET, nF = d2 < iMaxF ? d2 : iMaxF;
        for (let iF = 0, kF = -d2; iF <= nF; iF += 1, kF += 2) {
          let insert = iF === 0 || iF !== d2 && aIndexPrev1 < aIndexesF[iF], aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev + 1, bFirst = bF + aFirst - kF, nCommonF = countCommonItemsF(aFirst + 1, aEnd, bFirst + 1, bEnd, isCommon), aLast = aFirst + nCommonF;
          if (aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aLast, kMinOverlapF <= kF && kF <= kMaxOverlapF) {
            let iR = (d2 - 1 - (kF + baDeltaLength)) / 2;
            if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
              let bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1), nCommonR = countCommonItemsR(aStart, aLastPrev, bStart, bLastPrev, isCommon), aIndexPrevFirst = aLastPrev - nCommonR, bIndexPrevFirst = bLastPrev - nCommonR, aEndPreceding = aIndexPrevFirst + 1, bEndPreceding = bIndexPrevFirst + 1;
              division.nChangePreceding = d2 - 1, d2 - 1 === aEndPreceding + bEndPreceding - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aEndPreceding, division.bEndPreceding = bEndPreceding), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aEndPreceding, division.bCommonPreceding = bEndPreceding), division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aFirst + 1, division.bCommonFollowing = bFirst + 1);
              let aStartFollowing = aLast + 1, bStartFollowing = bFirst + nCommonF + 1;
              return division.nChangeFollowing = d2 - 1, d2 - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing), true;
            }
          }
        }
        return false;
      }, extendOverlappablePathsR = (d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
        let bR = bEnd - aEnd, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapR = baDeltaLength - d2, kMaxOverlapR = baDeltaLength + d2, aIndexPrev1 = NOT_YET_SET, nR = d2 < iMaxR ? d2 : iMaxR;
        for (let iR = 0, kR = d2; iR <= nR; iR += 1, kR -= 2) {
          let insert = iR === 0 || iR !== d2 && aIndexesR[iR] < aIndexPrev1, aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev - 1, bFirst = bR + aFirst - kR, nCommonR = countCommonItemsR(aStart, aFirst - 1, bStart, bFirst - 1, isCommon), aLast = aFirst - nCommonR;
          if (aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aLast, kMinOverlapR <= kR && kR <= kMaxOverlapR) {
            let iF = (d2 + (kR - baDeltaLength)) / 2;
            if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
              let bLast = bFirst - nCommonR;
              if (division.nChangePreceding = d2, d2 === aLast + bLast - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aLast, division.bEndPreceding = bLast), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aLast, division.bCommonPreceding = bLast), division.nChangeFollowing = d2 - 1, d2 === 1)
                division.nCommonFollowing = 0, division.aStartFollowing = aEnd, division.bStartFollowing = bEnd;
              else {
                let bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1), nCommonF = countCommonItemsF(aLastPrev, aEnd, bLastPrev, bEnd, isCommon);
                division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aLastPrev, division.bCommonFollowing = bLastPrev);
                let aStartFollowing = aLastPrev + nCommonF, bStartFollowing = bLastPrev + nCommonF;
                d2 - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing);
              }
              return true;
            }
          }
        }
        return false;
      }, divide = (nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division) => {
        let bF = bStart - aStart, bR = bEnd - aEnd, aLength = aEnd - aStart, bLength = bEnd - bStart, baDeltaLength = bLength - aLength, iMaxF = aLength, iMaxR = aLength;
        if (aIndexesF[0] = aStart - 1, aIndexesR[0] = aEnd, baDeltaLength % 2 === 0) {
          let dMin = (nChange || baDeltaLength) / 2, dMax = (aLength + bLength) / 2;
          for (let d2 = 1; d2 <= dMax; d2 += 1)
            if (iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d2 < dMin)
              iMaxR = extendPathsR(d2, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
            else if (extendOverlappablePathsR(d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division))
              return;
        } else {
          let dMin = ((nChange || baDeltaLength) + 1) / 2, dMax = (aLength + bLength + 1) / 2, d2 = 1;
          for (iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d2 += 1; d2 <= dMax; d2 += 1)
            if (iMaxR = extendPathsR(d2 - 1, aStart, bStart, bR, isCommon, aIndexesR, iMaxR), d2 < dMin)
              iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
            else if (extendOverlappablePathsF(d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division))
              return;
        }
        throw new Error(`${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`);
      }, findSubsequences = (nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division) => {
        if (bEnd - bStart < aEnd - aStart) {
          if (transposed = !transposed, transposed && callbacks.length === 1) {
            let { foundSubsequence: foundSubsequence2, isCommon: isCommon2 } = callbacks[0];
            callbacks[1] = { foundSubsequence: (nCommon, bCommon, aCommon) => {
              foundSubsequence2(nCommon, aCommon, bCommon);
            }, isCommon: (bIndex, aIndex) => isCommon2(aIndex, bIndex) };
          }
          let tStart = aStart, tEnd = aEnd;
          aStart = bStart, aEnd = bEnd, bStart = tStart, bEnd = tEnd;
        }
        let { foundSubsequence, isCommon } = callbacks[transposed ? 1 : 0];
        divide(nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division);
        let { nChangePreceding, aEndPreceding, bEndPreceding, nCommonPreceding, aCommonPreceding, bCommonPreceding, nCommonFollowing, aCommonFollowing, bCommonFollowing, nChangeFollowing, aStartFollowing, bStartFollowing } = division;
        aStart < aEndPreceding && bStart < bEndPreceding && findSubsequences(nChangePreceding, aStart, aEndPreceding, bStart, bEndPreceding, transposed, callbacks, aIndexesF, aIndexesR, division), nCommonPreceding !== 0 && foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding), nCommonFollowing !== 0 && foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing), aStartFollowing < aEnd && bStartFollowing < bEnd && findSubsequences(nChangeFollowing, aStartFollowing, aEnd, bStartFollowing, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division);
      }, validateLength = (name2, arg) => {
        if (typeof arg != "number")
          throw new TypeError(`${pkg}: ${name2} typeof ${typeof arg} is not a number`);
        if (!Number.isSafeInteger(arg))
          throw new RangeError(`${pkg}: ${name2} value ${arg} is not a safe integer`);
        if (arg < 0)
          throw new RangeError(`${pkg}: ${name2} value ${arg} is a negative integer`);
      }, validateCallback = (name2, arg) => {
        let type3 = typeof arg;
        if (type3 !== "function")
          throw new TypeError(`${pkg}: ${name2} typeof ${type3} is not a function`);
      };
      function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
        validateLength("aLength", aLength), validateLength("bLength", bLength), validateCallback("isCommon", isCommon), validateCallback("foundSubsequence", foundSubsequence);
        let nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
        if (nCommonF !== 0 && foundSubsequence(nCommonF, 0, 0), aLength !== nCommonF || bLength !== nCommonF) {
          let aStart = nCommonF, bStart = nCommonF, nCommonR = countCommonItemsR(aStart, aLength - 1, bStart, bLength - 1, isCommon), aEnd = aLength - nCommonR, bEnd = bLength - nCommonR, nCommonFR = nCommonF + nCommonR;
          aLength !== nCommonFR && bLength !== nCommonFR && findSubsequences(0, aStart, aEnd, bStart, bEnd, false, [{ foundSubsequence, isCommon }], [NOT_YET_SET], [NOT_YET_SET], { aCommonFollowing: NOT_YET_SET, aCommonPreceding: NOT_YET_SET, aEndPreceding: NOT_YET_SET, aStartFollowing: NOT_YET_SET, bCommonFollowing: NOT_YET_SET, bCommonPreceding: NOT_YET_SET, bEndPreceding: NOT_YET_SET, bStartFollowing: NOT_YET_SET, nChangeFollowing: NOT_YET_SET, nChangePreceding: NOT_YET_SET, nCommonFollowing: NOT_YET_SET, nCommonPreceding: NOT_YET_SET }), nCommonR !== 0 && foundSubsequence(nCommonR, aEnd, bEnd);
        }
      }
    } });
    var require_min_indent = __commonJS3({ "../../node_modules/min-indent/index.js"(exports22, module22) {
      "use strict";
      module22.exports = (string2) => {
        let match = string2.match(/^[ \t]*(?=\S)/gm);
        return match ? match.reduce((r, a) => Math.min(r, a.length), 1 / 0) : 0;
      };
    } });
    var require_strip_indent = __commonJS3({ "../../node_modules/strip-indent/index.js"(exports22, module22) {
      "use strict";
      var minIndent = require_min_indent();
      module22.exports = (string2) => {
        let indent = minIndent(string2);
        if (indent === 0)
          return string2;
        let regex = new RegExp(`^[ \\t]{${indent}}`, "gm");
        return string2.replace(regex, "");
      };
    } });
    var require_indent_string = __commonJS3({ "../../node_modules/indent-string/index.js"(exports22, module22) {
      "use strict";
      module22.exports = (string2, count = 1, options2) => {
        if (options2 = { indent: " ", includeEmptyLines: false, ...options2 }, typeof string2 != "string")
          throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string2}\``);
        if (typeof count != "number")
          throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
        if (typeof options2.indent != "string")
          throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options2.indent}\``);
        if (count === 0)
          return string2;
        let regex = options2.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
        return string2.replace(regex, options2.indent.repeat(count));
      };
    } });
    var require_redent = __commonJS3({ "../../node_modules/redent/index.js"(exports22, module22) {
      "use strict";
      var stripIndent = require_strip_indent(), indentString = require_indent_string();
      module22.exports = (string2, count = 0, options2) => indentString(stripIndent(string2), count, options2);
    } });
    var require_listCacheClear2 = __commonJS3({ "../../node_modules/lodash/_listCacheClear.js"(exports22, module22) {
      "use strict";
      function listCacheClear2() {
        this.__data__ = [], this.size = 0;
      }
      module22.exports = listCacheClear2;
    } });
    var require_eq2 = __commonJS3({ "../../node_modules/lodash/eq.js"(exports22, module22) {
      "use strict";
      function eq22(value2, other) {
        return value2 === other || value2 !== value2 && other !== other;
      }
      module22.exports = eq22;
    } });
    var require_assocIndexOf2 = __commonJS3({ "../../node_modules/lodash/_assocIndexOf.js"(exports22, module22) {
      "use strict";
      var eq22 = require_eq2();
      function assocIndexOf2(array, key2) {
        for (var length = array.length; length--; )
          if (eq22(array[length][0], key2))
            return length;
        return -1;
      }
      module22.exports = assocIndexOf2;
    } });
    var require_listCacheDelete2 = __commonJS3({ "../../node_modules/lodash/_listCacheDelete.js"(exports22, module22) {
      "use strict";
      var assocIndexOf2 = require_assocIndexOf2(), arrayProto2 = Array.prototype, splice2 = arrayProto2.splice;
      function listCacheDelete2(key2) {
        var data = this.__data__, index = assocIndexOf2(data, key2);
        if (index < 0)
          return false;
        var lastIndex = data.length - 1;
        return index == lastIndex ? data.pop() : splice2.call(data, index, 1), --this.size, true;
      }
      module22.exports = listCacheDelete2;
    } });
    var require_listCacheGet2 = __commonJS3({ "../../node_modules/lodash/_listCacheGet.js"(exports22, module22) {
      "use strict";
      var assocIndexOf2 = require_assocIndexOf2();
      function listCacheGet2(key2) {
        var data = this.__data__, index = assocIndexOf2(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      module22.exports = listCacheGet2;
    } });
    var require_listCacheHas2 = __commonJS3({ "../../node_modules/lodash/_listCacheHas.js"(exports22, module22) {
      "use strict";
      var assocIndexOf2 = require_assocIndexOf2();
      function listCacheHas2(key2) {
        return assocIndexOf2(this.__data__, key2) > -1;
      }
      module22.exports = listCacheHas2;
    } });
    var require_listCacheSet2 = __commonJS3({ "../../node_modules/lodash/_listCacheSet.js"(exports22, module22) {
      "use strict";
      var assocIndexOf2 = require_assocIndexOf2();
      function listCacheSet2(key2, value2) {
        var data = this.__data__, index = assocIndexOf2(data, key2);
        return index < 0 ? (++this.size, data.push([key2, value2])) : data[index][1] = value2, this;
      }
      module22.exports = listCacheSet2;
    } });
    var require_ListCache2 = __commonJS3({ "../../node_modules/lodash/_ListCache.js"(exports22, module22) {
      "use strict";
      var listCacheClear2 = require_listCacheClear2(), listCacheDelete2 = require_listCacheDelete2(), listCacheGet2 = require_listCacheGet2(), listCacheHas2 = require_listCacheHas2(), listCacheSet2 = require_listCacheSet2();
      function ListCache2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        for (this.clear(); ++index < length; ) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype.delete = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      module22.exports = ListCache2;
    } });
    var require_stackClear2 = __commonJS3({ "../../node_modules/lodash/_stackClear.js"(exports22, module22) {
      "use strict";
      var ListCache2 = require_ListCache2();
      function stackClear() {
        this.__data__ = new ListCache2(), this.size = 0;
      }
      module22.exports = stackClear;
    } });
    var require_stackDelete2 = __commonJS3({ "../../node_modules/lodash/_stackDelete.js"(exports22, module22) {
      "use strict";
      function stackDelete(key2) {
        var data = this.__data__, result2 = data.delete(key2);
        return this.size = data.size, result2;
      }
      module22.exports = stackDelete;
    } });
    var require_stackGet2 = __commonJS3({ "../../node_modules/lodash/_stackGet.js"(exports22, module22) {
      "use strict";
      function stackGet(key2) {
        return this.__data__.get(key2);
      }
      module22.exports = stackGet;
    } });
    var require_stackHas2 = __commonJS3({ "../../node_modules/lodash/_stackHas.js"(exports22, module22) {
      "use strict";
      function stackHas(key2) {
        return this.__data__.has(key2);
      }
      module22.exports = stackHas;
    } });
    var require_freeGlobal2 = __commonJS3({ "../../node_modules/lodash/_freeGlobal.js"(exports22, module22) {
      "use strict";
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      module22.exports = freeGlobal2;
    } });
    var require_root2 = __commonJS3({ "../../node_modules/lodash/_root.js"(exports22, module22) {
      "use strict";
      var freeGlobal2 = require_freeGlobal2(), freeSelf2 = typeof self == "object" && self && self.Object === Object && self, root3 = freeGlobal2 || freeSelf2 || Function("return this")();
      module22.exports = root3;
    } });
    var require_Symbol2 = __commonJS3({ "../../node_modules/lodash/_Symbol.js"(exports22, module22) {
      "use strict";
      var root3 = require_root2(), Symbol22 = root3.Symbol;
      module22.exports = Symbol22;
    } });
    var require_getRawTag2 = __commonJS3({ "../../node_modules/lodash/_getRawTag.js"(exports22, module22) {
      "use strict";
      var Symbol22 = require_Symbol2(), objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty, nativeObjectToString3 = objectProto6.toString, symToStringTag3 = Symbol22 ? Symbol22.toStringTag : void 0;
      function getRawTag2(value2) {
        var isOwn = hasOwnProperty5.call(value2, symToStringTag3), tag = value2[symToStringTag3];
        try {
          value2[symToStringTag3] = void 0;
          var unmasked = true;
        } catch {
        }
        var result2 = nativeObjectToString3.call(value2);
        return unmasked && (isOwn ? value2[symToStringTag3] = tag : delete value2[symToStringTag3]), result2;
      }
      module22.exports = getRawTag2;
    } });
    var require_objectToString2 = __commonJS3({ "../../node_modules/lodash/_objectToString.js"(exports22, module22) {
      "use strict";
      var objectProto6 = Object.prototype, nativeObjectToString3 = objectProto6.toString;
      function objectToString2(value2) {
        return nativeObjectToString3.call(value2);
      }
      module22.exports = objectToString2;
    } });
    var require_baseGetTag2 = __commonJS3({ "../../node_modules/lodash/_baseGetTag.js"(exports22, module22) {
      "use strict";
      var Symbol22 = require_Symbol2(), getRawTag2 = require_getRawTag2(), objectToString2 = require_objectToString2(), nullTag2 = "[object Null]", undefinedTag2 = "[object Undefined]", symToStringTag3 = Symbol22 ? Symbol22.toStringTag : void 0;
      function baseGetTag2(value2) {
        return value2 == null ? value2 === void 0 ? undefinedTag2 : nullTag2 : symToStringTag3 && symToStringTag3 in Object(value2) ? getRawTag2(value2) : objectToString2(value2);
      }
      module22.exports = baseGetTag2;
    } });
    var require_isObject2 = __commonJS3({ "../../node_modules/lodash/isObject.js"(exports22, module22) {
      "use strict";
      function isObject22(value2) {
        var type3 = typeof value2;
        return value2 != null && (type3 == "object" || type3 == "function");
      }
      module22.exports = isObject22;
    } });
    var require_isFunction2 = __commonJS3({ "../../node_modules/lodash/isFunction.js"(exports22, module22) {
      "use strict";
      var baseGetTag2 = require_baseGetTag2(), isObject22 = require_isObject2(), asyncTag2 = "[object AsyncFunction]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", proxyTag2 = "[object Proxy]";
      function isFunction2(value2) {
        if (!isObject22(value2))
          return false;
        var tag = baseGetTag2(value2);
        return tag == funcTag2 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
      }
      module22.exports = isFunction2;
    } });
    var require_coreJsData2 = __commonJS3({ "../../node_modules/lodash/_coreJsData.js"(exports22, module22) {
      "use strict";
      var root3 = require_root2(), coreJsData2 = root3["__core-js_shared__"];
      module22.exports = coreJsData2;
    } });
    var require_isMasked2 = __commonJS3({ "../../node_modules/lodash/_isMasked.js"(exports22, module22) {
      "use strict";
      var coreJsData2 = require_coreJsData2(), maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      module22.exports = isMasked2;
    } });
    var require_toSource2 = __commonJS3({ "../../node_modules/lodash/_toSource.js"(exports22, module22) {
      "use strict";
      var funcProto3 = Function.prototype, funcToString3 = funcProto3.toString;
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString3.call(func);
          } catch {
          }
          try {
            return func + "";
          } catch {
          }
        }
        return "";
      }
      module22.exports = toSource2;
    } });
    var require_baseIsNative2 = __commonJS3({ "../../node_modules/lodash/_baseIsNative.js"(exports22, module22) {
      "use strict";
      var isFunction2 = require_isFunction2(), isMasked2 = require_isMasked2(), isObject22 = require_isObject2(), toSource2 = require_toSource2(), reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor2 = /^\[object .+?Constructor\]$/, funcProto3 = Function.prototype, objectProto6 = Object.prototype, funcToString3 = funcProto3.toString, hasOwnProperty5 = objectProto6.hasOwnProperty, reIsNative2 = RegExp("^" + funcToString3.call(hasOwnProperty5).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative2(value2) {
        if (!isObject22(value2) || isMasked2(value2))
          return false;
        var pattern = isFunction2(value2) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value2));
      }
      module22.exports = baseIsNative2;
    } });
    var require_getValue2 = __commonJS3({ "../../node_modules/lodash/_getValue.js"(exports22, module22) {
      "use strict";
      function getValue2(object, key2) {
        return object == null ? void 0 : object[key2];
      }
      module22.exports = getValue2;
    } });
    var require_getNative2 = __commonJS3({ "../../node_modules/lodash/_getNative.js"(exports22, module22) {
      "use strict";
      var baseIsNative2 = require_baseIsNative2(), getValue2 = require_getValue2();
      function getNative2(object, key2) {
        var value2 = getValue2(object, key2);
        return baseIsNative2(value2) ? value2 : void 0;
      }
      module22.exports = getNative2;
    } });
    var require_Map2 = __commonJS3({ "../../node_modules/lodash/_Map.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), root3 = require_root2(), Map22 = getNative2(root3, "Map");
      module22.exports = Map22;
    } });
    var require_nativeCreate2 = __commonJS3({ "../../node_modules/lodash/_nativeCreate.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), nativeCreate2 = getNative2(Object, "create");
      module22.exports = nativeCreate2;
    } });
    var require_hashClear2 = __commonJS3({ "../../node_modules/lodash/_hashClear.js"(exports22, module22) {
      "use strict";
      var nativeCreate2 = require_nativeCreate2();
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {}, this.size = 0;
      }
      module22.exports = hashClear2;
    } });
    var require_hashDelete2 = __commonJS3({ "../../node_modules/lodash/_hashDelete.js"(exports22, module22) {
      "use strict";
      function hashDelete2(key2) {
        var result2 = this.has(key2) && delete this.__data__[key2];
        return this.size -= result2 ? 1 : 0, result2;
      }
      module22.exports = hashDelete2;
    } });
    var require_hashGet2 = __commonJS3({ "../../node_modules/lodash/_hashGet.js"(exports22, module22) {
      "use strict";
      var nativeCreate2 = require_nativeCreate2(), HASH_UNDEFINED3 = "__lodash_hash_undefined__", objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function hashGet2(key2) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result2 = data[key2];
          return result2 === HASH_UNDEFINED3 ? void 0 : result2;
        }
        return hasOwnProperty5.call(data, key2) ? data[key2] : void 0;
      }
      module22.exports = hashGet2;
    } });
    var require_hashHas2 = __commonJS3({ "../../node_modules/lodash/_hashHas.js"(exports22, module22) {
      "use strict";
      var nativeCreate2 = require_nativeCreate2(), objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function hashHas2(key2) {
        var data = this.__data__;
        return nativeCreate2 ? data[key2] !== void 0 : hasOwnProperty5.call(data, key2);
      }
      module22.exports = hashHas2;
    } });
    var require_hashSet2 = __commonJS3({ "../../node_modules/lodash/_hashSet.js"(exports22, module22) {
      "use strict";
      var nativeCreate2 = require_nativeCreate2(), HASH_UNDEFINED3 = "__lodash_hash_undefined__";
      function hashSet2(key2, value2) {
        var data = this.__data__;
        return this.size += this.has(key2) ? 0 : 1, data[key2] = nativeCreate2 && value2 === void 0 ? HASH_UNDEFINED3 : value2, this;
      }
      module22.exports = hashSet2;
    } });
    var require_Hash2 = __commonJS3({ "../../node_modules/lodash/_Hash.js"(exports22, module22) {
      "use strict";
      var hashClear2 = require_hashClear2(), hashDelete2 = require_hashDelete2(), hashGet2 = require_hashGet2(), hashHas2 = require_hashHas2(), hashSet2 = require_hashSet2();
      function Hash2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        for (this.clear(); ++index < length; ) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype.delete = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      module22.exports = Hash2;
    } });
    var require_mapCacheClear2 = __commonJS3({ "../../node_modules/lodash/_mapCacheClear.js"(exports22, module22) {
      "use strict";
      var Hash2 = require_Hash2(), ListCache2 = require_ListCache2(), Map22 = require_Map2();
      function mapCacheClear2() {
        this.size = 0, this.__data__ = { hash: new Hash2(), map: new (Map22 || ListCache2)(), string: new Hash2() };
      }
      module22.exports = mapCacheClear2;
    } });
    var require_isKeyable2 = __commonJS3({ "../../node_modules/lodash/_isKeyable.js"(exports22, module22) {
      "use strict";
      function isKeyable2(value2) {
        var type3 = typeof value2;
        return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value2 !== "__proto__" : value2 === null;
      }
      module22.exports = isKeyable2;
    } });
    var require_getMapData2 = __commonJS3({ "../../node_modules/lodash/_getMapData.js"(exports22, module22) {
      "use strict";
      var isKeyable2 = require_isKeyable2();
      function getMapData2(map, key2) {
        var data = map.__data__;
        return isKeyable2(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
      }
      module22.exports = getMapData2;
    } });
    var require_mapCacheDelete2 = __commonJS3({ "../../node_modules/lodash/_mapCacheDelete.js"(exports22, module22) {
      "use strict";
      var getMapData2 = require_getMapData2();
      function mapCacheDelete2(key2) {
        var result2 = getMapData2(this, key2).delete(key2);
        return this.size -= result2 ? 1 : 0, result2;
      }
      module22.exports = mapCacheDelete2;
    } });
    var require_mapCacheGet2 = __commonJS3({ "../../node_modules/lodash/_mapCacheGet.js"(exports22, module22) {
      "use strict";
      var getMapData2 = require_getMapData2();
      function mapCacheGet2(key2) {
        return getMapData2(this, key2).get(key2);
      }
      module22.exports = mapCacheGet2;
    } });
    var require_mapCacheHas2 = __commonJS3({ "../../node_modules/lodash/_mapCacheHas.js"(exports22, module22) {
      "use strict";
      var getMapData2 = require_getMapData2();
      function mapCacheHas2(key2) {
        return getMapData2(this, key2).has(key2);
      }
      module22.exports = mapCacheHas2;
    } });
    var require_mapCacheSet2 = __commonJS3({ "../../node_modules/lodash/_mapCacheSet.js"(exports22, module22) {
      "use strict";
      var getMapData2 = require_getMapData2();
      function mapCacheSet2(key2, value2) {
        var data = getMapData2(this, key2), size = data.size;
        return data.set(key2, value2), this.size += data.size == size ? 0 : 1, this;
      }
      module22.exports = mapCacheSet2;
    } });
    var require_MapCache2 = __commonJS3({ "../../node_modules/lodash/_MapCache.js"(exports22, module22) {
      "use strict";
      var mapCacheClear2 = require_mapCacheClear2(), mapCacheDelete2 = require_mapCacheDelete2(), mapCacheGet2 = require_mapCacheGet2(), mapCacheHas2 = require_mapCacheHas2(), mapCacheSet2 = require_mapCacheSet2();
      function MapCache2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        for (this.clear(); ++index < length; ) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype.delete = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      module22.exports = MapCache2;
    } });
    var require_stackSet2 = __commonJS3({ "../../node_modules/lodash/_stackSet.js"(exports22, module22) {
      "use strict";
      var ListCache2 = require_ListCache2(), Map22 = require_Map2(), MapCache2 = require_MapCache2(), LARGE_ARRAY_SIZE = 200;
      function stackSet(key2, value2) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs = data.__data__;
          if (!Map22 || pairs.length < LARGE_ARRAY_SIZE - 1)
            return pairs.push([key2, value2]), this.size = ++data.size, this;
          data = this.__data__ = new MapCache2(pairs);
        }
        return data.set(key2, value2), this.size = data.size, this;
      }
      module22.exports = stackSet;
    } });
    var require_Stack2 = __commonJS3({ "../../node_modules/lodash/_Stack.js"(exports22, module22) {
      "use strict";
      var ListCache2 = require_ListCache2(), stackClear = require_stackClear2(), stackDelete = require_stackDelete2(), stackGet = require_stackGet2(), stackHas = require_stackHas2(), stackSet = require_stackSet2();
      function Stack(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype.delete = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module22.exports = Stack;
    } });
    var require_setCacheAdd2 = __commonJS3({ "../../node_modules/lodash/_setCacheAdd.js"(exports22, module22) {
      "use strict";
      var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
      function setCacheAdd(value2) {
        return this.__data__.set(value2, HASH_UNDEFINED3), this;
      }
      module22.exports = setCacheAdd;
    } });
    var require_setCacheHas2 = __commonJS3({ "../../node_modules/lodash/_setCacheHas.js"(exports22, module22) {
      "use strict";
      function setCacheHas(value2) {
        return this.__data__.has(value2);
      }
      module22.exports = setCacheHas;
    } });
    var require_SetCache2 = __commonJS3({ "../../node_modules/lodash/_SetCache.js"(exports22, module22) {
      "use strict";
      var MapCache2 = require_MapCache2(), setCacheAdd = require_setCacheAdd2(), setCacheHas = require_setCacheHas2();
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        for (this.__data__ = new MapCache2(); ++index < length; )
          this.add(values[index]);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module22.exports = SetCache;
    } });
    var require_arraySome2 = __commonJS3({ "../../node_modules/lodash/_arraySome.js"(exports22, module22) {
      "use strict";
      function arraySome(array, predicate) {
        for (var index = -1, length = array == null ? 0 : array.length; ++index < length; )
          if (predicate(array[index], index, array))
            return true;
        return false;
      }
      module22.exports = arraySome;
    } });
    var require_cacheHas2 = __commonJS3({ "../../node_modules/lodash/_cacheHas.js"(exports22, module22) {
      "use strict";
      function cacheHas(cache, key2) {
        return cache.has(key2);
      }
      module22.exports = cacheHas;
    } });
    var require_equalArrays2 = __commonJS3({ "../../node_modules/lodash/_equalArrays.js"(exports22, module22) {
      "use strict";
      var SetCache = require_SetCache2(), arraySome = require_arraySome2(), cacheHas = require_cacheHas2(), COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength))
          return false;
        var arrStacked = stack.get(array), othStacked = stack.get(other);
        if (arrStacked && othStacked)
          return arrStacked == other && othStacked == array;
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        for (stack.set(array, other), stack.set(other, array); ++index < arrLength; ) {
          var arrValue = array[index], othValue = other[index];
          if (customizer)
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          if (compared !== void 0) {
            if (compared)
              continue;
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack)))
                return seen.push(othIndex);
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        return stack.delete(array), stack.delete(other), result2;
      }
      module22.exports = equalArrays;
    } });
    var require_Uint8Array2 = __commonJS3({ "../../node_modules/lodash/_Uint8Array.js"(exports22, module22) {
      "use strict";
      var root3 = require_root2(), Uint8Array2 = root3.Uint8Array;
      module22.exports = Uint8Array2;
    } });
    var require_mapToArray2 = __commonJS3({ "../../node_modules/lodash/_mapToArray.js"(exports22, module22) {
      "use strict";
      function mapToArray(map) {
        var index = -1, result2 = Array(map.size);
        return map.forEach(function(value2, key2) {
          result2[++index] = [key2, value2];
        }), result2;
      }
      module22.exports = mapToArray;
    } });
    var require_setToArray2 = __commonJS3({ "../../node_modules/lodash/_setToArray.js"(exports22, module22) {
      "use strict";
      function setToArray(set2) {
        var index = -1, result2 = Array(set2.size);
        return set2.forEach(function(value2) {
          result2[++index] = value2;
        }), result2;
      }
      module22.exports = setToArray;
    } });
    var require_equalByTag2 = __commonJS3({ "../../node_modules/lodash/_equalByTag.js"(exports22, module22) {
      "use strict";
      var Symbol22 = require_Symbol2(), Uint8Array2 = require_Uint8Array2(), eq22 = require_eq2(), equalArrays = require_equalArrays2(), mapToArray = require_mapToArray2(), setToArray = require_setToArray2(), COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2, boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", symbolProto2 = Symbol22 ? Symbol22.prototype : void 0, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset)
              return false;
            object = object.buffer, other = other.buffer;
          case arrayBufferTag:
            return !(object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other)));
          case boolTag:
          case dateTag:
          case numberTag:
            return eq22(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            if (convert || (convert = setToArray), object.size != other.size && !isPartial)
              return false;
            var stacked = stack.get(object);
            if (stacked)
              return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG, stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            return stack.delete(object), result2;
          case symbolTag2:
            if (symbolValueOf)
              return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
        return false;
      }
      module22.exports = equalByTag;
    } });
    var require_arrayPush2 = __commonJS3({ "../../node_modules/lodash/_arrayPush.js"(exports22, module22) {
      "use strict";
      function arrayPush(array, values) {
        for (var index = -1, length = values.length, offset = array.length; ++index < length; )
          array[offset + index] = values[index];
        return array;
      }
      module22.exports = arrayPush;
    } });
    var require_isArray2 = __commonJS3({ "../../node_modules/lodash/isArray.js"(exports22, module22) {
      "use strict";
      var isArray2 = Array.isArray;
      module22.exports = isArray2;
    } });
    var require_baseGetAllKeys2 = __commonJS3({ "../../node_modules/lodash/_baseGetAllKeys.js"(exports22, module22) {
      "use strict";
      var arrayPush = require_arrayPush2(), isArray2 = require_isArray2();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      module22.exports = baseGetAllKeys;
    } });
    var require_arrayFilter2 = __commonJS3({ "../../node_modules/lodash/_arrayFilter.js"(exports22, module22) {
      "use strict";
      function arrayFilter(array, predicate) {
        for (var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = []; ++index < length; ) {
          var value2 = array[index];
          predicate(value2, index, array) && (result2[resIndex++] = value2);
        }
        return result2;
      }
      module22.exports = arrayFilter;
    } });
    var require_stubArray2 = __commonJS3({ "../../node_modules/lodash/stubArray.js"(exports22, module22) {
      "use strict";
      function stubArray() {
        return [];
      }
      module22.exports = stubArray;
    } });
    var require_getSymbols2 = __commonJS3({ "../../node_modules/lodash/_getSymbols.js"(exports22, module22) {
      "use strict";
      var arrayFilter = require_arrayFilter2(), stubArray = require_stubArray2(), objectProto6 = Object.prototype, propertyIsEnumerable = objectProto6.propertyIsEnumerable, nativeGetSymbols = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols ? function(object) {
        return object == null ? [] : (object = Object(object), arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        }));
      } : stubArray;
      module22.exports = getSymbols;
    } });
    var require_baseTimes2 = __commonJS3({ "../../node_modules/lodash/_baseTimes.js"(exports22, module22) {
      "use strict";
      function baseTimes(n, iteratee) {
        for (var index = -1, result2 = Array(n); ++index < n; )
          result2[index] = iteratee(index);
        return result2;
      }
      module22.exports = baseTimes;
    } });
    var require_isObjectLike2 = __commonJS3({ "../../node_modules/lodash/isObjectLike.js"(exports22, module22) {
      "use strict";
      function isObjectLike2(value2) {
        return value2 != null && typeof value2 == "object";
      }
      module22.exports = isObjectLike2;
    } });
    var require_baseIsArguments2 = __commonJS3({ "../../node_modules/lodash/_baseIsArguments.js"(exports22, module22) {
      "use strict";
      var baseGetTag2 = require_baseGetTag2(), isObjectLike2 = require_isObjectLike2(), argsTag = "[object Arguments]";
      function baseIsArguments(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == argsTag;
      }
      module22.exports = baseIsArguments;
    } });
    var require_isArguments2 = __commonJS3({ "../../node_modules/lodash/isArguments.js"(exports22, module22) {
      "use strict";
      var baseIsArguments = require_baseIsArguments2(), isObjectLike2 = require_isObjectLike2(), objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty, propertyIsEnumerable = objectProto6.propertyIsEnumerable, isArguments = baseIsArguments(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments : function(value2) {
        return isObjectLike2(value2) && hasOwnProperty5.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
      };
      module22.exports = isArguments;
    } });
    var require_stubFalse2 = __commonJS3({ "../../node_modules/lodash/stubFalse.js"(exports22, module22) {
      "use strict";
      function stubFalse() {
        return false;
      }
      module22.exports = stubFalse;
    } });
    var require_isBuffer2 = __commonJS3({ "../../node_modules/lodash/isBuffer.js"(exports22, module22) {
      "use strict";
      var root3 = require_root2(), stubFalse = require_stubFalse2(), freeExports = typeof exports22 == "object" && exports22 && !exports22.nodeType && exports22, freeModule = freeExports && typeof module22 == "object" && module22 && !module22.nodeType && module22, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root3.Buffer : void 0, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, isBuffer = nativeIsBuffer || stubFalse;
      module22.exports = isBuffer;
    } });
    var require_isIndex2 = __commonJS3({ "../../node_modules/lodash/_isIndex.js"(exports22, module22) {
      "use strict";
      var MAX_SAFE_INTEGER = 9007199254740991, reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value2, length) {
        var type3 = typeof value2;
        return length = length ?? MAX_SAFE_INTEGER, !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value2)) && value2 > -1 && value2 % 1 == 0 && value2 < length;
      }
      module22.exports = isIndex;
    } });
    var require_isLength2 = __commonJS3({ "../../node_modules/lodash/isLength.js"(exports22, module22) {
      "use strict";
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value2) {
        return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
      }
      module22.exports = isLength;
    } });
    var require_baseIsTypedArray2 = __commonJS3({ "../../node_modules/lodash/_baseIsTypedArray.js"(exports22, module22) {
      "use strict";
      var baseGetTag2 = require_baseGetTag2(), isLength = require_isLength2(), isObjectLike2 = require_isObjectLike2(), argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value2) {
        return isObjectLike2(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag2(value2)];
      }
      module22.exports = baseIsTypedArray;
    } });
    var require_baseUnary2 = __commonJS3({ "../../node_modules/lodash/_baseUnary.js"(exports22, module22) {
      "use strict";
      function baseUnary(func) {
        return function(value2) {
          return func(value2);
        };
      }
      module22.exports = baseUnary;
    } });
    var require_nodeUtil2 = __commonJS3({ "../../node_modules/lodash/_nodeUtil.js"(exports22, module22) {
      "use strict";
      var freeGlobal2 = require_freeGlobal2(), freeExports = typeof exports22 == "object" && exports22 && !exports22.nodeType && exports22, freeModule = freeExports && typeof module22 == "object" && module22 && !module22.nodeType && module22, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal2.process, nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch {
        }
      }();
      module22.exports = nodeUtil;
    } });
    var require_isTypedArray2 = __commonJS3({ "../../node_modules/lodash/isTypedArray.js"(exports22, module22) {
      "use strict";
      var baseIsTypedArray = require_baseIsTypedArray2(), baseUnary = require_baseUnary2(), nodeUtil = require_nodeUtil2(), nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module22.exports = isTypedArray;
    } });
    var require_arrayLikeKeys2 = __commonJS3({ "../../node_modules/lodash/_arrayLikeKeys.js"(exports22, module22) {
      "use strict";
      var baseTimes = require_baseTimes2(), isArguments = require_isArguments2(), isArray2 = require_isArray2(), isBuffer = require_isBuffer2(), isIndex = require_isIndex2(), isTypedArray = require_isTypedArray2(), objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function arrayLikeKeys(value2, inherited) {
        var isArr = isArray2(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value2.length, String) : [], length = result2.length;
        for (var key2 in value2)
          (inherited || hasOwnProperty5.call(value2, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length))) && result2.push(key2);
        return result2;
      }
      module22.exports = arrayLikeKeys;
    } });
    var require_isPrototype2 = __commonJS3({ "../../node_modules/lodash/_isPrototype.js"(exports22, module22) {
      "use strict";
      var objectProto6 = Object.prototype;
      function isPrototype(value2) {
        var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto6;
        return value2 === proto;
      }
      module22.exports = isPrototype;
    } });
    var require_overArg2 = __commonJS3({ "../../node_modules/lodash/_overArg.js"(exports22, module22) {
      "use strict";
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module22.exports = overArg;
    } });
    var require_nativeKeys2 = __commonJS3({ "../../node_modules/lodash/_nativeKeys.js"(exports22, module22) {
      "use strict";
      var overArg = require_overArg2(), nativeKeys = overArg(Object.keys, Object);
      module22.exports = nativeKeys;
    } });
    var require_baseKeys2 = __commonJS3({ "../../node_modules/lodash/_baseKeys.js"(exports22, module22) {
      "use strict";
      var isPrototype = require_isPrototype2(), nativeKeys = require_nativeKeys2(), objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object))
          return nativeKeys(object);
        var result2 = [];
        for (var key2 in Object(object))
          hasOwnProperty5.call(object, key2) && key2 != "constructor" && result2.push(key2);
        return result2;
      }
      module22.exports = baseKeys;
    } });
    var require_isArrayLike2 = __commonJS3({ "../../node_modules/lodash/isArrayLike.js"(exports22, module22) {
      "use strict";
      var isFunction2 = require_isFunction2(), isLength = require_isLength2();
      function isArrayLike(value2) {
        return value2 != null && isLength(value2.length) && !isFunction2(value2);
      }
      module22.exports = isArrayLike;
    } });
    var require_keys2 = __commonJS3({ "../../node_modules/lodash/keys.js"(exports22, module22) {
      "use strict";
      var arrayLikeKeys = require_arrayLikeKeys2(), baseKeys = require_baseKeys2(), isArrayLike = require_isArrayLike2();
      function keys2(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module22.exports = keys2;
    } });
    var require_getAllKeys2 = __commonJS3({ "../../node_modules/lodash/_getAllKeys.js"(exports22, module22) {
      "use strict";
      var baseGetAllKeys = require_baseGetAllKeys2(), getSymbols = require_getSymbols2(), keys2 = require_keys2();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys2, getSymbols);
      }
      module22.exports = getAllKeys;
    } });
    var require_equalObjects2 = __commonJS3({ "../../node_modules/lodash/_equalObjects.js"(exports22, module22) {
      "use strict";
      var getAllKeys = require_getAllKeys2(), COMPARE_PARTIAL_FLAG = 1, objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial)
          return false;
        for (var index = objLength; index--; ) {
          var key2 = objProps[index];
          if (!(isPartial ? key2 in other : hasOwnProperty5.call(other, key2)))
            return false;
        }
        var objStacked = stack.get(object), othStacked = stack.get(other);
        if (objStacked && othStacked)
          return objStacked == other && othStacked == object;
        var result2 = true;
        stack.set(object, other), stack.set(other, object);
        for (var skipCtor = isPartial; ++index < objLength; ) {
          key2 = objProps[index];
          var objValue = object[key2], othValue = other[key2];
          if (customizer)
            var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key2 == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor) && (result2 = false);
        }
        return stack.delete(object), stack.delete(other), result2;
      }
      module22.exports = equalObjects;
    } });
    var require_DataView2 = __commonJS3({ "../../node_modules/lodash/_DataView.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), root3 = require_root2(), DataView2 = getNative2(root3, "DataView");
      module22.exports = DataView2;
    } });
    var require_Promise2 = __commonJS3({ "../../node_modules/lodash/_Promise.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), root3 = require_root2(), Promise2 = getNative2(root3, "Promise");
      module22.exports = Promise2;
    } });
    var require_Set2 = __commonJS3({ "../../node_modules/lodash/_Set.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), root3 = require_root2(), Set2 = getNative2(root3, "Set");
      module22.exports = Set2;
    } });
    var require_WeakMap2 = __commonJS3({ "../../node_modules/lodash/_WeakMap.js"(exports22, module22) {
      "use strict";
      var getNative2 = require_getNative2(), root3 = require_root2(), WeakMap2 = getNative2(root3, "WeakMap");
      module22.exports = WeakMap2;
    } });
    var require_getTag2 = __commonJS3({ "../../node_modules/lodash/_getTag.js"(exports22, module22) {
      "use strict";
      var DataView2 = require_DataView2(), Map22 = require_Map2(), Promise2 = require_Promise2(), Set2 = require_Set2(), WeakMap2 = require_WeakMap2(), baseGetTag2 = require_baseGetTag2(), toSource2 = require_toSource2(), mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]", dataViewTag = "[object DataView]", dataViewCtorString = toSource2(DataView2), mapCtorString = toSource2(Map22), promiseCtorString = toSource2(Promise2), setCtorString = toSource2(Set2), weakMapCtorString = toSource2(WeakMap2), getTag2 = baseGetTag2;
      (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map22 && getTag2(new Map22()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) && (getTag2 = function(value2) {
        var result2 = baseGetTag2(value2), Ctor = result2 == objectTag ? value2.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
        if (ctorString)
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        return result2;
      });
      module22.exports = getTag2;
    } });
    var require_baseIsEqualDeep2 = __commonJS3({ "../../node_modules/lodash/_baseIsEqualDeep.js"(exports22, module22) {
      "use strict";
      var Stack = require_Stack2(), equalArrays = require_equalArrays2(), equalByTag = require_equalByTag2(), equalObjects = require_equalObjects2(), getTag2 = require_getTag2(), isArray2 = require_isArray2(), isBuffer = require_isBuffer2(), isTypedArray = require_isTypedArray2(), COMPARE_PARTIAL_FLAG = 1, argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]", objectProto6 = Object.prototype, hasOwnProperty5 = objectProto6.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag2(object), othTag = othIsArr ? arrayTag : getTag2(other);
        objTag = objTag == argsTag ? objectTag : objTag, othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other))
            return false;
          objIsArr = true, objIsObj = false;
        }
        if (isSameTag && !objIsObj)
          return stack || (stack = new Stack()), objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty5.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty5.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            return stack || (stack = new Stack()), equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        return isSameTag ? (stack || (stack = new Stack()), equalObjects(object, other, bitmask, customizer, equalFunc, stack)) : false;
      }
      module22.exports = baseIsEqualDeep;
    } });
    var require_baseIsEqual2 = __commonJS3({ "../../node_modules/lodash/_baseIsEqual.js"(exports22, module22) {
      "use strict";
      var baseIsEqualDeep = require_baseIsEqualDeep2(), isObjectLike2 = require_isObjectLike2();
      function baseIsEqual(value2, other, bitmask, customizer, stack) {
        return value2 === other ? true : value2 == null || other == null || !isObjectLike2(value2) && !isObjectLike2(other) ? value2 !== value2 && other !== other : baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual, stack);
      }
      module22.exports = baseIsEqual;
    } });
    var require_isEqual = __commonJS3({ "../../node_modules/lodash/isEqual.js"(exports22, module22) {
      "use strict";
      var baseIsEqual = require_baseIsEqual2();
      function isEqual2(value2, other) {
        return baseIsEqual(value2, other);
      }
      module22.exports = isEqual2;
    } });
    var require_iteratorProxy = __commonJS3({ "node_modules/aria-query/lib/util/iteratorProxy.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      function iteratorProxy() {
        var values = this, index = 0, iter = { "@@iterator": function() {
          return iter;
        }, next: function() {
          if (index < values.length) {
            var value2 = values[index];
            return index = index + 1, { done: false, value: value2 };
          } else
            return { done: true };
        } };
        return iter;
      }
      var _default = iteratorProxy;
      exports22.default = _default;
    } });
    var require_iterationDecorator = __commonJS3({ "node_modules/aria-query/lib/util/iterationDecorator.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = iterationDecorator;
      var _iteratorProxy = _interopRequireDefault(require_iteratorProxy());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _typeof5(obj) {
        "@babel/helpers - typeof";
        return _typeof5 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof5(obj);
      }
      function iterationDecorator(collection, entries) {
        return typeof Symbol == "function" && _typeof5(Symbol.iterator) === "symbol" && Object.defineProperty(collection, Symbol.iterator, { value: _iteratorProxy.default.bind(entries) }), collection;
      }
    } });
    var require_ariaPropsMap = __commonJS3({ "node_modules/aria-query/lib/ariaPropsMap.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i != null) {
          var _arr = [], _n = true, _d = false, _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = true)
              ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              !_n && _i.return != null && _i.return();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i = 0, F = function() {
            };
            return { s: F, n: function() {
              return i >= o.length ? { done: true } : { done: false, value: o[i++] };
            }, e: function(_e2) {
              throw _e2;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e3) {
          didErr = true, err = _e3;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      var properties = [["aria-activedescendant", { type: "id" }], ["aria-atomic", { type: "boolean" }], ["aria-autocomplete", { type: "token", values: ["inline", "list", "both", "none"] }], ["aria-busy", { type: "boolean" }], ["aria-checked", { type: "tristate" }], ["aria-colcount", { type: "integer" }], ["aria-colindex", { type: "integer" }], ["aria-colspan", { type: "integer" }], ["aria-controls", { type: "idlist" }], ["aria-current", { type: "token", values: ["page", "step", "location", "date", "time", true, false] }], ["aria-describedby", { type: "idlist" }], ["aria-details", { type: "id" }], ["aria-disabled", { type: "boolean" }], ["aria-dropeffect", { type: "tokenlist", values: ["copy", "execute", "link", "move", "none", "popup"] }], ["aria-errormessage", { type: "id" }], ["aria-expanded", { type: "boolean", allowundefined: true }], ["aria-flowto", { type: "idlist" }], ["aria-grabbed", { type: "boolean", allowundefined: true }], ["aria-haspopup", { type: "token", values: [false, true, "menu", "listbox", "tree", "grid", "dialog"] }], ["aria-hidden", { type: "boolean", allowundefined: true }], ["aria-invalid", { type: "token", values: ["grammar", false, "spelling", true] }], ["aria-keyshortcuts", { type: "string" }], ["aria-label", { type: "string" }], ["aria-labelledby", { type: "idlist" }], ["aria-level", { type: "integer" }], ["aria-live", { type: "token", values: ["assertive", "off", "polite"] }], ["aria-modal", { type: "boolean" }], ["aria-multiline", { type: "boolean" }], ["aria-multiselectable", { type: "boolean" }], ["aria-orientation", { type: "token", values: ["vertical", "undefined", "horizontal"] }], ["aria-owns", { type: "idlist" }], ["aria-placeholder", { type: "string" }], ["aria-posinset", { type: "integer" }], ["aria-pressed", { type: "tristate" }], ["aria-readonly", { type: "boolean" }], ["aria-relevant", { type: "tokenlist", values: ["additions", "all", "removals", "text"] }], ["aria-required", { type: "boolean" }], ["aria-roledescription", { type: "string" }], ["aria-rowcount", { type: "integer" }], ["aria-rowindex", { type: "integer" }], ["aria-rowspan", { type: "integer" }], ["aria-selected", { type: "boolean", allowundefined: true }], ["aria-setsize", { type: "integer" }], ["aria-sort", { type: "token", values: ["ascending", "descending", "none", "other"] }], ["aria-valuemax", { type: "number" }], ["aria-valuemin", { type: "number" }], ["aria-valuenow", { type: "number" }], ["aria-valuetext", { type: "string" }]], ariaPropsMap = { entries: function() {
        return properties;
      }, forEach: function(fn3) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper(properties), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key2 = _step$value[0], values = _step$value[1];
            fn3.call(thisArg, values, key2, properties);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }, get: function(key2) {
        var item = properties.find(function(tuple) {
          return tuple[0] === key2;
        });
        return item && item[1];
      }, has: function(key2) {
        return !!ariaPropsMap.get(key2);
      }, keys: function() {
        return properties.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
          return key2;
        });
      }, values: function() {
        return properties.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      } }, _default = (0, _iterationDecorator.default)(ariaPropsMap, ariaPropsMap.entries());
      exports22.default = _default;
    } });
    var require_domMap = __commonJS3({ "node_modules/aria-query/lib/domMap.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i != null) {
          var _arr = [], _n = true, _d = false, _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = true)
              ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              !_n && _i.return != null && _i.return();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i = 0, F = function() {
            };
            return { s: F, n: function() {
              return i >= o.length ? { done: true } : { done: false, value: o[i++] };
            }, e: function(_e2) {
              throw _e2;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e3) {
          didErr = true, err = _e3;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      var dom = [["a", { reserved: false }], ["abbr", { reserved: false }], ["acronym", { reserved: false }], ["address", { reserved: false }], ["applet", { reserved: false }], ["area", { reserved: false }], ["article", { reserved: false }], ["aside", { reserved: false }], ["audio", { reserved: false }], ["b", { reserved: false }], ["base", { reserved: true }], ["bdi", { reserved: false }], ["bdo", { reserved: false }], ["big", { reserved: false }], ["blink", { reserved: false }], ["blockquote", { reserved: false }], ["body", { reserved: false }], ["br", { reserved: false }], ["button", { reserved: false }], ["canvas", { reserved: false }], ["caption", { reserved: false }], ["center", { reserved: false }], ["cite", { reserved: false }], ["code", { reserved: false }], ["col", { reserved: true }], ["colgroup", { reserved: true }], ["content", { reserved: false }], ["data", { reserved: false }], ["datalist", { reserved: false }], ["dd", { reserved: false }], ["del", { reserved: false }], ["details", { reserved: false }], ["dfn", { reserved: false }], ["dialog", { reserved: false }], ["dir", { reserved: false }], ["div", { reserved: false }], ["dl", { reserved: false }], ["dt", { reserved: false }], ["em", { reserved: false }], ["embed", { reserved: false }], ["fieldset", { reserved: false }], ["figcaption", { reserved: false }], ["figure", { reserved: false }], ["font", { reserved: false }], ["footer", { reserved: false }], ["form", { reserved: false }], ["frame", { reserved: false }], ["frameset", { reserved: false }], ["h1", { reserved: false }], ["h2", { reserved: false }], ["h3", { reserved: false }], ["h4", { reserved: false }], ["h5", { reserved: false }], ["h6", { reserved: false }], ["head", { reserved: true }], ["header", { reserved: false }], ["hgroup", { reserved: false }], ["hr", { reserved: false }], ["html", { reserved: true }], ["i", { reserved: false }], ["iframe", { reserved: false }], ["img", { reserved: false }], ["input", { reserved: false }], ["ins", { reserved: false }], ["kbd", { reserved: false }], ["keygen", { reserved: false }], ["label", { reserved: false }], ["legend", { reserved: false }], ["li", { reserved: false }], ["link", { reserved: true }], ["main", { reserved: false }], ["map", { reserved: false }], ["mark", { reserved: false }], ["marquee", { reserved: false }], ["menu", { reserved: false }], ["menuitem", { reserved: false }], ["meta", { reserved: true }], ["meter", { reserved: false }], ["nav", { reserved: false }], ["noembed", { reserved: true }], ["noscript", { reserved: true }], ["object", { reserved: false }], ["ol", { reserved: false }], ["optgroup", { reserved: false }], ["option", { reserved: false }], ["output", { reserved: false }], ["p", { reserved: false }], ["param", { reserved: true }], ["picture", { reserved: true }], ["pre", { reserved: false }], ["progress", { reserved: false }], ["q", { reserved: false }], ["rp", { reserved: false }], ["rt", { reserved: false }], ["rtc", { reserved: false }], ["ruby", { reserved: false }], ["s", { reserved: false }], ["samp", { reserved: false }], ["script", { reserved: true }], ["section", { reserved: false }], ["select", { reserved: false }], ["small", { reserved: false }], ["source", { reserved: true }], ["spacer", { reserved: false }], ["span", { reserved: false }], ["strike", { reserved: false }], ["strong", { reserved: false }], ["style", { reserved: true }], ["sub", { reserved: false }], ["summary", { reserved: false }], ["sup", { reserved: false }], ["table", { reserved: false }], ["tbody", { reserved: false }], ["td", { reserved: false }], ["textarea", { reserved: false }], ["tfoot", { reserved: false }], ["th", { reserved: false }], ["thead", { reserved: false }], ["time", { reserved: false }], ["title", { reserved: true }], ["tr", { reserved: false }], ["track", { reserved: true }], ["tt", { reserved: false }], ["u", { reserved: false }], ["ul", { reserved: false }], ["var", { reserved: false }], ["video", { reserved: false }], ["wbr", { reserved: false }], ["xmp", { reserved: false }]], domMap = { entries: function() {
        return dom;
      }, forEach: function(fn3) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper(dom), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key2 = _step$value[0], values = _step$value[1];
            fn3.call(thisArg, values, key2, dom);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }, get: function(key2) {
        var item = dom.find(function(tuple) {
          return tuple[0] === key2;
        });
        return item && item[1];
      }, has: function(key2) {
        return !!domMap.get(key2);
      }, keys: function() {
        return dom.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
          return key2;
        });
      }, values: function() {
        return dom.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      } }, _default = (0, _iterationDecorator.default)(domMap, domMap.entries());
      exports22.default = _default;
    } });
    var require_commandRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/commandRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var commandRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default = commandRole;
      exports22.default = _default;
    } });
    var require_compositeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var compositeRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default = compositeRole;
      exports22.default = _default;
    } });
    var require_inputRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/inputRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var inputRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null }, relatedConcepts: [{ concept: { name: "input" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default = inputRole;
      exports22.default = _default;
    } });
    var require_landmarkRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var landmarkRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = landmarkRole;
      exports22.default = _default;
    } });
    var require_rangeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var rangeRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuemax": null, "aria-valuemin": null, "aria-valuenow": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = rangeRole;
      exports22.default = _default;
    } });
    var require_roletypeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var roletypeRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: { "aria-atomic": null, "aria-busy": null, "aria-controls": null, "aria-current": null, "aria-describedby": null, "aria-details": null, "aria-dropeffect": null, "aria-flowto": null, "aria-grabbed": null, "aria-hidden": null, "aria-keyshortcuts": null, "aria-label": null, "aria-labelledby": null, "aria-live": null, "aria-owns": null, "aria-relevant": null, "aria-roledescription": null }, relatedConcepts: [{ concept: { name: "rel" }, module: "HTML" }, { concept: { name: "role" }, module: "XHTML" }, { concept: { name: "type" }, module: "Dublin Core" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default = roletypeRole;
      exports22.default = _default;
    } });
    var require_sectionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var sectionRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "frontmatter" }, module: "DTB" }, { concept: { name: "level" }, module: "DTB" }, { concept: { name: "level" }, module: "SMIL" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = sectionRole;
      exports22.default = _default;
    } });
    var require_sectionheadRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var sectionheadRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = sectionheadRole;
      exports22.default = _default;
    } });
    var require_selectRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/selectRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var selectRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]] }, _default = selectRole;
      exports22.default = _default;
    } });
    var require_structureRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/structureRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var structureRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default = structureRole;
      exports22.default = _default;
    } });
    var require_widgetRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var widgetRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default = widgetRole;
      exports22.default = _default;
    } });
    var require_windowRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var windowRole = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-modal": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default = windowRole;
      exports22.default = _default;
    } });
    var require_ariaAbstractRoles = __commonJS3({ "node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _commandRole = _interopRequireDefault(require_commandRole()), _compositeRole = _interopRequireDefault(require_compositeRole()), _inputRole = _interopRequireDefault(require_inputRole()), _landmarkRole = _interopRequireDefault(require_landmarkRole()), _rangeRole = _interopRequireDefault(require_rangeRole()), _roletypeRole = _interopRequireDefault(require_roletypeRole()), _sectionRole = _interopRequireDefault(require_sectionRole()), _sectionheadRole = _interopRequireDefault(require_sectionheadRole()), _selectRole = _interopRequireDefault(require_selectRole()), _structureRole = _interopRequireDefault(require_structureRole()), _widgetRole = _interopRequireDefault(require_widgetRole()), _windowRole = _interopRequireDefault(require_windowRole());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var ariaAbstractRoles = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]], _default = ariaAbstractRoles;
      exports22.default = _default;
    } });
    var require_alertRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/alertRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var alertRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "assertive" }, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = alertRole;
      exports22.default = _default;
    } });
    var require_alertdialogRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var alertdialogRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]] }, _default = alertdialogRole;
      exports22.default = _default;
    } });
    var require_applicationRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/applicationRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var applicationRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = applicationRole;
      exports22.default = _default;
    } });
    var require_articleRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/articleRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var articleRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "article" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default = articleRole;
      exports22.default = _default;
    } });
    var require_bannerRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/bannerRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var bannerRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["direct descendant of document"], name: "header" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = bannerRole;
      exports22.default = _default;
    } });
    var require_blockquoteRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var blockquoteRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = blockquoteRole;
      exports22.default = _default;
    } });
    var require_buttonRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/buttonRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var buttonRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-pressed": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-pressed" }, { name: "type", value: "checkbox" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "aria-expanded", value: "false" }], name: "summary" }, module: "HTML" }, { concept: { attributes: [{ name: "aria-expanded", value: "true" }], constraints: ["direct descendant of details element with the open attribute defined"], name: "summary" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "button" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "image" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "reset" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "submit" }], name: "input" }, module: "HTML" }, { concept: { name: "button" }, module: "HTML" }, { concept: { name: "trigger" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default = buttonRole;
      exports22.default = _default;
    } });
    var require_captionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/captionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var captionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: ["figure", "grid", "table"], requiredContextRole: ["figure", "grid", "table"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = captionRole;
      exports22.default = _default;
    } });
    var require_cellRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/cellRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var cellRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-colspan": null, "aria-rowindex": null, "aria-rowspan": null }, relatedConcepts: [{ concept: { constraints: ["descendant of table"], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = cellRole;
      exports22.default = _default;
    } });
    var require_checkboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var checkboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "checkbox" }], name: "input" }, module: "HTML" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default = checkboxRole;
      exports22.default = _default;
    } });
    var require_codeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/codeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var codeRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = codeRole;
      exports22.default = _default;
    } });
    var require_columnheaderRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var columnheaderRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ attributes: [{ name: "scope", value: "col" }], concept: { name: "th" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default = columnheaderRole;
      exports22.default = _default;
    } });
    var require_comboboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var comboboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-expanded": "false", "aria-haspopup": "listbox" }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "email" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "search" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "tel" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "text" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "multiple" }, { constraints: ["undefined"], name: "size" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "multiple" }, { name: "size", value: 1 }], name: "select" }, module: "HTML" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-expanded": "false" }, superClass: [["roletype", "widget", "input"]] }, _default = comboboxRole;
      exports22.default = _default;
    } });
    var require_complementaryRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var complementaryRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "aside" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = complementaryRole;
      exports22.default = _default;
    } });
    var require_contentinfoRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var contentinfoRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["direct descendant of document"], name: "footer" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = contentinfoRole;
      exports22.default = _default;
    } });
    var require_definitionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/definitionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var definitionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dd" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = definitionRole;
      exports22.default = _default;
    } });
    var require_deletionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/deletionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var deletionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = deletionRole;
      exports22.default = _default;
    } });
    var require_dialogRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/dialogRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var dialogRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dialog" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "window"]] }, _default = dialogRole;
      exports22.default = _default;
    } });
    var require_directoryRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/directoryRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var directoryRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ module: "DAISY Guide" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default = directoryRole;
      exports22.default = _default;
    } });
    var require_documentRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/documentRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var documentRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }, { concept: { name: "body" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = documentRole;
      exports22.default = _default;
    } });
    var require_emphasisRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var emphasisRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = emphasisRole;
      exports22.default = _default;
    } });
    var require_feedRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/feedRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var feedRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["article"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default = feedRole;
      exports22.default = _default;
    } });
    var require_figureRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/figureRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var figureRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "figure" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = figureRole;
      exports22.default = _default;
    } });
    var require_formRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/formRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var formRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "name" }], name: "form" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = formRole;
      exports22.default = _default;
    } });
    var require_genericRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/genericRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var genericRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "span" }, module: "HTML" }, { concept: { name: "div" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = genericRole;
      exports22.default = _default;
    } });
    var require_gridRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/gridRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var gridRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-multiselectable": null, "aria-readonly": null }, relatedConcepts: [{ concept: { attributes: [{ name: "role", value: "grid" }], name: "table" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]] }, _default = gridRole;
      exports22.default = _default;
    } });
    var require_gridcellRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var gridcellRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-selected": null }, relatedConcepts: [{ concept: { attributes: [{ name: "role", value: "gridcell" }], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]] }, _default = gridcellRole;
      exports22.default = _default;
    } });
    var require_groupRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/groupRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var groupRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [{ concept: { name: "details" }, module: "HTML" }, { concept: { name: "fieldset" }, module: "HTML" }, { concept: { name: "optgroup" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = groupRole;
      exports22.default = _default;
    } });
    var require_headingRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/headingRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var headingRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-level": "2" }, relatedConcepts: [{ concept: { name: "h1" }, module: "HTML" }, { concept: { name: "h2" }, module: "HTML" }, { concept: { name: "h3" }, module: "HTML" }, { concept: { name: "h4" }, module: "HTML" }, { concept: { name: "h5" }, module: "HTML" }, { concept: { name: "h6" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-level": "2" }, superClass: [["roletype", "structure", "sectionhead"]] }, _default = headingRole;
      exports22.default = _default;
    } });
    var require_imgRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/imgRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var imgRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { name: "imggroup" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = imgRole;
      exports22.default = _default;
    } });
    var require_insertionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/insertionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var insertionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = insertionRole;
      exports22.default = _default;
    } });
    var require_linkRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/linkRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var linkRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [{ concept: { attributes: [{ name: "href" }], name: "a" }, module: "HTML" }, { concept: { attributes: [{ name: "href" }], name: "area" }, module: "HTML" }, { concept: { attributes: [{ name: "href" }], name: "link" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default = linkRole;
      exports22.default = _default;
    } });
    var require_listRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/listRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var listRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menu" }, module: "HTML" }, { concept: { name: "ol" }, module: "HTML" }, { concept: { name: "ul" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["listitem"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = listRole;
      exports22.default = _default;
    } });
    var require_listboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/listboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var listboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-multiselectable": null, "aria-readonly": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { attributes: [{ constraints: [">1"], name: "size" }, { name: "multiple" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ constraints: [">1"], name: "size" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ name: "multiple" }], name: "select" }, module: "HTML" }, { concept: { name: "datalist" }, module: "HTML" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["option", "group"], ["option"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default = listboxRole;
      exports22.default = _default;
    } });
    var require_listitemRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/listitemRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var listitemRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { constraints: ["direct descendant of ol, ul or menu"], name: "li" }, module: "HTML" }, { concept: { name: "item" }, module: "XForms" }], requireContextRole: ["directory", "list"], requiredContextRole: ["directory", "list"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = listitemRole;
      exports22.default = _default;
    } });
    var require_logRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/logRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var logRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-live": "polite" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = logRole;
      exports22.default = _default;
    } });
    var require_mainRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/mainRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var mainRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "main" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = mainRole;
      exports22.default = _default;
    } });
    var require_marqueeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var marqueeRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = marqueeRole;
      exports22.default = _default;
    } });
    var require_mathRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/mathRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var mathRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "math" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = mathRole;
      exports22.default = _default;
    } });
    var require_menuRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/menuRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var menuRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { name: "MENU" }, module: "JAPI" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }, { concept: { name: "sidebar" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default = menuRole;
      exports22.default = _default;
    } });
    var require_menubarRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/menubarRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var menubarRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "toolbar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]] }, _default = menubarRole;
      exports22.default = _default;
    } });
    var require_menuitemRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var menuitemRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "MENU_ITEM" }, module: "JAPI" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "menuitem" }, module: "HTML" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default = menuitemRole;
      exports22.default = _default;
    } });
    var require_menuitemcheckboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var menuitemcheckboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]] }, _default = menuitemcheckboxRole;
      exports22.default = _default;
    } });
    var require_menuitemradioRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var menuitemradioRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]] }, _default = menuitemradioRole;
      exports22.default = _default;
    } });
    var require_meterRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/meterRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var meterRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null, "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "structure", "range"]] }, _default = meterRole;
      exports22.default = _default;
    } });
    var require_navigationRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/navigationRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var navigationRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "nav" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = navigationRole;
      exports22.default = _default;
    } });
    var require_noneRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/noneRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var noneRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default = noneRole;
      exports22.default = _default;
    } });
    var require_noteRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/noteRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var noteRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = noteRole;
      exports22.default = _default;
    } });
    var require_optionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/optionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var optionRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [{ concept: { name: "item" }, module: "XForms" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "option" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-selected": "false" }, superClass: [["roletype", "widget", "input"]] }, _default = optionRole;
      exports22.default = _default;
    } });
    var require_paragraphRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var paragraphRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = paragraphRole;
      exports22.default = _default;
    } });
    var require_presentationRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/presentationRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var presentationRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = presentationRole;
      exports22.default = _default;
    } });
    var require_progressbarRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var progressbarRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "progress" }, module: "HTML" }, { concept: { name: "status" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default = progressbarRole;
      exports22.default = _default;
    } });
    var require_radioRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/radioRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var radioRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "radio" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default = radioRole;
      exports22.default = _default;
    } });
    var require_radiogroupRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var radiogroupRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { name: "list" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["radio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default = radiogroupRole;
      exports22.default = _default;
    } });
    var require_regionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/regionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var regionRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "section" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "section" }, module: "HTML" }, { concept: { name: "Device Independence Glossart perceivable unit" } }, { concept: { name: "frame" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = regionRole;
      exports22.default = _default;
    } });
    var require_rowRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/rowRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var rowRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-expanded": null, "aria-level": null, "aria-posinset": null, "aria-rowindex": null, "aria-selected": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "tr" }, module: "HTML" }], requireContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]] }, _default = rowRole;
      exports22.default = _default;
    } });
    var require_rowgroupRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var rowgroupRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "tbody" }, module: "HTML" }, { concept: { name: "tfoot" }, module: "HTML" }, { concept: { name: "thead" }, module: "HTML" }], requireContextRole: ["grid", "table", "treegrid"], requiredContextRole: ["grid", "table", "treegrid"], requiredOwnedElements: [["row"]], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = rowgroupRole;
      exports22.default = _default;
    } });
    var require_rowheaderRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var rowheaderRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ concept: { attributes: [{ name: "scope", value: "row" }], name: "th" }, module: "HTML" }, { concept: { attributes: [{ name: "scope", value: "rowgroup" }], name: "th" }, module: "HTML" }], requireContextRole: ["row", "rowgroup"], requiredContextRole: ["row", "rowgroup"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default = rowheaderRole;
      exports22.default = _default;
    } });
    var require_scrollbarRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var scrollbarRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-valuetext": null, "aria-orientation": "vertical", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-valuenow": null }, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default = scrollbarRole;
      exports22.default = _default;
    } });
    var require_searchRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/searchRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var searchRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = searchRole;
      exports22.default = _default;
    } });
    var require_searchboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var searchboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "search" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input", "textbox"]] }, _default = searchboxRole;
      exports22.default = _default;
    } });
    var require_separatorRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/separatorRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var separatorRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0", "aria-valuenow": null, "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "hr" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default = separatorRole;
      exports22.default = _default;
    } });
    var require_sliderRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/sliderRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var sliderRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-valuetext": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "range" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default = sliderRole;
      exports22.default = _default;
    } });
    var require_spinbuttonRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var spinbuttonRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-valuetext": null, "aria-valuenow": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "number" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default = spinbuttonRole;
      exports22.default = _default;
    } });
    var require_statusRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/statusRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var statusRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "polite" }, relatedConcepts: [{ concept: { name: "output" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = statusRole;
      exports22.default = _default;
    } });
    var require_strongRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/strongRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var strongRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = strongRole;
      exports22.default = _default;
    } });
    var require_subscriptRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var subscriptRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = subscriptRole;
      exports22.default = _default;
    } });
    var require_superscriptRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var superscriptRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = superscriptRole;
      exports22.default = _default;
    } });
    var require_switchRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/switchRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var switchRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "button" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"]] }, _default = switchRole;
      exports22.default = _default;
    } });
    var require_tabRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/tabRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var tabRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [], requireContextRole: ["tablist"], requiredContextRole: ["tablist"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]] }, _default = tabRole;
      exports22.default = _default;
    } });
    var require_tableRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/tableRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var tableRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-colcount": null, "aria-rowcount": null }, relatedConcepts: [{ concept: { name: "table" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = tableRole;
      exports22.default = _default;
    } });
    var require_tablistRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/tablistRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var tablistRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-multiselectable": null, "aria-orientation": "horizontal" }, relatedConcepts: [{ module: "DAISY", concept: { name: "guide" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["tab"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"]] }, _default = tablistRole;
      exports22.default = _default;
    } });
    var require_tabpanelRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var tabpanelRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = tabpanelRole;
      exports22.default = _default;
    } });
    var require_termRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/termRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var termRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dfn" }, module: "HTML" }, { concept: { name: "dt" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = termRole;
      exports22.default = _default;
    } });
    var require_textboxRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/textboxRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var textboxRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-multiline": null, "aria-placeholder": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "type" }, { constraints: ["undefined"], name: "list" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "email" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "tel" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "text" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { name: "input" }, module: "XForms" }, { concept: { name: "textarea" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input"]] }, _default = textboxRole;
      exports22.default = _default;
    } });
    var require_timeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/timeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var timeRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = timeRole;
      exports22.default = _default;
    } });
    var require_timerRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/timerRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var timerRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "status"]] }, _default = timerRole;
      exports22.default = _default;
    } });
    var require_toolbarRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var toolbarRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "menubar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default = toolbarRole;
      exports22.default = _default;
    } });
    var require_tooltipRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var tooltipRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = tooltipRole;
      exports22.default = _default;
    } });
    var require_treeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/treeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var treeRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-multiselectable": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["treeitem", "group"], ["treeitem"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default = treeRole;
      exports22.default = _default;
    } });
    var require_treegridRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/treegridRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var treegridRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]] }, _default = treegridRole;
      exports22.default = _default;
    } });
    var require_treeitemRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var treeitemRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [], requireContextRole: ["group", "tree"], requiredContextRole: ["group", "tree"], requiredOwnedElements: [], requiredProps: { "aria-selected": null }, superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]] }, _default = treeitemRole;
      exports22.default = _default;
    } });
    var require_ariaLiteralRoles = __commonJS3({ "node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _alertRole = _interopRequireDefault(require_alertRole()), _alertdialogRole = _interopRequireDefault(require_alertdialogRole()), _applicationRole = _interopRequireDefault(require_applicationRole()), _articleRole = _interopRequireDefault(require_articleRole()), _bannerRole = _interopRequireDefault(require_bannerRole()), _blockquoteRole = _interopRequireDefault(require_blockquoteRole()), _buttonRole = _interopRequireDefault(require_buttonRole()), _captionRole = _interopRequireDefault(require_captionRole()), _cellRole = _interopRequireDefault(require_cellRole()), _checkboxRole = _interopRequireDefault(require_checkboxRole()), _codeRole = _interopRequireDefault(require_codeRole()), _columnheaderRole = _interopRequireDefault(require_columnheaderRole()), _comboboxRole = _interopRequireDefault(require_comboboxRole()), _complementaryRole = _interopRequireDefault(require_complementaryRole()), _contentinfoRole = _interopRequireDefault(require_contentinfoRole()), _definitionRole = _interopRequireDefault(require_definitionRole()), _deletionRole = _interopRequireDefault(require_deletionRole()), _dialogRole = _interopRequireDefault(require_dialogRole()), _directoryRole = _interopRequireDefault(require_directoryRole()), _documentRole = _interopRequireDefault(require_documentRole()), _emphasisRole = _interopRequireDefault(require_emphasisRole()), _feedRole = _interopRequireDefault(require_feedRole()), _figureRole = _interopRequireDefault(require_figureRole()), _formRole = _interopRequireDefault(require_formRole()), _genericRole = _interopRequireDefault(require_genericRole()), _gridRole = _interopRequireDefault(require_gridRole()), _gridcellRole = _interopRequireDefault(require_gridcellRole()), _groupRole = _interopRequireDefault(require_groupRole()), _headingRole = _interopRequireDefault(require_headingRole()), _imgRole = _interopRequireDefault(require_imgRole()), _insertionRole = _interopRequireDefault(require_insertionRole()), _linkRole = _interopRequireDefault(require_linkRole()), _listRole = _interopRequireDefault(require_listRole()), _listboxRole = _interopRequireDefault(require_listboxRole()), _listitemRole = _interopRequireDefault(require_listitemRole()), _logRole = _interopRequireDefault(require_logRole()), _mainRole = _interopRequireDefault(require_mainRole()), _marqueeRole = _interopRequireDefault(require_marqueeRole()), _mathRole = _interopRequireDefault(require_mathRole()), _menuRole = _interopRequireDefault(require_menuRole()), _menubarRole = _interopRequireDefault(require_menubarRole()), _menuitemRole = _interopRequireDefault(require_menuitemRole()), _menuitemcheckboxRole = _interopRequireDefault(require_menuitemcheckboxRole()), _menuitemradioRole = _interopRequireDefault(require_menuitemradioRole()), _meterRole = _interopRequireDefault(require_meterRole()), _navigationRole = _interopRequireDefault(require_navigationRole()), _noneRole = _interopRequireDefault(require_noneRole()), _noteRole = _interopRequireDefault(require_noteRole()), _optionRole = _interopRequireDefault(require_optionRole()), _paragraphRole = _interopRequireDefault(require_paragraphRole()), _presentationRole = _interopRequireDefault(require_presentationRole()), _progressbarRole = _interopRequireDefault(require_progressbarRole()), _radioRole = _interopRequireDefault(require_radioRole()), _radiogroupRole = _interopRequireDefault(require_radiogroupRole()), _regionRole = _interopRequireDefault(require_regionRole()), _rowRole = _interopRequireDefault(require_rowRole()), _rowgroupRole = _interopRequireDefault(require_rowgroupRole()), _rowheaderRole = _interopRequireDefault(require_rowheaderRole()), _scrollbarRole = _interopRequireDefault(require_scrollbarRole()), _searchRole = _interopRequireDefault(require_searchRole()), _searchboxRole = _interopRequireDefault(require_searchboxRole()), _separatorRole = _interopRequireDefault(require_separatorRole()), _sliderRole = _interopRequireDefault(require_sliderRole()), _spinbuttonRole = _interopRequireDefault(require_spinbuttonRole()), _statusRole = _interopRequireDefault(require_statusRole()), _strongRole = _interopRequireDefault(require_strongRole()), _subscriptRole = _interopRequireDefault(require_subscriptRole()), _superscriptRole = _interopRequireDefault(require_superscriptRole()), _switchRole = _interopRequireDefault(require_switchRole()), _tabRole = _interopRequireDefault(require_tabRole()), _tableRole = _interopRequireDefault(require_tableRole()), _tablistRole = _interopRequireDefault(require_tablistRole()), _tabpanelRole = _interopRequireDefault(require_tabpanelRole()), _termRole = _interopRequireDefault(require_termRole()), _textboxRole = _interopRequireDefault(require_textboxRole()), _timeRole = _interopRequireDefault(require_timeRole()), _timerRole = _interopRequireDefault(require_timerRole()), _toolbarRole = _interopRequireDefault(require_toolbarRole()), _tooltipRole = _interopRequireDefault(require_tooltipRole()), _treeRole = _interopRequireDefault(require_treeRole()), _treegridRole = _interopRequireDefault(require_treegridRole()), _treeitemRole = _interopRequireDefault(require_treeitemRole());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var ariaLiteralRoles = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]], _default = ariaLiteralRoles;
      exports22.default = _default;
    } });
    var require_docAbstractRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docAbstractRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "abstract [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docAbstractRole;
      exports22.default = _default;
    } });
    var require_docAcknowledgmentsRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docAcknowledgmentsRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "acknowledgments [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docAcknowledgmentsRole;
      exports22.default = _default;
    } });
    var require_docAfterwordRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docAfterwordRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "afterword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docAfterwordRole;
      exports22.default = _default;
    } });
    var require_docAppendixRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docAppendixRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "appendix [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docAppendixRole;
      exports22.default = _default;
    } });
    var require_docBacklinkRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docBacklinkRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "content"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "referrer [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default = docBacklinkRole;
      exports22.default = _default;
    } });
    var require_docBiblioentryRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docBiblioentryRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "EPUB biblioentry [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-bibliography"], requiredContextRole: ["doc-bibliography"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default = docBiblioentryRole;
      exports22.default = _default;
    } });
    var require_docBibliographyRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docBibliographyRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "bibliography [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-biblioentry"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docBibliographyRole;
      exports22.default = _default;
    } });
    var require_docBibliorefRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docBibliorefRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "biblioref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default = docBibliorefRole;
      exports22.default = _default;
    } });
    var require_docChapterRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docChapterRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "chapter [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docChapterRole;
      exports22.default = _default;
    } });
    var require_docColophonRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docColophonRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "colophon [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docColophonRole;
      exports22.default = _default;
    } });
    var require_docConclusionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docConclusionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "conclusion [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docConclusionRole;
      exports22.default = _default;
    } });
    var require_docCoverRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docCoverRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "cover [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default = docCoverRole;
      exports22.default = _default;
    } });
    var require_docCreditRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docCreditRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credit [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docCreditRole;
      exports22.default = _default;
    } });
    var require_docCreditsRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docCreditsRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credits [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docCreditsRole;
      exports22.default = _default;
    } });
    var require_docDedicationRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docDedicationRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "dedication [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docDedicationRole;
      exports22.default = _default;
    } });
    var require_docEndnoteRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docEndnoteRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-endnotes"], requiredContextRole: ["doc-endnotes"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default = docEndnoteRole;
      exports22.default = _default;
    } });
    var require_docEndnotesRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docEndnotesRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnotes [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-endnote"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docEndnotesRole;
      exports22.default = _default;
    } });
    var require_docEpigraphRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docEpigraphRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epigraph [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docEpigraphRole;
      exports22.default = _default;
    } });
    var require_docEpilogueRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docEpilogueRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epilogue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docEpilogueRole;
      exports22.default = _default;
    } });
    var require_docErrataRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docErrataRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "errata [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docErrataRole;
      exports22.default = _default;
    } });
    var require_docExampleRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docExampleRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docExampleRole;
      exports22.default = _default;
    } });
    var require_docFootnoteRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docFootnoteRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "footnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docFootnoteRole;
      exports22.default = _default;
    } });
    var require_docForewordRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docForewordRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "foreword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docForewordRole;
      exports22.default = _default;
    } });
    var require_docGlossaryRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docGlossaryRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossary [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["definition"], ["term"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docGlossaryRole;
      exports22.default = _default;
    } });
    var require_docGlossrefRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docGlossrefRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default = docGlossrefRole;
      exports22.default = _default;
    } });
    var require_docIndexRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docIndexRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "index [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default = docIndexRole;
      exports22.default = _default;
    } });
    var require_docIntroductionRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docIntroductionRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "introduction [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docIntroductionRole;
      exports22.default = _default;
    } });
    var require_docNoterefRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docNoterefRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "noteref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default = docNoterefRole;
      exports22.default = _default;
    } });
    var require_docNoticeRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docNoticeRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "notice [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default = docNoticeRole;
      exports22.default = _default;
    } });
    var require_docPagebreakRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPagebreakRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "pagebreak [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "separator"]] }, _default = docPagebreakRole;
      exports22.default = _default;
    } });
    var require_docPagelistRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPagelistRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "page-list [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default = docPagelistRole;
      exports22.default = _default;
    } });
    var require_docPartRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPartRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "part [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docPartRole;
      exports22.default = _default;
    } });
    var require_docPrefaceRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPrefaceRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "preface [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docPrefaceRole;
      exports22.default = _default;
    } });
    var require_docPrologueRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPrologueRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "prologue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default = docPrologueRole;
      exports22.default = _default;
    } });
    var require_docPullquoteRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docPullquoteRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "pullquote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["none"]] }, _default = docPullquoteRole;
      exports22.default = _default;
    } });
    var require_docQnaRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docQnaRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "qna [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default = docQnaRole;
      exports22.default = _default;
    } });
    var require_docSubtitleRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docSubtitleRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "subtitle [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"]] }, _default = docSubtitleRole;
      exports22.default = _default;
    } });
    var require_docTipRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docTipRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "help [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default = docTipRole;
      exports22.default = _default;
    } });
    var require_docTocRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var docTocRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "toc [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default = docTocRole;
      exports22.default = _default;
    } });
    var require_ariaDpubRoles = __commonJS3({ "node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _docAbstractRole = _interopRequireDefault(require_docAbstractRole()), _docAcknowledgmentsRole = _interopRequireDefault(require_docAcknowledgmentsRole()), _docAfterwordRole = _interopRequireDefault(require_docAfterwordRole()), _docAppendixRole = _interopRequireDefault(require_docAppendixRole()), _docBacklinkRole = _interopRequireDefault(require_docBacklinkRole()), _docBiblioentryRole = _interopRequireDefault(require_docBiblioentryRole()), _docBibliographyRole = _interopRequireDefault(require_docBibliographyRole()), _docBibliorefRole = _interopRequireDefault(require_docBibliorefRole()), _docChapterRole = _interopRequireDefault(require_docChapterRole()), _docColophonRole = _interopRequireDefault(require_docColophonRole()), _docConclusionRole = _interopRequireDefault(require_docConclusionRole()), _docCoverRole = _interopRequireDefault(require_docCoverRole()), _docCreditRole = _interopRequireDefault(require_docCreditRole()), _docCreditsRole = _interopRequireDefault(require_docCreditsRole()), _docDedicationRole = _interopRequireDefault(require_docDedicationRole()), _docEndnoteRole = _interopRequireDefault(require_docEndnoteRole()), _docEndnotesRole = _interopRequireDefault(require_docEndnotesRole()), _docEpigraphRole = _interopRequireDefault(require_docEpigraphRole()), _docEpilogueRole = _interopRequireDefault(require_docEpilogueRole()), _docErrataRole = _interopRequireDefault(require_docErrataRole()), _docExampleRole = _interopRequireDefault(require_docExampleRole()), _docFootnoteRole = _interopRequireDefault(require_docFootnoteRole()), _docForewordRole = _interopRequireDefault(require_docForewordRole()), _docGlossaryRole = _interopRequireDefault(require_docGlossaryRole()), _docGlossrefRole = _interopRequireDefault(require_docGlossrefRole()), _docIndexRole = _interopRequireDefault(require_docIndexRole()), _docIntroductionRole = _interopRequireDefault(require_docIntroductionRole()), _docNoterefRole = _interopRequireDefault(require_docNoterefRole()), _docNoticeRole = _interopRequireDefault(require_docNoticeRole()), _docPagebreakRole = _interopRequireDefault(require_docPagebreakRole()), _docPagelistRole = _interopRequireDefault(require_docPagelistRole()), _docPartRole = _interopRequireDefault(require_docPartRole()), _docPrefaceRole = _interopRequireDefault(require_docPrefaceRole()), _docPrologueRole = _interopRequireDefault(require_docPrologueRole()), _docPullquoteRole = _interopRequireDefault(require_docPullquoteRole()), _docQnaRole = _interopRequireDefault(require_docQnaRole()), _docSubtitleRole = _interopRequireDefault(require_docSubtitleRole()), _docTipRole = _interopRequireDefault(require_docTipRole()), _docTocRole = _interopRequireDefault(require_docTocRole());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var ariaDpubRoles = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]], _default = ariaDpubRoles;
      exports22.default = _default;
    } });
    var require_graphicsDocumentRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var graphicsDocumentRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-object" } }, { module: "ARIA", concept: { name: "img" } }, { module: "ARIA", concept: { name: "article" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default = graphicsDocumentRole;
      exports22.default = _default;
    } });
    var require_graphicsObjectRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var graphicsObjectRole = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-document" } }, { module: "ARIA", concept: { name: "group" } }, { module: "ARIA", concept: { name: "img" } }, { module: "GRAPHICS", concept: { name: "graphics-symbol" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default = graphicsObjectRole;
      exports22.default = _default;
    } });
    var require_graphicsSymbolRole = __commonJS3({ "node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var graphicsSymbolRole = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default = graphicsSymbolRole;
      exports22.default = _default;
    } });
    var require_ariaGraphicsRoles = __commonJS3({ "node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _graphicsDocumentRole = _interopRequireDefault(require_graphicsDocumentRole()), _graphicsObjectRole = _interopRequireDefault(require_graphicsObjectRole()), _graphicsSymbolRole = _interopRequireDefault(require_graphicsSymbolRole());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var ariaGraphicsRoles = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]], _default = ariaGraphicsRoles;
      exports22.default = _default;
    } });
    var require_rolesMap = __commonJS3({ "node_modules/aria-query/lib/rolesMap.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _ariaAbstractRoles = _interopRequireDefault(require_ariaAbstractRoles()), _ariaLiteralRoles = _interopRequireDefault(require_ariaLiteralRoles()), _ariaDpubRoles = _interopRequireDefault(require_ariaDpubRoles()), _ariaGraphicsRoles = _interopRequireDefault(require_ariaGraphicsRoles()), _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _defineProperty5(obj, key2, value2) {
        return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i = 0, F = function() {
            };
            return { s: F, n: function() {
              return i >= o.length ? { done: true } : { done: false, value: o[i++] };
            }, e: function(_e2) {
              throw _e2;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e3) {
          didErr = true, err = _e3;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i != null) {
          var _arr = [], _n = true, _d = false, _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = true)
              ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              !_n && _i.return != null && _i.return();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      var roles3 = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
      roles3.forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), roleDefinition = _ref2[1], _iterator = _createForOfIteratorHelper(roleDefinition.superClass), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var superClassIter = _step.value, _iterator2 = _createForOfIteratorHelper(superClassIter), _step2;
            try {
              var _loop = function() {
                var superClassName = _step2.value, superClassRoleTuple = roles3.find(function(_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 1), name2 = _ref4[0];
                  return name2 === superClassName;
                });
                if (superClassRoleTuple)
                  for (var superClassDefinition = superClassRoleTuple[1], _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
                    var prop = _Object$keys[_i2];
                    Object.prototype.hasOwnProperty.call(roleDefinition.props, prop) || Object.assign(roleDefinition.props, _defineProperty5({}, prop, superClassDefinition.props[prop]));
                  }
              };
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; )
                _loop();
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      var rolesMap = { entries: function() {
        return roles3;
      }, forEach: function(fn3) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator3 = _createForOfIteratorHelper(roles3), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _step3$value = _slicedToArray(_step3.value, 2), key2 = _step3$value[0], values = _step3$value[1];
            fn3.call(thisArg, values, key2, roles3);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }, get: function(key2) {
        var item = roles3.find(function(tuple) {
          return tuple[0] === key2;
        });
        return item && item[1];
      }, has: function(key2) {
        return !!rolesMap.get(key2);
      }, keys: function() {
        return roles3.map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 1), key2 = _ref6[0];
          return key2;
        });
      }, values: function() {
        return roles3.map(function(_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2), values2 = _ref8[1];
          return values2;
        });
      } }, _default = (0, _iterationDecorator.default)(rolesMap, rolesMap.entries());
      exports22.default = _default;
    } });
    var require_isArguments22 = __commonJS3({ "../../node_modules/object-keys/isArguments.js"(exports22, module22) {
      "use strict";
      var toStr3 = Object.prototype.toString;
      module22.exports = function(value2) {
        var str = toStr3.call(value2), isArgs = str === "[object Arguments]";
        return isArgs || (isArgs = str !== "[object Array]" && value2 !== null && typeof value2 == "object" && typeof value2.length == "number" && value2.length >= 0 && toStr3.call(value2.callee) === "[object Function]"), isArgs;
      };
    } });
    var require_implementation3 = __commonJS3({ "../../node_modules/object-keys/implementation.js"(exports22, module22) {
      "use strict";
      var keysShim;
      Object.keys || (has2 = Object.prototype.hasOwnProperty, toStr3 = Object.prototype.toString, isArgs = require_isArguments22(), isEnumerable = Object.prototype.propertyIsEnumerable, hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString"), hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype"), dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      }, excludedKeys = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, hasAutomationEqualityBug = function() {
        if (typeof window > "u")
          return false;
        for (var k in window)
          try {
            if (!excludedKeys["$" + k] && has2.call(window, k) && window[k] !== null && typeof window[k] == "object")
              try {
                equalsConstructorPrototype(window[k]);
              } catch {
                return true;
              }
          } catch {
            return true;
          }
        return false;
      }(), equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window > "u" || !hasAutomationEqualityBug)
          return equalsConstructorPrototype(o);
        try {
          return equalsConstructorPrototype(o);
        } catch {
          return false;
        }
      }, keysShim = function(object) {
        var isObject22 = object !== null && typeof object == "object", isFunction2 = toStr3.call(object) === "[object Function]", isArguments = isArgs(object), isString = isObject22 && toStr3.call(object) === "[object String]", theKeys = [];
        if (!isObject22 && !isFunction2 && !isArguments)
          throw new TypeError("Object.keys called on a non-object");
        var skipProto = hasProtoEnumBug && isFunction2;
        if (isString && object.length > 0 && !has2.call(object, 0))
          for (var i = 0; i < object.length; ++i)
            theKeys.push(String(i));
        if (isArguments && object.length > 0)
          for (var j = 0; j < object.length; ++j)
            theKeys.push(String(j));
        else
          for (var name2 in object)
            !(skipProto && name2 === "prototype") && has2.call(object, name2) && theKeys.push(String(name2));
        if (hasDontEnumBug)
          for (var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object), k = 0; k < dontEnums.length; ++k)
            !(skipConstructor && dontEnums[k] === "constructor") && has2.call(object, dontEnums[k]) && theKeys.push(dontEnums[k]);
        return theKeys;
      });
      var has2, toStr3, isArgs, isEnumerable, hasDontEnumBug, hasProtoEnumBug, dontEnums, equalsConstructorPrototype, excludedKeys, hasAutomationEqualityBug, equalsConstructorPrototypeIfNotBuggy;
      module22.exports = keysShim;
    } });
    var require_object_keys = __commonJS3({ "../../node_modules/object-keys/index.js"(exports22, module22) {
      "use strict";
      var slice = Array.prototype.slice, isArgs = require_isArguments22(), origKeys = Object.keys, keysShim = origKeys ? function(o) {
        return origKeys(o);
      } : require_implementation3(), originalKeys = Object.keys;
      keysShim.shim = function() {
        if (Object.keys) {
          var keysWorksWithArguments = function() {
            var args2 = Object.keys(arguments);
            return args2 && args2.length === arguments.length;
          }(1, 2);
          keysWorksWithArguments || (Object.keys = function(object) {
            return isArgs(object) ? originalKeys(slice.call(object)) : originalKeys(object);
          });
        } else
          Object.keys = keysShim;
        return Object.keys || keysShim;
      };
      module22.exports = keysShim;
    } });
    var require_es_errors2 = __commonJS3({ "../../node_modules/es-errors/index.js"(exports22, module22) {
      "use strict";
      module22.exports = Error;
    } });
    var require_eval2 = __commonJS3({ "../../node_modules/es-errors/eval.js"(exports22, module22) {
      "use strict";
      module22.exports = EvalError;
    } });
    var require_range2 = __commonJS3({ "../../node_modules/es-errors/range.js"(exports22, module22) {
      "use strict";
      module22.exports = RangeError;
    } });
    var require_ref2 = __commonJS3({ "../../node_modules/es-errors/ref.js"(exports22, module22) {
      "use strict";
      module22.exports = ReferenceError;
    } });
    var require_syntax2 = __commonJS3({ "../../node_modules/es-errors/syntax.js"(exports22, module22) {
      "use strict";
      module22.exports = SyntaxError;
    } });
    var require_type2 = __commonJS3({ "../../node_modules/es-errors/type.js"(exports22, module22) {
      "use strict";
      module22.exports = TypeError;
    } });
    var require_uri2 = __commonJS3({ "../../node_modules/es-errors/uri.js"(exports22, module22) {
      "use strict";
      module22.exports = URIError;
    } });
    var require_shams4 = __commonJS3({ "../../node_modules/has-symbols/shams.js"(exports22, module22) {
      "use strict";
      module22.exports = function() {
        if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
          return false;
        if (typeof Symbol.iterator == "symbol")
          return true;
        var obj = {}, sym = Symbol("test"), symObj = Object(sym);
        if (typeof sym == "string" || Object.prototype.toString.call(sym) !== "[object Symbol]" || Object.prototype.toString.call(symObj) !== "[object Symbol]")
          return false;
        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj)
          return false;
        if (typeof Object.keys == "function" && Object.keys(obj).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(obj).length !== 0)
          return false;
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym || !Object.prototype.propertyIsEnumerable.call(obj, sym))
          return false;
        if (typeof Object.getOwnPropertyDescriptor == "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true)
            return false;
        }
        return true;
      };
    } });
    var require_has_symbols3 = __commonJS3({ "../../node_modules/has-symbols/index.js"(exports22, module22) {
      "use strict";
      var origSymbol = typeof Symbol < "u" && Symbol, hasSymbolSham = require_shams4();
      module22.exports = function() {
        return typeof origSymbol != "function" || typeof Symbol != "function" || typeof origSymbol("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? false : hasSymbolSham();
      };
    } });
    var require_has_proto2 = __commonJS3({ "../../node_modules/has-proto/index.js"(exports22, module22) {
      "use strict";
      var test = { __proto__: null, foo: {} }, $Object = Object;
      module22.exports = function() {
        return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
      };
    } });
    var require_implementation22 = __commonJS3({ "../../node_modules/function-bind/implementation.js"(exports22, module22) {
      "use strict";
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ", toStr3 = Object.prototype.toString, max = Math.max, funcType = "[object Function]", concatty = function(a, b2) {
        for (var arr = [], i = 0; i < a.length; i += 1)
          arr[i] = a[i];
        for (var j = 0; j < b2.length; j += 1)
          arr[j + a.length] = b2[j];
        return arr;
      }, slicy = function(arrLike, offset) {
        for (var arr = [], i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1)
          arr[j] = arrLike[i];
        return arr;
      }, joiny = function(arr, joiner) {
        for (var str = "", i = 0; i < arr.length; i += 1)
          str += arr[i], i + 1 < arr.length && (str += joiner);
        return str;
      };
      module22.exports = function(that) {
        var target = this;
        if (typeof target != "function" || toStr3.apply(target) !== funcType)
          throw new TypeError(ERROR_MESSAGE + target);
        for (var args2 = slicy(arguments, 1), bound, binder = function() {
          if (this instanceof bound) {
            var result2 = target.apply(this, concatty(args2, arguments));
            return Object(result2) === result2 ? result2 : this;
          }
          return target.apply(that, concatty(args2, arguments));
        }, boundLength = max(0, target.length - args2.length), boundArgs = [], i = 0; i < boundLength; i++)
          boundArgs[i] = "$" + i;
        if (bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder), target.prototype) {
          var Empty = function() {
          };
          Empty.prototype = target.prototype, bound.prototype = new Empty(), Empty.prototype = null;
        }
        return bound;
      };
    } });
    var require_function_bind3 = __commonJS3({ "../../node_modules/function-bind/index.js"(exports22, module22) {
      "use strict";
      var implementation = require_implementation22();
      module22.exports = Function.prototype.bind || implementation;
    } });
    var require_hasown2 = __commonJS3({ "../../node_modules/hasown/index.js"(exports22, module22) {
      "use strict";
      var call = Function.prototype.call, $hasOwn = Object.prototype.hasOwnProperty, bind = require_function_bind3();
      module22.exports = bind.call(call, $hasOwn);
    } });
    var require_get_intrinsic3 = __commonJS3({ "../../node_modules/get-intrinsic/index.js"(exports22, module22) {
      "use strict";
      var undefined2, $Error = require_es_errors2(), $EvalError = require_eval2(), $RangeError = require_range2(), $ReferenceError = require_ref2(), $SyntaxError = require_syntax2(), $TypeError = require_type2(), $URIError = require_uri2(), $Function = Function, getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch {
        }
      }, $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD)
        try {
          $gOPD({}, "");
        } catch {
          $gOPD = null;
        }
      var throwTypeError = function() {
        throw new $TypeError();
      }, ThrowTypeError = $gOPD ? function() {
        try {
          return arguments.callee, throwTypeError;
        } catch {
          try {
            return $gOPD(arguments, "callee").get;
          } catch {
            return throwTypeError;
          }
        }
      }() : throwTypeError, hasSymbols = require_has_symbols3()(), hasProto = require_has_proto2()(), getProto = Object.getPrototypeOf || (hasProto ? function(x) {
        return x.__proto__;
      } : null), needsEval = {}, TypedArray = typeof Uint8Array > "u" || !getProto ? undefined2 : getProto(Uint8Array), INTRINSICS = { __proto__: null, "%AggregateError%": typeof AggregateError > "u" ? undefined2 : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer > "u" ? undefined2 : ArrayBuffer, "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2, "%AsyncFromSyncIteratorPrototype%": undefined2, "%AsyncFunction%": needsEval, "%AsyncGenerator%": needsEval, "%AsyncGeneratorFunction%": needsEval, "%AsyncIteratorPrototype%": needsEval, "%Atomics%": typeof Atomics > "u" ? undefined2 : Atomics, "%BigInt%": typeof BigInt > "u" ? undefined2 : BigInt, "%BigInt64Array%": typeof BigInt64Array > "u" ? undefined2 : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array > "u" ? undefined2 : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView > "u" ? undefined2 : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": $Error, "%eval%": eval, "%EvalError%": $EvalError, "%Float32Array%": typeof Float32Array > "u" ? undefined2 : Float32Array, "%Float64Array%": typeof Float64Array > "u" ? undefined2 : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? undefined2 : FinalizationRegistry, "%Function%": $Function, "%GeneratorFunction%": needsEval, "%Int8Array%": typeof Int8Array > "u" ? undefined2 : Int8Array, "%Int16Array%": typeof Int16Array > "u" ? undefined2 : Int16Array, "%Int32Array%": typeof Int32Array > "u" ? undefined2 : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2, "%JSON%": typeof JSON == "object" ? JSON : undefined2, "%Map%": typeof Map > "u" ? undefined2 : Map, "%MapIteratorPrototype%": typeof Map > "u" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise > "u" ? undefined2 : Promise, "%Proxy%": typeof Proxy > "u" ? undefined2 : Proxy, "%RangeError%": $RangeError, "%ReferenceError%": $ReferenceError, "%Reflect%": typeof Reflect > "u" ? undefined2 : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set > "u" ? undefined2 : Set, "%SetIteratorPrototype%": typeof Set > "u" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? undefined2 : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2, "%Symbol%": hasSymbols ? Symbol : undefined2, "%SyntaxError%": $SyntaxError, "%ThrowTypeError%": ThrowTypeError, "%TypedArray%": TypedArray, "%TypeError%": $TypeError, "%Uint8Array%": typeof Uint8Array > "u" ? undefined2 : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? undefined2 : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array > "u" ? undefined2 : Uint16Array, "%Uint32Array%": typeof Uint32Array > "u" ? undefined2 : Uint32Array, "%URIError%": $URIError, "%WeakMap%": typeof WeakMap > "u" ? undefined2 : WeakMap, "%WeakRef%": typeof WeakRef > "u" ? undefined2 : WeakRef, "%WeakSet%": typeof WeakSet > "u" ? undefined2 : WeakSet };
      if (getProto)
        try {
          null.error;
        } catch (e) {
          errorProto = getProto(getProto(e)), INTRINSICS["%Error.prototype%"] = errorProto;
        }
      var errorProto, doEval = function doEval2(name2) {
        var value2;
        if (name2 === "%AsyncFunction%")
          value2 = getEvalledConstructor("async function () {}");
        else if (name2 === "%GeneratorFunction%")
          value2 = getEvalledConstructor("function* () {}");
        else if (name2 === "%AsyncGeneratorFunction%")
          value2 = getEvalledConstructor("async function* () {}");
        else if (name2 === "%AsyncGenerator%") {
          var fn3 = doEval2("%AsyncGeneratorFunction%");
          fn3 && (value2 = fn3.prototype);
        } else if (name2 === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          gen && getProto && (value2 = getProto(gen.prototype));
        }
        return INTRINSICS[name2] = value2, value2;
      }, LEGACY_ALIASES = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, bind = require_function_bind3(), hasOwn = require_hasown2(), $concat = bind.call(Function.call, Array.prototype.concat), $spliceApply = bind.call(Function.apply, Array.prototype.splice), $replace = bind.call(Function.call, String.prototype.replace), $strSlice = bind.call(Function.call, String.prototype.slice), $exec = bind.call(Function.call, RegExp.prototype.exec), rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, reEscapeChar2 = /\\(\\)?/g, stringToPath2 = function(string2) {
        var first = $strSlice(string2, 0, 1), last = $strSlice(string2, -1);
        if (first === "%" && last !== "%")
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        if (last === "%" && first !== "%")
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        var result2 = [];
        return $replace(string2, rePropName2, function(match, number, quote, subString) {
          result2[result2.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number || match;
        }), result2;
      }, getBaseIntrinsic = function(name2, allowMissing) {
        var intrinsicName = name2, alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName) && (alias = LEGACY_ALIASES[intrinsicName], intrinsicName = "%" + alias[0] + "%"), hasOwn(INTRINSICS, intrinsicName)) {
          var value2 = INTRINSICS[intrinsicName];
          if (value2 === needsEval && (value2 = doEval(intrinsicName)), typeof value2 > "u" && !allowMissing)
            throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
          return { alias, name: intrinsicName, value: value2 };
        }
        throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
      };
      module22.exports = function(name2, allowMissing) {
        if (typeof name2 != "string" || name2.length === 0)
          throw new $TypeError("intrinsic name must be a non-empty string");
        if (arguments.length > 1 && typeof allowMissing != "boolean")
          throw new $TypeError('"allowMissing" argument must be a boolean');
        if ($exec(/^%?[^%]*%?$/, name2) === null)
          throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
        var parts = stringToPath2(name2), intrinsicBaseName = parts.length > 0 ? parts[0] : "", intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing), intrinsicRealName = intrinsic.name, value2 = intrinsic.value, skipFurtherCaching = false, alias = intrinsic.alias;
        alias && (intrinsicBaseName = alias[0], $spliceApply(parts, $concat([0, 1], alias)));
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i], first = $strSlice(part, 0, 1), last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last)
            throw new $SyntaxError("property names with quotes must have matching quotes");
          if ((part === "constructor" || !isOwn) && (skipFurtherCaching = true), intrinsicBaseName += "." + part, intrinsicRealName = "%" + intrinsicBaseName + "%", hasOwn(INTRINSICS, intrinsicRealName))
            value2 = INTRINSICS[intrinsicRealName];
          else if (value2 != null) {
            if (!(part in value2)) {
              if (!allowMissing)
                throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
              return;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value2, part);
              isOwn = !!desc, isOwn && "get" in desc && !("originalValue" in desc.get) ? value2 = desc.get : value2 = value2[part];
            } else
              isOwn = hasOwn(value2, part), value2 = value2[part];
            isOwn && !skipFurtherCaching && (INTRINSICS[intrinsicRealName] = value2);
          }
        }
        return value2;
      };
    } });
    var require_es_define_property2 = __commonJS3({ "../../node_modules/es-define-property/index.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
      if ($defineProperty)
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch {
          $defineProperty = false;
        }
      module22.exports = $defineProperty;
    } });
    var require_gopd2 = __commonJS3({ "../../node_modules/gopd/index.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD)
        try {
          $gOPD([], "length");
        } catch {
          $gOPD = null;
        }
      module22.exports = $gOPD;
    } });
    var require_define_data_property2 = __commonJS3({ "../../node_modules/define-data-property/index.js"(exports22, module22) {
      "use strict";
      var $defineProperty = require_es_define_property2(), $SyntaxError = require_syntax2(), $TypeError = require_type2(), gopd = require_gopd2();
      module22.exports = function(obj, property, value2) {
        if (!obj || typeof obj != "object" && typeof obj != "function")
          throw new $TypeError("`obj` must be an object or a function`");
        if (typeof property != "string" && typeof property != "symbol")
          throw new $TypeError("`property` must be a string or a symbol`");
        if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null)
          throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
        if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null)
          throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
        if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null)
          throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
        if (arguments.length > 6 && typeof arguments[6] != "boolean")
          throw new $TypeError("`loose`, if provided, must be a boolean");
        var nonEnumerable = arguments.length > 3 ? arguments[3] : null, nonWritable = arguments.length > 4 ? arguments[4] : null, nonConfigurable = arguments.length > 5 ? arguments[5] : null, loose = arguments.length > 6 ? arguments[6] : false, desc = !!gopd && gopd(obj, property);
        if ($defineProperty)
          $defineProperty(obj, property, { configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable, enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable, value: value2, writable: nonWritable === null && desc ? desc.writable : !nonWritable });
        else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable)
          obj[property] = value2;
        else
          throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      };
    } });
    var require_has_property_descriptors2 = __commonJS3({ "../../node_modules/has-property-descriptors/index.js"(exports22, module22) {
      "use strict";
      var $defineProperty = require_es_define_property2(), hasPropertyDescriptors = function() {
        return !!$defineProperty;
      };
      hasPropertyDescriptors.hasArrayLengthDefineBug = function() {
        if (!$defineProperty)
          return null;
        try {
          return $defineProperty([], "length", { value: 1 }).length !== 1;
        } catch {
          return true;
        }
      };
      module22.exports = hasPropertyDescriptors;
    } });
    var require_define_properties = __commonJS3({ "../../node_modules/define-properties/index.js"(exports22, module22) {
      "use strict";
      var keys2 = require_object_keys(), hasSymbols = typeof Symbol == "function" && typeof Symbol("foo") == "symbol", toStr3 = Object.prototype.toString, concat = Array.prototype.concat, defineDataProperty = require_define_data_property2(), isFunction2 = function(fn3) {
        return typeof fn3 == "function" && toStr3.call(fn3) === "[object Function]";
      }, supportsDescriptors = require_has_property_descriptors2()(), defineProperty = function(object, name2, value2, predicate) {
        if (name2 in object) {
          if (predicate === true) {
            if (object[name2] === value2)
              return;
          } else if (!isFunction2(predicate) || !predicate())
            return;
        }
        supportsDescriptors ? defineDataProperty(object, name2, value2, true) : defineDataProperty(object, name2, value2);
      }, defineProperties = function(object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {}, props = keys2(map);
        hasSymbols && (props = concat.call(props, Object.getOwnPropertySymbols(map)));
        for (var i = 0; i < props.length; i += 1)
          defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      };
      defineProperties.supportsDescriptors = !!supportsDescriptors;
      module22.exports = defineProperties;
    } });
    var require_set_function_length2 = __commonJS3({ "../../node_modules/set-function-length/index.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), define2 = require_define_data_property2(), hasDescriptors = require_has_property_descriptors2()(), gOPD = require_gopd2(), $TypeError = require_type2(), $floor = GetIntrinsic("%Math.floor%");
      module22.exports = function(fn3, length) {
        if (typeof fn3 != "function")
          throw new $TypeError("`fn` is not a function");
        if (typeof length != "number" || length < 0 || length > 4294967295 || $floor(length) !== length)
          throw new $TypeError("`length` must be a positive 32-bit integer");
        var loose = arguments.length > 2 && !!arguments[2], functionLengthIsConfigurable = true, functionLengthIsWritable = true;
        if ("length" in fn3 && gOPD) {
          var desc = gOPD(fn3, "length");
          desc && !desc.configurable && (functionLengthIsConfigurable = false), desc && !desc.writable && (functionLengthIsWritable = false);
        }
        return (functionLengthIsConfigurable || functionLengthIsWritable || !loose) && (hasDescriptors ? define2(fn3, "length", length, true, true) : define2(fn3, "length", length)), fn3;
      };
    } });
    var require_call_bind3 = __commonJS3({ "../../node_modules/call-bind/index.js"(exports22, module22) {
      "use strict";
      var bind = require_function_bind3(), GetIntrinsic = require_get_intrinsic3(), setFunctionLength = require_set_function_length2(), $TypeError = require_type2(), $apply = GetIntrinsic("%Function.prototype.apply%"), $call = GetIntrinsic("%Function.prototype.call%"), $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply), $defineProperty = require_es_define_property2(), $max = GetIntrinsic("%Math.max%");
      module22.exports = function(originalFunction) {
        if (typeof originalFunction != "function")
          throw new $TypeError("a function is required");
        var func = $reflectApply(bind, $call, arguments);
        return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
      };
      var applyBind = function() {
        return $reflectApply(bind, $apply, arguments);
      };
      $defineProperty ? $defineProperty(module22.exports, "apply", { value: applyBind }) : module22.exports.apply = applyBind;
    } });
    var require_callBound3 = __commonJS3({ "../../node_modules/call-bind/callBound.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), callBind = require_call_bind3(), $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
      module22.exports = function(name2, allowMissing) {
        var intrinsic = GetIntrinsic(name2, !!allowMissing);
        return typeof intrinsic == "function" && $indexOf(name2, ".prototype.") > -1 ? callBind(intrinsic) : intrinsic;
      };
    } });
    var require_implementation32 = __commonJS3({ "../../node_modules/object.assign/implementation.js"(exports22, module22) {
      "use strict";
      var objectKeys = require_object_keys(), hasSymbols = require_shams4()(), callBound = require_callBound3(), toObject = Object, $push = callBound("Array.prototype.push"), $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable"), originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
      module22.exports = function(target, source1) {
        if (target == null)
          throw new TypeError("target must be an object");
        var to = toObject(target);
        if (arguments.length === 1)
          return to;
        for (var s = 1; s < arguments.length; ++s) {
          var from = toObject(arguments[s]), keys2 = objectKeys(from), getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
          if (getSymbols)
            for (var syms = getSymbols(from), j = 0; j < syms.length; ++j) {
              var key2 = syms[j];
              $propIsEnumerable(from, key2) && $push(keys2, key2);
            }
          for (var i = 0; i < keys2.length; ++i) {
            var nextKey = keys2[i];
            if ($propIsEnumerable(from, nextKey)) {
              var propValue = from[nextKey];
              to[nextKey] = propValue;
            }
          }
        }
        return to;
      };
    } });
    var require_polyfill = __commonJS3({ "../../node_modules/object.assign/polyfill.js"(exports22, module22) {
      "use strict";
      var implementation = require_implementation32(), lacksProperEnumerationOrder = function() {
        if (!Object.assign)
          return false;
        for (var str = "abcdefghijklmnopqrst", letters = str.split(""), map = {}, i = 0; i < letters.length; ++i)
          map[letters[i]] = letters[i];
        var obj = Object.assign({}, map), actual = "";
        for (var k in obj)
          actual += k;
        return str !== actual;
      }, assignHasPendingExceptions = function() {
        if (!Object.assign || !Object.preventExtensions)
          return false;
        var thrower = Object.preventExtensions({ 1: 2 });
        try {
          Object.assign(thrower, "xy");
        } catch {
          return thrower[1] === "y";
        }
        return false;
      };
      module22.exports = function() {
        return !Object.assign || lacksProperEnumerationOrder() || assignHasPendingExceptions() ? implementation : Object.assign;
      };
    } });
    var require_shim = __commonJS3({ "../../node_modules/object.assign/shim.js"(exports22, module22) {
      "use strict";
      var define2 = require_define_properties(), getPolyfill = require_polyfill();
      module22.exports = function() {
        var polyfill = getPolyfill();
        return define2(Object, { assign: polyfill }, { assign: function() {
          return Object.assign !== polyfill;
        } }), polyfill;
      };
    } });
    var require_object = __commonJS3({ "../../node_modules/object.assign/index.js"(exports22, module22) {
      "use strict";
      var defineProperties = require_define_properties(), callBind = require_call_bind3(), implementation = require_implementation32(), getPolyfill = require_polyfill(), shim = require_shim(), polyfill = callBind.apply(getPolyfill()), bound = function(target, source1) {
        return polyfill(Object, arguments);
      };
      defineProperties(bound, { getPolyfill, implementation, shim });
      module22.exports = bound;
    } });
    var require_functions_have_names = __commonJS3({ "../../node_modules/functions-have-names/index.js"(exports22, module22) {
      "use strict";
      var functionsHaveNames = function() {
        return typeof function() {
        }.name == "string";
      }, gOPD = Object.getOwnPropertyDescriptor;
      if (gOPD)
        try {
          gOPD([], "length");
        } catch {
          gOPD = null;
        }
      functionsHaveNames.functionsHaveConfigurableNames = function() {
        if (!functionsHaveNames() || !gOPD)
          return false;
        var desc = gOPD(function() {
        }, "name");
        return !!desc && !!desc.configurable;
      };
      var $bind = Function.prototype.bind;
      functionsHaveNames.boundFunctionsHaveNames = function() {
        return functionsHaveNames() && typeof $bind == "function" && function() {
        }.bind().name !== "";
      };
      module22.exports = functionsHaveNames;
    } });
    var require_set_function_name = __commonJS3({ "../../node_modules/set-function-name/index.js"(exports22, module22) {
      "use strict";
      var define2 = require_define_data_property2(), hasDescriptors = require_has_property_descriptors2()(), functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames(), $TypeError = require_type2();
      module22.exports = function(fn3, name2) {
        if (typeof fn3 != "function")
          throw new $TypeError("`fn` is not a function");
        var loose = arguments.length > 2 && !!arguments[2];
        return (!loose || functionsHaveConfigurableNames) && (hasDescriptors ? define2(fn3, "name", name2, true, true) : define2(fn3, "name", name2)), fn3;
      };
    } });
    var require_implementation4 = __commonJS3({ "../../node_modules/regexp.prototype.flags/implementation.js"(exports22, module22) {
      "use strict";
      var setFunctionName = require_set_function_name(), $TypeError = require_type2(), $Object = Object;
      module22.exports = setFunctionName(function() {
        if (this == null || this !== $Object(this))
          throw new $TypeError("RegExp.prototype.flags getter called on non-object");
        var result2 = "";
        return this.hasIndices && (result2 += "d"), this.global && (result2 += "g"), this.ignoreCase && (result2 += "i"), this.multiline && (result2 += "m"), this.dotAll && (result2 += "s"), this.unicode && (result2 += "u"), this.unicodeSets && (result2 += "v"), this.sticky && (result2 += "y"), result2;
      }, "get flags", true);
    } });
    var require_polyfill2 = __commonJS3({ "../../node_modules/regexp.prototype.flags/polyfill.js"(exports22, module22) {
      "use strict";
      var implementation = require_implementation4(), supportsDescriptors = require_define_properties().supportsDescriptors, $gOPD = Object.getOwnPropertyDescriptor;
      module22.exports = function() {
        if (supportsDescriptors && /a/mig.flags === "gim") {
          var descriptor = $gOPD(RegExp.prototype, "flags");
          if (descriptor && typeof descriptor.get == "function" && typeof RegExp.prototype.dotAll == "boolean" && typeof RegExp.prototype.hasIndices == "boolean") {
            var calls = "", o = {};
            if (Object.defineProperty(o, "hasIndices", { get: function() {
              calls += "d";
            } }), Object.defineProperty(o, "sticky", { get: function() {
              calls += "y";
            } }), calls === "dy")
              return descriptor.get;
          }
        }
        return implementation;
      };
    } });
    var require_shim2 = __commonJS3({ "../../node_modules/regexp.prototype.flags/shim.js"(exports22, module22) {
      "use strict";
      var supportsDescriptors = require_define_properties().supportsDescriptors, getPolyfill = require_polyfill2(), gOPD = Object.getOwnPropertyDescriptor, defineProperty = Object.defineProperty, TypeErr = TypeError, getProto = Object.getPrototypeOf, regex = /a/;
      module22.exports = function() {
        if (!supportsDescriptors || !getProto)
          throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
        var polyfill = getPolyfill(), proto = getProto(regex), descriptor = gOPD(proto, "flags");
        return (!descriptor || descriptor.get !== polyfill) && defineProperty(proto, "flags", { configurable: true, enumerable: false, get: polyfill }), polyfill;
      };
    } });
    var require_regexp_prototype = __commonJS3({ "../../node_modules/regexp.prototype.flags/index.js"(exports22, module22) {
      "use strict";
      var define2 = require_define_properties(), callBind = require_call_bind3(), implementation = require_implementation4(), getPolyfill = require_polyfill2(), shim = require_shim2(), flagsBound = callBind(getPolyfill());
      define2(flagsBound, { getPolyfill, implementation, shim });
      module22.exports = flagsBound;
    } });
    var require_node2 = __commonJS3({ "../../node_modules/es-get-iterator/node.js"(exports22, module22) {
      "use strict";
      var $iterator = Symbol.iterator;
      module22.exports = function(iterable) {
        if (iterable != null && typeof iterable[$iterator] < "u")
          return iterable[$iterator]();
      };
    } });
    var require_util_inspect2 = __commonJS3({ "../../node_modules/object-inspect/util.inspect.js"(exports22, module22) {
      "use strict";
      module22.exports = require("util").inspect;
    } });
    var require_object_inspect2 = __commonJS3({ "../../node_modules/object-inspect/index.js"(exports22, module22) {
      "use strict";
      var hasMap = typeof Map == "function" && Map.prototype, mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null, mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get == "function" ? mapSizeDescriptor.get : null, mapForEach = hasMap && Map.prototype.forEach, hasSet = typeof Set == "function" && Set.prototype, setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null, setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get == "function" ? setSizeDescriptor.get : null, setForEach = hasSet && Set.prototype.forEach, hasWeakMap = typeof WeakMap == "function" && WeakMap.prototype, weakMapHas = hasWeakMap ? WeakMap.prototype.has : null, hasWeakSet = typeof WeakSet == "function" && WeakSet.prototype, weakSetHas = hasWeakSet ? WeakSet.prototype.has : null, hasWeakRef = typeof WeakRef == "function" && WeakRef.prototype, weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null, booleanValueOf = Boolean.prototype.valueOf, objectToString2 = Object.prototype.toString, functionToString2 = Function.prototype.toString, $match = String.prototype.match, $slice = String.prototype.slice, $replace = String.prototype.replace, $toUpperCase = String.prototype.toUpperCase, $toLowerCase = String.prototype.toLowerCase, $test = RegExp.prototype.test, $concat = Array.prototype.concat, $join = Array.prototype.join, $arrSlice = Array.prototype.slice, $floor = Math.floor, bigIntValueOf = typeof BigInt == "function" ? BigInt.prototype.valueOf : null, gOPS = Object.getOwnPropertySymbols, symToString = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol.prototype.toString : null, hasShammedSymbols = typeof Symbol == "function" && typeof Symbol.iterator == "object", toStringTag2 = typeof Symbol == "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols || true) ? Symbol.toStringTag : null, isEnumerable = Object.prototype.propertyIsEnumerable, gPO = (typeof Reflect == "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
        return O.__proto__;
      } : null);
      function addNumericSeparator(num, str) {
        if (num === 1 / 0 || num === -1 / 0 || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str))
          return str;
        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
        if (typeof num == "number") {
          var int = num < 0 ? -$floor(-num) : $floor(num);
          if (int !== num) {
            var intStr = String(int), dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
          }
        }
        return $replace.call(str, sepRegex, "$&_");
      }
      var utilInspect = require_util_inspect2(), inspectCustom2 = utilInspect.custom, inspectSymbol2 = isSymbol2(inspectCustom2) ? inspectCustom2 : null;
      module22.exports = function inspect_(obj, options2, depth, seen) {
        var opts = options2 || {};
        if (has2(opts, "quoteStyle") && opts.quoteStyle !== "single" && opts.quoteStyle !== "double")
          throw new TypeError('option "quoteStyle" must be "single" or "double"');
        if (has2(opts, "maxStringLength") && (typeof opts.maxStringLength == "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== 1 / 0 : opts.maxStringLength !== null))
          throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        var customInspect = has2(opts, "customInspect") ? opts.customInspect : true;
        if (typeof customInspect != "boolean" && customInspect !== "symbol")
          throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
        if (has2(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0))
          throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
        if (has2(opts, "numericSeparator") && typeof opts.numericSeparator != "boolean")
          throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
        var numericSeparator = opts.numericSeparator;
        if (typeof obj > "u")
          return "undefined";
        if (obj === null)
          return "null";
        if (typeof obj == "boolean")
          return obj ? "true" : "false";
        if (typeof obj == "string")
          return inspectString2(obj, opts);
        if (typeof obj == "number") {
          if (obj === 0)
            return 1 / 0 / obj > 0 ? "0" : "-0";
          var str = String(obj);
          return numericSeparator ? addNumericSeparator(obj, str) : str;
        }
        if (typeof obj == "bigint") {
          var bigIntStr = String(obj) + "n";
          return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
        }
        var maxDepth = typeof opts.depth > "u" ? 5 : opts.depth;
        if (typeof depth > "u" && (depth = 0), depth >= maxDepth && maxDepth > 0 && typeof obj == "object")
          return isArray2(obj) ? "[Array]" : "[Object]";
        var indent = getIndent(opts, depth);
        if (typeof seen > "u")
          seen = [];
        else if (indexOf(seen, obj) >= 0)
          return "[Circular]";
        function inspect3(value2, from, noIndent) {
          if (from && (seen = $arrSlice.call(seen), seen.push(from)), noIndent) {
            var newOpts = { depth: opts.depth };
            return has2(opts, "quoteStyle") && (newOpts.quoteStyle = opts.quoteStyle), inspect_(value2, newOpts, depth + 1, seen);
          }
          return inspect_(value2, opts, depth + 1, seen);
        }
        if (typeof obj == "function" && !isRegExp(obj)) {
          var name2 = nameOf(obj), keys2 = arrObjKeys(obj, inspect3);
          return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
        }
        if (isSymbol2(obj)) {
          var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
          return typeof obj == "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
        }
        if (isElement5(obj)) {
          for (var s = "<" + $toLowerCase.call(String(obj.nodeName)), attrs = obj.attributes || [], i = 0; i < attrs.length; i++)
            s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
          return s += ">", obj.childNodes && obj.childNodes.length && (s += "..."), s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">", s;
        }
        if (isArray2(obj)) {
          if (obj.length === 0)
            return "[]";
          var xs = arrObjKeys(obj, inspect3);
          return indent && !singleLineValues(xs) ? "[" + indentedJoin(xs, indent) + "]" : "[ " + $join.call(xs, ", ") + " ]";
        }
        if (isError(obj)) {
          var parts = arrObjKeys(obj, inspect3);
          return !("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause") ? "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect3(obj.cause), parts), ", ") + " }" : parts.length === 0 ? "[" + String(obj) + "]" : "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
        }
        if (typeof obj == "object" && customInspect) {
          if (inspectSymbol2 && typeof obj[inspectSymbol2] == "function" && utilInspect)
            return utilInspect(obj, { depth: maxDepth - depth });
          if (customInspect !== "symbol" && typeof obj.inspect == "function")
            return obj.inspect();
        }
        if (isMap(obj)) {
          var mapParts = [];
          return mapForEach && mapForEach.call(obj, function(value2, key2) {
            mapParts.push(inspect3(key2, obj, true) + " => " + inspect3(value2, obj));
          }), collectionOf("Map", mapSize.call(obj), mapParts, indent);
        }
        if (isSet(obj)) {
          var setParts = [];
          return setForEach && setForEach.call(obj, function(value2) {
            setParts.push(inspect3(value2, obj));
          }), collectionOf("Set", setSize.call(obj), setParts, indent);
        }
        if (isWeakMap(obj))
          return weakCollectionOf("WeakMap");
        if (isWeakSet(obj))
          return weakCollectionOf("WeakSet");
        if (isWeakRef(obj))
          return weakCollectionOf("WeakRef");
        if (isNumber(obj))
          return markBoxed(inspect3(Number(obj)));
        if (isBigInt(obj))
          return markBoxed(inspect3(bigIntValueOf.call(obj)));
        if (isBoolean(obj))
          return markBoxed(booleanValueOf.call(obj));
        if (isString(obj))
          return markBoxed(inspect3(String(obj)));
        if (typeof window < "u" && obj === window)
          return "{ [object Window] }";
        if (obj === global)
          return "{ [object globalThis] }";
        if (!isDate(obj) && !isRegExp(obj)) {
          var ys = arrObjKeys(obj, inspect3), isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object, protoTag = obj instanceof Object ? "" : "null prototype", stringTag = !isPlainObject && toStringTag2 && Object(obj) === obj && toStringTag2 in obj ? $slice.call(toStr3(obj), 8, -1) : protoTag ? "Object" : "", constructorTag = isPlainObject || typeof obj.constructor != "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "", tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
          return ys.length === 0 ? tag + "{}" : indent ? tag + "{" + indentedJoin(ys, indent) + "}" : tag + "{ " + $join.call(ys, ", ") + " }";
        }
        return String(obj);
      };
      function wrapQuotes(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
        return quoteChar + s + quoteChar;
      }
      function quote(s) {
        return $replace.call(String(s), /"/g, "&quot;");
      }
      function isArray2(obj) {
        return toStr3(obj) === "[object Array]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isDate(obj) {
        return toStr3(obj) === "[object Date]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isRegExp(obj) {
        return toStr3(obj) === "[object RegExp]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isError(obj) {
        return toStr3(obj) === "[object Error]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isString(obj) {
        return toStr3(obj) === "[object String]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isNumber(obj) {
        return toStr3(obj) === "[object Number]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isBoolean(obj) {
        return toStr3(obj) === "[object Boolean]" && (!toStringTag2 || !(typeof obj == "object" && toStringTag2 in obj));
      }
      function isSymbol2(obj) {
        if (hasShammedSymbols)
          return obj && typeof obj == "object" && obj instanceof Symbol;
        if (typeof obj == "symbol")
          return true;
        if (!obj || typeof obj != "object" || !symToString)
          return false;
        try {
          return symToString.call(obj), true;
        } catch {
        }
        return false;
      }
      function isBigInt(obj) {
        if (!obj || typeof obj != "object" || !bigIntValueOf)
          return false;
        try {
          return bigIntValueOf.call(obj), true;
        } catch {
        }
        return false;
      }
      var hasOwn = Object.prototype.hasOwnProperty || function(key2) {
        return key2 in this;
      };
      function has2(obj, key2) {
        return hasOwn.call(obj, key2);
      }
      function toStr3(obj) {
        return objectToString2.call(obj);
      }
      function nameOf(f2) {
        if (f2.name)
          return f2.name;
        var m2 = $match.call(functionToString2.call(f2), /^function\s*([\w$]+)/);
        return m2 ? m2[1] : null;
      }
      function indexOf(xs, x) {
        if (xs.indexOf)
          return xs.indexOf(x);
        for (var i = 0, l = xs.length; i < l; i++)
          if (xs[i] === x)
            return i;
        return -1;
      }
      function isMap(x) {
        if (!mapSize || !x || typeof x != "object")
          return false;
        try {
          mapSize.call(x);
          try {
            setSize.call(x);
          } catch {
            return true;
          }
          return x instanceof Map;
        } catch {
        }
        return false;
      }
      function isWeakMap(x) {
        if (!weakMapHas || !x || typeof x != "object")
          return false;
        try {
          weakMapHas.call(x, weakMapHas);
          try {
            weakSetHas.call(x, weakSetHas);
          } catch {
            return true;
          }
          return x instanceof WeakMap;
        } catch {
        }
        return false;
      }
      function isWeakRef(x) {
        if (!weakRefDeref || !x || typeof x != "object")
          return false;
        try {
          return weakRefDeref.call(x), true;
        } catch {
        }
        return false;
      }
      function isSet(x) {
        if (!setSize || !x || typeof x != "object")
          return false;
        try {
          setSize.call(x);
          try {
            mapSize.call(x);
          } catch {
            return true;
          }
          return x instanceof Set;
        } catch {
        }
        return false;
      }
      function isWeakSet(x) {
        if (!weakSetHas || !x || typeof x != "object")
          return false;
        try {
          weakSetHas.call(x, weakSetHas);
          try {
            weakMapHas.call(x, weakMapHas);
          } catch {
            return true;
          }
          return x instanceof WeakSet;
        } catch {
        }
        return false;
      }
      function isElement5(x) {
        return !x || typeof x != "object" ? false : typeof HTMLElement < "u" && x instanceof HTMLElement ? true : typeof x.nodeName == "string" && typeof x.getAttribute == "function";
      }
      function inspectString2(str, opts) {
        if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength, trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
          return inspectString2($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
        }
        var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
        return wrapQuotes(s, "single", opts);
      }
      function lowbyte(c) {
        var n = c.charCodeAt(0), x = { 8: "b", 9: "t", 10: "n", 12: "f", 13: "r" }[n];
        return x ? "\\" + x : "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
      }
      function markBoxed(str) {
        return "Object(" + str + ")";
      }
      function weakCollectionOf(type3) {
        return type3 + " { ? }";
      }
      function collectionOf(type3, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
        return type3 + " (" + size + ") {" + joinedEntries + "}";
      }
      function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++)
          if (indexOf(xs[i], `
`) >= 0)
            return false;
        return true;
      }
      function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === "	")
          baseIndent = "	";
        else if (typeof opts.indent == "number" && opts.indent > 0)
          baseIndent = $join.call(Array(opts.indent + 1), " ");
        else
          return null;
        return { base: baseIndent, prev: $join.call(Array(depth + 1), baseIndent) };
      }
      function indentedJoin(xs, indent) {
        if (xs.length === 0)
          return "";
        var lineJoiner = `
` + indent.prev + indent.base;
        return lineJoiner + $join.call(xs, "," + lineJoiner) + `
` + indent.prev;
      }
      function arrObjKeys(obj, inspect3) {
        var isArr = isArray2(obj), xs = [];
        if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++)
            xs[i] = has2(obj, i) ? inspect3(obj[i], obj) : "";
        }
        var syms = typeof gOPS == "function" ? gOPS(obj) : [], symMap;
        if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++)
            symMap["$" + syms[k]] = syms[k];
        }
        for (var key2 in obj)
          has2(obj, key2) && (isArr && String(Number(key2)) === key2 && key2 < obj.length || hasShammedSymbols && symMap["$" + key2] instanceof Symbol || ($test.call(/[^\w$]/, key2) ? xs.push(inspect3(key2, obj) + ": " + inspect3(obj[key2], obj)) : xs.push(key2 + ": " + inspect3(obj[key2], obj))));
        if (typeof gOPS == "function")
          for (var j = 0; j < syms.length; j++)
            isEnumerable.call(obj, syms[j]) && xs.push("[" + inspect3(syms[j]) + "]: " + inspect3(obj[syms[j]], obj));
        return xs;
      }
    } });
    var require_side_channel2 = __commonJS3({ "../../node_modules/side-channel/index.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), callBound = require_callBound3(), inspect3 = require_object_inspect2(), $TypeError = GetIntrinsic("%TypeError%"), $WeakMap = GetIntrinsic("%WeakMap%", true), $Map = GetIntrinsic("%Map%", true), $weakMapGet = callBound("WeakMap.prototype.get", true), $weakMapSet = callBound("WeakMap.prototype.set", true), $weakMapHas = callBound("WeakMap.prototype.has", true), $mapGet = callBound("Map.prototype.get", true), $mapSet = callBound("Map.prototype.set", true), $mapHas = callBound("Map.prototype.has", true), listGetNode = function(list, key2) {
        for (var prev = list, curr; (curr = prev.next) !== null; prev = curr)
          if (curr.key === key2)
            return prev.next = curr.next, curr.next = list.next, list.next = curr, curr;
      }, listGet = function(objects, key2) {
        var node = listGetNode(objects, key2);
        return node && node.value;
      }, listSet = function(objects, key2, value2) {
        var node = listGetNode(objects, key2);
        node ? node.value = value2 : objects.next = { key: key2, next: objects.next, value: value2 };
      }, listHas = function(objects, key2) {
        return !!listGetNode(objects, key2);
      };
      module22.exports = function() {
        var $wm, $m, $o, channel = { assert: function(key2) {
          if (!channel.has(key2))
            throw new $TypeError("Side channel does not contain " + inspect3(key2));
        }, get: function(key2) {
          if ($WeakMap && key2 && (typeof key2 == "object" || typeof key2 == "function")) {
            if ($wm)
              return $weakMapGet($wm, key2);
          } else if ($Map) {
            if ($m)
              return $mapGet($m, key2);
          } else if ($o)
            return listGet($o, key2);
        }, has: function(key2) {
          if ($WeakMap && key2 && (typeof key2 == "object" || typeof key2 == "function")) {
            if ($wm)
              return $weakMapHas($wm, key2);
          } else if ($Map) {
            if ($m)
              return $mapHas($m, key2);
          } else if ($o)
            return listHas($o, key2);
          return false;
        }, set: function(key2, value2) {
          $WeakMap && key2 && (typeof key2 == "object" || typeof key2 == "function") ? ($wm || ($wm = new $WeakMap()), $weakMapSet($wm, key2, value2)) : $Map ? ($m || ($m = new $Map()), $mapSet($m, key2, value2)) : ($o || ($o = { key: {}, next: null }), listSet($o, key2, value2));
        } };
        return channel;
      };
    } });
    var require_implementation5 = __commonJS3({ "../../node_modules/object-is/implementation.js"(exports22, module22) {
      "use strict";
      var numberIsNaN = function(value2) {
        return value2 !== value2;
      };
      module22.exports = function(a, b2) {
        return a === 0 && b2 === 0 ? 1 / a === 1 / b2 : !!(a === b2 || numberIsNaN(a) && numberIsNaN(b2));
      };
    } });
    var require_polyfill3 = __commonJS3({ "../../node_modules/object-is/polyfill.js"(exports22, module22) {
      "use strict";
      var implementation = require_implementation5();
      module22.exports = function() {
        return typeof Object.is == "function" ? Object.is : implementation;
      };
    } });
    var require_shim3 = __commonJS3({ "../../node_modules/object-is/shim.js"(exports22, module22) {
      "use strict";
      var getPolyfill = require_polyfill3(), define2 = require_define_properties();
      module22.exports = function() {
        var polyfill = getPolyfill();
        return define2(Object, { is: polyfill }, { is: function() {
          return Object.is !== polyfill;
        } }), polyfill;
      };
    } });
    var require_object_is = __commonJS3({ "../../node_modules/object-is/index.js"(exports22, module22) {
      "use strict";
      var define2 = require_define_properties(), callBind = require_call_bind3(), implementation = require_implementation5(), getPolyfill = require_polyfill3(), shim = require_shim3(), polyfill = callBind(getPolyfill(), Object);
      define2(polyfill, { getPolyfill, implementation, shim });
      module22.exports = polyfill;
    } });
    var require_shams22 = __commonJS3({ "../../node_modules/has-tostringtag/shams.js"(exports22, module22) {
      "use strict";
      var hasSymbols = require_shams4();
      module22.exports = function() {
        return hasSymbols() && !!Symbol.toStringTag;
      };
    } });
    var require_is_arguments = __commonJS3({ "../../node_modules/is-arguments/index.js"(exports22, module22) {
      "use strict";
      var hasToStringTag = require_shams22()(), callBound = require_callBound3(), $toString = callBound("Object.prototype.toString"), isStandardArguments = function(value2) {
        return hasToStringTag && value2 && typeof value2 == "object" && Symbol.toStringTag in value2 ? false : $toString(value2) === "[object Arguments]";
      }, isLegacyArguments = function(value2) {
        return isStandardArguments(value2) ? true : value2 !== null && typeof value2 == "object" && typeof value2.length == "number" && value2.length >= 0 && $toString(value2) !== "[object Array]" && $toString(value2.callee) === "[object Function]";
      }, supportsStandardArguments = function() {
        return isStandardArguments(arguments);
      }();
      isStandardArguments.isLegacyArguments = isLegacyArguments;
      module22.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    } });
    var require_isarray = __commonJS3({ "../../node_modules/isarray/index.js"(exports22, module22) {
      "use strict";
      var toString22 = {}.toString;
      module22.exports = Array.isArray || function(arr) {
        return toString22.call(arr) == "[object Array]";
      };
    } });
    var require_is_array_buffer = __commonJS3({ "../../node_modules/is-array-buffer/index.js"(exports22, module22) {
      "use strict";
      var callBind = require_call_bind3(), callBound = require_callBound3(), GetIntrinsic = require_get_intrinsic3(), $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true), $byteLength = callBound("ArrayBuffer.prototype.byteLength", true), $toString = callBound("Object.prototype.toString"), abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice, $abSlice = !!abSlice && callBind(abSlice);
      module22.exports = $byteLength || $abSlice ? function(obj) {
        if (!obj || typeof obj != "object")
          return false;
        try {
          return $byteLength ? $byteLength(obj) : $abSlice(obj, 0), true;
        } catch {
          return false;
        }
      } : $ArrayBuffer ? function(obj) {
        return $toString(obj) === "[object ArrayBuffer]";
      } : function(obj) {
        return false;
      };
    } });
    var require_is_date_object = __commonJS3({ "../../node_modules/is-date-object/index.js"(exports22, module22) {
      "use strict";
      var getDay = Date.prototype.getDay, tryDateObject = function(value2) {
        try {
          return getDay.call(value2), true;
        } catch {
          return false;
        }
      }, toStr3 = Object.prototype.toString, dateClass = "[object Date]", hasToStringTag = require_shams22()();
      module22.exports = function(value2) {
        return typeof value2 != "object" || value2 === null ? false : hasToStringTag ? tryDateObject(value2) : toStr3.call(value2) === dateClass;
      };
    } });
    var require_is_regex2 = __commonJS3({ "../../node_modules/is-regex/index.js"(exports22, module22) {
      "use strict";
      var callBound = require_callBound3(), hasToStringTag = require_shams22()(), has2, $exec, isRegexMarker, badStringifier;
      hasToStringTag && (has2 = callBound("Object.prototype.hasOwnProperty"), $exec = callBound("RegExp.prototype.exec"), isRegexMarker = {}, throwRegexMarker = function() {
        throw isRegexMarker;
      }, badStringifier = { toString: throwRegexMarker, valueOf: throwRegexMarker }, typeof Symbol.toPrimitive == "symbol" && (badStringifier[Symbol.toPrimitive] = throwRegexMarker));
      var throwRegexMarker, $toString = callBound("Object.prototype.toString"), gOPD = Object.getOwnPropertyDescriptor, regexClass = "[object RegExp]";
      module22.exports = hasToStringTag ? function(value2) {
        if (!value2 || typeof value2 != "object")
          return false;
        var descriptor = gOPD(value2, "lastIndex"), hasLastIndexDataProperty = descriptor && has2(descriptor, "value");
        if (!hasLastIndexDataProperty)
          return false;
        try {
          $exec(value2, badStringifier);
        } catch (e) {
          return e === isRegexMarker;
        }
      } : function(value2) {
        return !value2 || typeof value2 != "object" && typeof value2 != "function" ? false : $toString(value2) === regexClass;
      };
    } });
    var require_is_shared_array_buffer = __commonJS3({ "../../node_modules/is-shared-array-buffer/index.js"(exports22, module22) {
      "use strict";
      var callBound = require_callBound3(), $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
      module22.exports = $byteLength ? function(obj) {
        if (!obj || typeof obj != "object")
          return false;
        try {
          return $byteLength(obj), true;
        } catch {
          return false;
        }
      } : function(obj) {
        return false;
      };
    } });
    var require_is_string = __commonJS3({ "../../node_modules/is-string/index.js"(exports22, module22) {
      "use strict";
      var strValue = String.prototype.valueOf, tryStringObject = function(value2) {
        try {
          return strValue.call(value2), true;
        } catch {
          return false;
        }
      }, toStr3 = Object.prototype.toString, strClass = "[object String]", hasToStringTag = require_shams22()();
      module22.exports = function(value2) {
        return typeof value2 == "string" ? true : typeof value2 != "object" ? false : hasToStringTag ? tryStringObject(value2) : toStr3.call(value2) === strClass;
      };
    } });
    var require_is_number_object = __commonJS3({ "../../node_modules/is-number-object/index.js"(exports22, module22) {
      "use strict";
      var numToStr = Number.prototype.toString, tryNumberObject = function(value2) {
        try {
          return numToStr.call(value2), true;
        } catch {
          return false;
        }
      }, toStr3 = Object.prototype.toString, numClass = "[object Number]", hasToStringTag = require_shams22()();
      module22.exports = function(value2) {
        return typeof value2 == "number" ? true : typeof value2 != "object" ? false : hasToStringTag ? tryNumberObject(value2) : toStr3.call(value2) === numClass;
      };
    } });
    var require_is_boolean_object = __commonJS3({ "../../node_modules/is-boolean-object/index.js"(exports22, module22) {
      "use strict";
      var callBound = require_callBound3(), $boolToStr = callBound("Boolean.prototype.toString"), $toString = callBound("Object.prototype.toString"), tryBooleanObject = function(value2) {
        try {
          return $boolToStr(value2), true;
        } catch {
          return false;
        }
      }, boolClass = "[object Boolean]", hasToStringTag = require_shams22()();
      module22.exports = function(value2) {
        return typeof value2 == "boolean" ? true : value2 === null || typeof value2 != "object" ? false : hasToStringTag && Symbol.toStringTag in value2 ? tryBooleanObject(value2) : $toString(value2) === boolClass;
      };
    } });
    var require_is_symbol2 = __commonJS3({ "../../node_modules/is-symbol/index.js"(exports22, module22) {
      "use strict";
      var toStr3 = Object.prototype.toString, hasSymbols = require_has_symbols3()();
      hasSymbols ? (symToStr = Symbol.prototype.toString, symStringRegex = /^Symbol\(.*\)$/, isSymbolObject = function(value2) {
        return typeof value2.valueOf() != "symbol" ? false : symStringRegex.test(symToStr.call(value2));
      }, module22.exports = function(value2) {
        if (typeof value2 == "symbol")
          return true;
        if (toStr3.call(value2) !== "[object Symbol]")
          return false;
        try {
          return isSymbolObject(value2);
        } catch {
          return false;
        }
      }) : module22.exports = function(value2) {
        return false;
      };
      var symToStr, symStringRegex, isSymbolObject;
    } });
    var require_has_bigints = __commonJS3({ "../../node_modules/has-bigints/index.js"(exports22, module22) {
      "use strict";
      var $BigInt = typeof BigInt < "u" && BigInt;
      module22.exports = function() {
        return typeof $BigInt == "function" && typeof BigInt == "function" && typeof $BigInt(42) == "bigint" && typeof BigInt(42) == "bigint";
      };
    } });
    var require_is_bigint = __commonJS3({ "../../node_modules/is-bigint/index.js"(exports22, module22) {
      "use strict";
      var hasBigInts = require_has_bigints()();
      hasBigInts ? (bigIntValueOf = BigInt.prototype.valueOf, tryBigInt = function(value2) {
        try {
          return bigIntValueOf.call(value2), true;
        } catch {
        }
        return false;
      }, module22.exports = function(value2) {
        return value2 === null || typeof value2 > "u" || typeof value2 == "boolean" || typeof value2 == "string" || typeof value2 == "number" || typeof value2 == "symbol" || typeof value2 == "function" ? false : typeof value2 == "bigint" ? true : tryBigInt(value2);
      }) : module22.exports = function(value2) {
        return false;
      };
      var bigIntValueOf, tryBigInt;
    } });
    var require_which_boxed_primitive = __commonJS3({ "../../node_modules/which-boxed-primitive/index.js"(exports22, module22) {
      "use strict";
      var isString = require_is_string(), isNumber = require_is_number_object(), isBoolean = require_is_boolean_object(), isSymbol2 = require_is_symbol2(), isBigInt = require_is_bigint();
      module22.exports = function(value2) {
        if (value2 == null || typeof value2 != "object" && typeof value2 != "function")
          return null;
        if (isString(value2))
          return "String";
        if (isNumber(value2))
          return "Number";
        if (isBoolean(value2))
          return "Boolean";
        if (isSymbol2(value2))
          return "Symbol";
        if (isBigInt(value2))
          return "BigInt";
      };
    } });
    var require_is_map = __commonJS3({ "../../node_modules/is-map/index.js"(exports22, module22) {
      "use strict";
      var $Map = typeof Map == "function" && Map.prototype ? Map : null, $Set = typeof Set == "function" && Set.prototype ? Set : null, exported;
      $Map || (exported = function(x) {
        return false;
      });
      var $mapHas = $Map ? Map.prototype.has : null, $setHas = $Set ? Set.prototype.has : null;
      !exported && !$mapHas && (exported = function(x) {
        return false;
      });
      module22.exports = exported || function(x) {
        if (!x || typeof x != "object")
          return false;
        try {
          if ($mapHas.call(x), $setHas)
            try {
              $setHas.call(x);
            } catch {
              return true;
            }
          return x instanceof $Map;
        } catch {
        }
        return false;
      };
    } });
    var require_is_set = __commonJS3({ "../../node_modules/is-set/index.js"(exports22, module22) {
      "use strict";
      var $Map = typeof Map == "function" && Map.prototype ? Map : null, $Set = typeof Set == "function" && Set.prototype ? Set : null, exported;
      $Set || (exported = function(x) {
        return false;
      });
      var $mapHas = $Map ? Map.prototype.has : null, $setHas = $Set ? Set.prototype.has : null;
      !exported && !$setHas && (exported = function(x) {
        return false;
      });
      module22.exports = exported || function(x) {
        if (!x || typeof x != "object")
          return false;
        try {
          if ($setHas.call(x), $mapHas)
            try {
              $mapHas.call(x);
            } catch {
              return true;
            }
          return x instanceof $Set;
        } catch {
        }
        return false;
      };
    } });
    var require_is_weakmap = __commonJS3({ "../../node_modules/is-weakmap/index.js"(exports22, module22) {
      "use strict";
      var $WeakMap = typeof WeakMap == "function" && WeakMap.prototype ? WeakMap : null, $WeakSet = typeof WeakSet == "function" && WeakSet.prototype ? WeakSet : null, exported;
      $WeakMap || (exported = function(x) {
        return false;
      });
      var $mapHas = $WeakMap ? $WeakMap.prototype.has : null, $setHas = $WeakSet ? $WeakSet.prototype.has : null;
      !exported && !$mapHas && (exported = function(x) {
        return false;
      });
      module22.exports = exported || function(x) {
        if (!x || typeof x != "object")
          return false;
        try {
          if ($mapHas.call(x, $mapHas), $setHas)
            try {
              $setHas.call(x, $setHas);
            } catch {
              return true;
            }
          return x instanceof $WeakMap;
        } catch {
        }
        return false;
      };
    } });
    var require_is_weakset = __commonJS3({ "../../node_modules/is-weakset/index.js"(exports22, module22) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic3(), callBound = require_callBound3(), $WeakSet = GetIntrinsic("%WeakSet%", true), $setHas = callBound("WeakSet.prototype.has", true);
      $setHas ? ($mapHas = callBound("WeakMap.prototype.has", true), module22.exports = function(x) {
        if (!x || typeof x != "object")
          return false;
        try {
          if ($setHas(x, $setHas), $mapHas)
            try {
              $mapHas(x, $mapHas);
            } catch {
              return true;
            }
          return x instanceof $WeakSet;
        } catch {
        }
        return false;
      }) : module22.exports = function(x) {
        return false;
      };
      var $mapHas;
    } });
    var require_which_collection = __commonJS3({ "../../node_modules/which-collection/index.js"(exports22, module22) {
      "use strict";
      var isMap = require_is_map(), isSet = require_is_set(), isWeakMap = require_is_weakmap(), isWeakSet = require_is_weakset();
      module22.exports = function(value2) {
        if (value2 && typeof value2 == "object") {
          if (isMap(value2))
            return "Map";
          if (isSet(value2))
            return "Set";
          if (isWeakMap(value2))
            return "WeakMap";
          if (isWeakSet(value2))
            return "WeakSet";
        }
        return false;
      };
    } });
    var require_is_callable = __commonJS3({ "../../node_modules/is-callable/index.js"(exports22, module22) {
      "use strict";
      var fnToStr = Function.prototype.toString, reflectApply = typeof Reflect == "object" && Reflect !== null && Reflect.apply, badArrayLike, isCallableMarker;
      if (typeof reflectApply == "function" && typeof Object.defineProperty == "function")
        try {
          badArrayLike = Object.defineProperty({}, "length", { get: function() {
            throw isCallableMarker;
          } }), isCallableMarker = {}, reflectApply(function() {
            throw 42;
          }, null, badArrayLike);
        } catch (_) {
          _ !== isCallableMarker && (reflectApply = null);
        }
      else
        reflectApply = null;
      var constructorRegex = /^\s*class\b/, isES6ClassFn = function(value2) {
        try {
          var fnStr = fnToStr.call(value2);
          return constructorRegex.test(fnStr);
        } catch {
          return false;
        }
      }, tryFunctionObject = function(value2) {
        try {
          return isES6ClassFn(value2) ? false : (fnToStr.call(value2), true);
        } catch {
          return false;
        }
      }, toStr3 = Object.prototype.toString, objectClass = "[object Object]", fnClass = "[object Function]", genClass = "[object GeneratorFunction]", ddaClass = "[object HTMLAllCollection]", ddaClass2 = "[object HTML document.all class]", ddaClass3 = "[object HTMLCollection]", hasToStringTag = typeof Symbol == "function" && !!Symbol.toStringTag, isIE68 = !(0 in [,]), isDDA = function() {
        return false;
      };
      typeof document == "object" && (all = document.all, toStr3.call(all) === toStr3.call(document.all) && (isDDA = function(value2) {
        if ((isIE68 || !value2) && (typeof value2 > "u" || typeof value2 == "object"))
          try {
            var str = toStr3.call(value2);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value2("") == null;
          } catch {
          }
        return false;
      }));
      var all;
      module22.exports = reflectApply ? function(value2) {
        if (isDDA(value2))
          return true;
        if (!value2 || typeof value2 != "function" && typeof value2 != "object")
          return false;
        try {
          reflectApply(value2, null, badArrayLike);
        } catch (e) {
          if (e !== isCallableMarker)
            return false;
        }
        return !isES6ClassFn(value2) && tryFunctionObject(value2);
      } : function(value2) {
        if (isDDA(value2))
          return true;
        if (!value2 || typeof value2 != "function" && typeof value2 != "object")
          return false;
        if (hasToStringTag)
          return tryFunctionObject(value2);
        if (isES6ClassFn(value2))
          return false;
        var strClass = toStr3.call(value2);
        return strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass) ? false : tryFunctionObject(value2);
      };
    } });
    var require_for_each = __commonJS3({ "../../node_modules/for-each/index.js"(exports22, module22) {
      "use strict";
      var isCallable3 = require_is_callable(), toStr3 = Object.prototype.toString, hasOwnProperty5 = Object.prototype.hasOwnProperty, forEachArray = function(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++)
          hasOwnProperty5.call(array, i) && (receiver == null ? iterator(array[i], i, array) : iterator.call(receiver, array[i], i, array));
      }, forEachString = function(string2, iterator, receiver) {
        for (var i = 0, len = string2.length; i < len; i++)
          receiver == null ? iterator(string2.charAt(i), i, string2) : iterator.call(receiver, string2.charAt(i), i, string2);
      }, forEachObject = function(object, iterator, receiver) {
        for (var k in object)
          hasOwnProperty5.call(object, k) && (receiver == null ? iterator(object[k], k, object) : iterator.call(receiver, object[k], k, object));
      }, forEach = function(list, iterator, thisArg) {
        if (!isCallable3(iterator))
          throw new TypeError("iterator must be a function");
        var receiver;
        arguments.length >= 3 && (receiver = thisArg), toStr3.call(list) === "[object Array]" ? forEachArray(list, iterator, receiver) : typeof list == "string" ? forEachString(list, iterator, receiver) : forEachObject(list, iterator, receiver);
      };
      module22.exports = forEach;
    } });
    var require_possible_typed_array_names = __commonJS3({ "../../node_modules/possible-typed-array-names/index.js"(exports22, module22) {
      "use strict";
      module22.exports = ["Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "BigInt64Array", "BigUint64Array"];
    } });
    var require_available_typed_arrays = __commonJS3({ "../../node_modules/available-typed-arrays/index.js"(exports22, module22) {
      "use strict";
      var possibleNames = require_possible_typed_array_names(), g2 = typeof globalThis > "u" ? global : globalThis;
      module22.exports = function() {
        for (var out = [], i = 0; i < possibleNames.length; i++)
          typeof g2[possibleNames[i]] == "function" && (out[out.length] = possibleNames[i]);
        return out;
      };
    } });
    var require_which_typed_array = __commonJS3({ "../../node_modules/which-typed-array/index.js"(exports22, module22) {
      "use strict";
      var forEach = require_for_each(), availableTypedArrays = require_available_typed_arrays(), callBind = require_call_bind3(), callBound = require_callBound3(), gOPD = require_gopd2(), $toString = callBound("Object.prototype.toString"), hasToStringTag = require_shams22()(), g2 = typeof globalThis > "u" ? global : globalThis, typedArrays = availableTypedArrays(), $slice = callBound("String.prototype.slice"), getPrototypeOf = Object.getPrototypeOf, $indexOf = callBound("Array.prototype.indexOf", true) || function(array, value2) {
        for (var i = 0; i < array.length; i += 1)
          if (array[i] === value2)
            return i;
        return -1;
      }, cache = { __proto__: null };
      hasToStringTag && gOPD && getPrototypeOf ? forEach(typedArrays, function(typedArray) {
        var arr = new g2[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr), descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      }) : forEach(typedArrays, function(typedArray) {
        var arr = new g2[typedArray](), fn3 = arr.slice || arr.set;
        fn3 && (cache["$" + typedArray] = callBind(fn3));
      });
      var tryTypedArrays = function(value2) {
        var found = false;
        return forEach(cache, function(getter, typedArray) {
          if (!found)
            try {
              "$" + getter(value2) === typedArray && (found = $slice(typedArray, 1));
            } catch {
            }
        }), found;
      }, trySlices = function(value2) {
        var found = false;
        return forEach(cache, function(getter, name2) {
          if (!found)
            try {
              getter(value2), found = $slice(name2, 1);
            } catch {
            }
        }), found;
      };
      module22.exports = function(value2) {
        if (!value2 || typeof value2 != "object")
          return false;
        if (!hasToStringTag) {
          var tag = $slice($toString(value2), 8, -1);
          return $indexOf(typedArrays, tag) > -1 ? tag : tag !== "Object" ? false : trySlices(value2);
        }
        return gOPD ? tryTypedArrays(value2) : null;
      };
    } });
    var require_array_buffer_byte_length = __commonJS3({ "../../node_modules/array-buffer-byte-length/index.js"(exports22, module22) {
      "use strict";
      var callBound = require_callBound3(), $byteLength = callBound("ArrayBuffer.prototype.byteLength", true), isArrayBuffer = require_is_array_buffer();
      module22.exports = function(ab) {
        return isArrayBuffer(ab) ? $byteLength ? $byteLength(ab) : ab.byteLength : NaN;
      };
    } });
    var require_deep_equal = __commonJS3({ "../../node_modules/deep-equal/index.js"(exports22, module22) {
      "use strict";
      var assign = require_object(), callBound = require_callBound3(), flags = require_regexp_prototype(), GetIntrinsic = require_get_intrinsic3(), getIterator = require_node2(), getSideChannel = require_side_channel2(), is = require_object_is(), isArguments = require_is_arguments(), isArray2 = require_isarray(), isArrayBuffer = require_is_array_buffer(), isDate = require_is_date_object(), isRegex = require_is_regex2(), isSharedArrayBuffer = require_is_shared_array_buffer(), objectKeys = require_object_keys(), whichBoxedPrimitive = require_which_boxed_primitive(), whichCollection = require_which_collection(), whichTypedArray = require_which_typed_array(), byteLength = require_array_buffer_byte_length(), sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true), $getTime = callBound("Date.prototype.getTime"), gPO = Object.getPrototypeOf, $objToString = callBound("Object.prototype.toString"), $Set = GetIntrinsic("%Set%", true), $mapHas = callBound("Map.prototype.has", true), $mapGet = callBound("Map.prototype.get", true), $mapSize = callBound("Map.prototype.size", true), $setAdd = callBound("Set.prototype.add", true), $setDelete = callBound("Set.prototype.delete", true), $setHas = callBound("Set.prototype.has", true), $setSize = callBound("Set.prototype.size", true);
      function setHasEqualElement(set2, val1, opts, channel) {
        for (var i = getIterator(set2), result2; (result2 = i.next()) && !result2.done; )
          if (internalDeepEqual(val1, result2.value, opts, channel))
            return $setDelete(set2, result2.value), true;
        return false;
      }
      function findLooseMatchingPrimitives(prim) {
        if (typeof prim > "u")
          return null;
        if (typeof prim != "object")
          return typeof prim == "symbol" ? false : typeof prim == "string" || typeof prim == "number" ? +prim == +prim : true;
      }
      function mapMightHaveLoosePrim(a, b2, prim, item, opts, channel) {
        var altValue = findLooseMatchingPrimitives(prim);
        if (altValue != null)
          return altValue;
        var curB = $mapGet(b2, altValue), looseOpts = assign({}, opts, { strict: false });
        return typeof curB > "u" && !$mapHas(b2, altValue) || !internalDeepEqual(item, curB, looseOpts, channel) ? false : !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
      }
      function setMightHaveLoosePrim(a, b2, prim) {
        var altValue = findLooseMatchingPrimitives(prim);
        return altValue ?? ($setHas(b2, altValue) && !$setHas(a, altValue));
      }
      function mapHasEqualEntry(set2, map, key1, item1, opts, channel) {
        for (var i = getIterator(set2), result2, key2; (result2 = i.next()) && !result2.done; )
          if (key2 = result2.value, internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel))
            return $setDelete(set2, key2), true;
        return false;
      }
      function internalDeepEqual(actual, expected, options2, channel) {
        var opts = options2 || {};
        if (opts.strict ? is(actual, expected) : actual === expected)
          return true;
        var actualBoxed = whichBoxedPrimitive(actual), expectedBoxed = whichBoxedPrimitive(expected);
        if (actualBoxed !== expectedBoxed)
          return false;
        if (!actual || !expected || typeof actual != "object" && typeof expected != "object")
          return opts.strict ? is(actual, expected) : actual == expected;
        var hasActual = channel.has(actual), hasExpected = channel.has(expected), sentinel;
        if (hasActual && hasExpected) {
          if (channel.get(actual) === channel.get(expected))
            return true;
        } else
          sentinel = {};
        return hasActual || channel.set(actual, sentinel), hasExpected || channel.set(expected, sentinel), objEquiv(actual, expected, opts, channel);
      }
      function isBuffer(x) {
        return !x || typeof x != "object" || typeof x.length != "number" || typeof x.copy != "function" || typeof x.slice != "function" || x.length > 0 && typeof x[0] != "number" ? false : !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
      }
      function setEquiv(a, b2, opts, channel) {
        if ($setSize(a) !== $setSize(b2))
          return false;
        for (var iA = getIterator(a), iB = getIterator(b2), resultA, resultB, set2; (resultA = iA.next()) && !resultA.done; )
          if (resultA.value && typeof resultA.value == "object")
            set2 || (set2 = new $Set()), $setAdd(set2, resultA.value);
          else if (!$setHas(b2, resultA.value)) {
            if (opts.strict || !setMightHaveLoosePrim(a, b2, resultA.value))
              return false;
            set2 || (set2 = new $Set()), $setAdd(set2, resultA.value);
          }
        if (set2) {
          for (; (resultB = iB.next()) && !resultB.done; )
            if (resultB.value && typeof resultB.value == "object") {
              if (!setHasEqualElement(set2, resultB.value, opts.strict, channel))
                return false;
            } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set2, resultB.value, opts.strict, channel))
              return false;
          return $setSize(set2) === 0;
        }
        return true;
      }
      function mapEquiv(a, b2, opts, channel) {
        if ($mapSize(a) !== $mapSize(b2))
          return false;
        for (var iA = getIterator(a), iB = getIterator(b2), resultA, resultB, set2, key2, item1, item2; (resultA = iA.next()) && !resultA.done; )
          if (key2 = resultA.value[0], item1 = resultA.value[1], key2 && typeof key2 == "object")
            set2 || (set2 = new $Set()), $setAdd(set2, key2);
          else if (item2 = $mapGet(b2, key2), typeof item2 > "u" && !$mapHas(b2, key2) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict || !mapMightHaveLoosePrim(a, b2, key2, item1, opts, channel))
              return false;
            set2 || (set2 = new $Set()), $setAdd(set2, key2);
          }
        if (set2) {
          for (; (resultB = iB.next()) && !resultB.done; )
            if (key2 = resultB.value[0], item2 = resultB.value[1], key2 && typeof key2 == "object") {
              if (!mapHasEqualEntry(set2, a, key2, item2, opts, channel))
                return false;
            } else if (!opts.strict && (!a.has(key2) || !internalDeepEqual($mapGet(a, key2), item2, opts, channel)) && !mapHasEqualEntry(set2, a, key2, item2, assign({}, opts, { strict: false }), channel))
              return false;
          return $setSize(set2) === 0;
        }
        return true;
      }
      function objEquiv(a, b2, opts, channel) {
        var i, key2;
        if (typeof a != typeof b2 || a == null || b2 == null || $objToString(a) !== $objToString(b2) || isArguments(a) !== isArguments(b2))
          return false;
        var aIsArray = isArray2(a), bIsArray = isArray2(b2);
        if (aIsArray !== bIsArray)
          return false;
        var aIsError = a instanceof Error, bIsError = b2 instanceof Error;
        if (aIsError !== bIsError || (aIsError || bIsError) && (a.name !== b2.name || a.message !== b2.message))
          return false;
        var aIsRegex = isRegex(a), bIsRegex = isRegex(b2);
        if (aIsRegex !== bIsRegex || (aIsRegex || bIsRegex) && (a.source !== b2.source || flags(a) !== flags(b2)))
          return false;
        var aIsDate = isDate(a), bIsDate = isDate(b2);
        if (aIsDate !== bIsDate || (aIsDate || bIsDate) && $getTime(a) !== $getTime(b2) || opts.strict && gPO && gPO(a) !== gPO(b2))
          return false;
        var aWhich = whichTypedArray(a), bWhich = whichTypedArray(b2);
        if (aWhich !== bWhich)
          return false;
        if (aWhich || bWhich) {
          if (a.length !== b2.length)
            return false;
          for (i = 0; i < a.length; i++)
            if (a[i] !== b2[i])
              return false;
          return true;
        }
        var aIsBuffer = isBuffer(a), bIsBuffer = isBuffer(b2);
        if (aIsBuffer !== bIsBuffer)
          return false;
        if (aIsBuffer || bIsBuffer) {
          if (a.length !== b2.length)
            return false;
          for (i = 0; i < a.length; i++)
            if (a[i] !== b2[i])
              return false;
          return true;
        }
        var aIsArrayBuffer = isArrayBuffer(a), bIsArrayBuffer = isArrayBuffer(b2);
        if (aIsArrayBuffer !== bIsArrayBuffer)
          return false;
        if (aIsArrayBuffer || bIsArrayBuffer)
          return byteLength(a) !== byteLength(b2) ? false : typeof Uint8Array == "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b2), opts, channel);
        var aIsSAB = isSharedArrayBuffer(a), bIsSAB = isSharedArrayBuffer(b2);
        if (aIsSAB !== bIsSAB)
          return false;
        if (aIsSAB || bIsSAB)
          return sabByteLength(a) !== sabByteLength(b2) ? false : typeof Uint8Array == "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b2), opts, channel);
        if (typeof a != typeof b2)
          return false;
        var ka = objectKeys(a), kb = objectKeys(b2);
        if (ka.length !== kb.length)
          return false;
        for (ka.sort(), kb.sort(), i = ka.length - 1; i >= 0; i--)
          if (ka[i] != kb[i])
            return false;
        for (i = ka.length - 1; i >= 0; i--)
          if (key2 = ka[i], !internalDeepEqual(a[key2], b2[key2], opts, channel))
            return false;
        var aCollection = whichCollection(a), bCollection = whichCollection(b2);
        return aCollection !== bCollection ? false : aCollection === "Set" || bCollection === "Set" ? setEquiv(a, b2, opts, channel) : aCollection === "Map" ? mapEquiv(a, b2, opts, channel) : true;
      }
      module22.exports = function(a, b2, opts) {
        return internalDeepEqual(a, b2, opts, getSideChannel());
      };
    } });
    var require_elementRoleMap = __commonJS3({ "node_modules/aria-query/lib/elementRoleMap.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _deepEqual = _interopRequireDefault(require_deep_equal()), _iterationDecorator = _interopRequireDefault(require_iterationDecorator()), _rolesMap = _interopRequireDefault(require_rolesMap());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _slicedToArray(arr, i2) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _iterableToArrayLimit(arr, i2) {
        var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i != null) {
          var _arr = [], _n = true, _d = false, _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i2 && _arr.length === i2)); _n = true)
              ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              !_n && _i.return != null && _i.return();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i2 = 0, F = function() {
            };
            return { s: F, n: function() {
              return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
            }, e: function(_e2) {
              throw _e2;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e3) {
          didErr = true, err = _e3;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
          arr2[i2] = arr[i2];
        return arr2;
      }
      var elementRoles3 = [], keys2 = _rolesMap.default.keys();
      for (i = 0; i < keys2.length; i++)
        if (key2 = keys2[i], role = _rolesMap.default.get(key2), role)
          for (concepts = [].concat(role.baseConcepts, role.relatedConcepts), k = 0; k < concepts.length; k++)
            relation = concepts[k], relation.module === "HTML" && (concept = relation.concept, concept && function() {
              var conceptStr = JSON.stringify(concept), elementRoleRelation = elementRoles3.find(function(relation2) {
                return JSON.stringify(relation2[0]) === conceptStr;
              }), roles3 = void 0;
              elementRoleRelation ? roles3 = elementRoleRelation[1] : roles3 = [];
              for (var isUnique = true, _i = 0; _i < roles3.length; _i++)
                if (roles3[_i] === key2) {
                  isUnique = false;
                  break;
                }
              isUnique && roles3.push(key2), elementRoles3.push([concept, roles3]);
            }());
      var key2, role, concepts, relation, concept, k, i, elementRoleMap = { entries: function() {
        return elementRoles3;
      }, forEach: function(fn3) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper(elementRoles3), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
            fn3.call(thisArg, values, _key, elementRoles3);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }, get: function(key22) {
        var item = elementRoles3.find(function(tuple) {
          return (0, _deepEqual.default)(key22, tuple[0]);
        });
        return item && item[1];
      }, has: function(key22) {
        return !!elementRoleMap.get(key22);
      }, keys: function() {
        return elementRoles3.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key22 = _ref2[0];
          return key22;
        });
      }, values: function() {
        return elementRoles3.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      } }, _default = (0, _iterationDecorator.default)(elementRoleMap, elementRoleMap.entries());
      exports22.default = _default;
    } });
    var require_roleElementMap = __commonJS3({ "node_modules/aria-query/lib/roleElementMap.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = void 0;
      var _iterationDecorator = _interopRequireDefault(require_iterationDecorator()), _rolesMap = _interopRequireDefault(require_rolesMap());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _slicedToArray(arr, i2) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _iterableToArrayLimit(arr, i2) {
        var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i != null) {
          var _arr = [], _n = true, _d = false, _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i2 && _arr.length === i2)); _n = true)
              ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              !_n && _i.return != null && _i.return();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i2 = 0, F = function() {
            };
            return { s: F, n: function() {
              return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
            }, e: function(_e2) {
              throw _e2;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e3) {
          didErr = true, err = _e3;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
          arr2[i2] = arr[i2];
        return arr2;
      }
      var roleElement = [], keys2 = _rolesMap.default.keys(), _loop = function(i2) {
        var key2 = keys2[i2], role = _rolesMap.default.get(key2);
        if (role)
          for (var concepts = [].concat(role.baseConcepts, role.relatedConcepts), k = 0; k < concepts.length; k++) {
            var relation = concepts[k];
            if (relation.module === "HTML") {
              var concept = relation.concept;
              if (concept) {
                var roleElementRelation = roleElement.find(function(item) {
                  return item[0] === key2;
                }), relationConcepts = void 0;
                roleElementRelation ? relationConcepts = roleElementRelation[1] : relationConcepts = [], relationConcepts.push(concept), roleElement.push([key2, relationConcepts]);
              }
            }
          }
      };
      for (i = 0; i < keys2.length; i++)
        _loop(i);
      var i, roleElementMap = { entries: function() {
        return roleElement;
      }, forEach: function(fn3) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper(roleElement), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key2 = _step$value[0], values = _step$value[1];
            fn3.call(thisArg, values, key2, roleElement);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }, get: function(key2) {
        var item = roleElement.find(function(tuple) {
          return tuple[0] === key2;
        });
        return item && item[1];
      }, has: function(key2) {
        return !!roleElementMap.get(key2);
      }, keys: function() {
        return roleElement.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
          return key2;
        });
      }, values: function() {
        return roleElement.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      } }, _default = (0, _iterationDecorator.default)(roleElementMap, roleElementMap.entries());
      exports22.default = _default;
    } });
    var require_lib2 = __commonJS3({ "node_modules/aria-query/lib/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.roles = exports22.roleElements = exports22.elementRoles = exports22.dom = exports22.aria = void 0;
      var _ariaPropsMap = _interopRequireDefault(require_ariaPropsMap()), _domMap = _interopRequireDefault(require_domMap()), _rolesMap = _interopRequireDefault(require_rolesMap()), _elementRoleMap = _interopRequireDefault(require_elementRoleMap()), _roleElementMap = _interopRequireDefault(require_roleElementMap());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var aria = _ariaPropsMap.default;
      exports22.aria = aria;
      var dom = _domMap.default;
      exports22.dom = dom;
      var roles3 = _rolesMap.default;
      exports22.roles = roles3;
      var elementRoles3 = _elementRoleMap.default;
      exports22.elementRoles = elementRoles3;
      var roleElements2 = _roleElementMap.default;
      exports22.roleElements = roleElements2;
    } });
    var require_color_name = __commonJS3({ "../../node_modules/color-name/index.js"(exports22, module22) {
      "use strict";
      module22.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
    } });
    var require_conversions = __commonJS3({ "../../node_modules/color-convert/conversions.js"(exports22, module22) {
      "use strict";
      var cssKeywords = require_color_name(), reverseKeywords = {};
      for (let key2 of Object.keys(cssKeywords))
        reverseKeywords[cssKeywords[key2]] = key2;
      var convert = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
      module22.exports = convert;
      for (let model of Object.keys(convert)) {
        if (!("channels" in convert[model]))
          throw new Error("missing channels property: " + model);
        if (!("labels" in convert[model]))
          throw new Error("missing channel labels property: " + model);
        if (convert[model].labels.length !== convert[model].channels)
          throw new Error("channel and label counts mismatch: " + model);
        let { channels, labels } = convert[model];
        delete convert[model].channels, delete convert[model].labels, Object.defineProperty(convert[model], "channels", { value: channels }), Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        let r = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, min = Math.min(r, g2, b2), max = Math.max(r, g2, b2), delta = max - min, h, s;
        max === min ? h = 0 : r === max ? h = (g2 - b2) / delta : g2 === max ? h = 2 + (b2 - r) / delta : b2 === max && (h = 4 + (r - g2) / delta), h = Math.min(h * 60, 360), h < 0 && (h += 360);
        let l = (min + max) / 2;
        return max === min ? s = 0 : l <= 0.5 ? s = delta / (max + min) : s = delta / (2 - max - min), [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif, gdif, bdif, h, s, r = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, v2 = Math.max(r, g2, b2), diff2 = v2 - Math.min(r, g2, b2), diffc = function(c) {
          return (v2 - c) / 6 / diff2 + 1 / 2;
        };
        return diff2 === 0 ? (h = 0, s = 0) : (s = diff2 / v2, rdif = diffc(r), gdif = diffc(g2), bdif = diffc(b2), r === v2 ? h = bdif - gdif : g2 === v2 ? h = 1 / 3 + rdif - bdif : b2 === v2 && (h = 2 / 3 + gdif - rdif), h < 0 ? h += 1 : h > 1 && (h -= 1)), [h * 360, s * 100, v2 * 100];
      };
      convert.rgb.hwb = function(rgb) {
        let r = rgb[0], g2 = rgb[1], b2 = rgb[2], h = convert.rgb.hsl(rgb)[0], w = 1 / 255 * Math.min(r, Math.min(g2, b2));
        return b2 = 1 - 1 / 255 * Math.max(r, Math.max(g2, b2)), [h, w * 100, b2 * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        let r = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, k = Math.min(1 - r, 1 - g2, 1 - b2), c = (1 - r - k) / (1 - k) || 0, m2 = (1 - g2 - k) / (1 - k) || 0, y2 = (1 - b2 - k) / (1 - k) || 0;
        return [c * 100, m2 * 100, y2 * 100, k * 100];
      };
      function comparativeDistance(x, y2) {
        return (x[0] - y2[0]) ** 2 + (x[1] - y2[1]) ** 2 + (x[2] - y2[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        let reversed = reverseKeywords[rgb];
        if (reversed)
          return reversed;
        let currentClosestDistance = 1 / 0, currentClosestKeyword;
        for (let keyword of Object.keys(cssKeywords)) {
          let value2 = cssKeywords[keyword], distance = comparativeDistance(rgb, value2);
          distance < currentClosestDistance && (currentClosestDistance = distance, currentClosestKeyword = keyword);
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92, g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92, b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
        let x = r * 0.4124 + g2 * 0.3576 + b2 * 0.1805, y2 = r * 0.2126 + g2 * 0.7152 + b2 * 0.0722, z = r * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
        return [x * 100, y2 * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        let xyz = convert.rgb.xyz(rgb), x = xyz[0], y2 = xyz[1], z = xyz[2];
        x /= 95.047, y2 /= 100, z /= 108.883, x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116, y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116, z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        let l = 116 * y2 - 16, a = 500 * (x - y2), b2 = 200 * (y2 - z);
        return [l, a, b2];
      };
      convert.hsl.rgb = function(hsl) {
        let h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t2, t3, val;
        if (s === 0)
          return val = l * 255, [val, val, val];
        l < 0.5 ? t2 = l * (1 + s) : t2 = l + s - l * s;
        let t1 = 2 * l - t2, rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++)
          t3 = h + 1 / 3 * -(i - 1), t3 < 0 && t3++, t3 > 1 && t3--, 6 * t3 < 1 ? val = t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? val = t2 : 3 * t3 < 2 ? val = t1 + (t2 - t1) * (2 / 3 - t3) * 6 : val = t1, rgb[i] = val * 255;
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        let h = hsl[0], s = hsl[1] / 100, l = hsl[2] / 100, smin = s, lmin = Math.max(l, 0.01);
        l *= 2, s *= l <= 1 ? l : 2 - l, smin *= lmin <= 1 ? lmin : 2 - lmin;
        let v2 = (l + s) / 2, sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v2 * 100];
      };
      convert.hsv.rgb = function(hsv) {
        let h = hsv[0] / 60, s = hsv[1] / 100, v2 = hsv[2] / 100, hi = Math.floor(h) % 6, f2 = h - Math.floor(h), p2 = 255 * v2 * (1 - s), q = 255 * v2 * (1 - s * f2), t = 255 * v2 * (1 - s * (1 - f2));
        switch (v2 *= 255, hi) {
          case 0:
            return [v2, t, p2];
          case 1:
            return [q, v2, p2];
          case 2:
            return [p2, v2, t];
          case 3:
            return [p2, q, v2];
          case 4:
            return [t, p2, v2];
          case 5:
            return [v2, p2, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        let h = hsv[0], s = hsv[1] / 100, v2 = hsv[2] / 100, vmin = Math.max(v2, 0.01), sl, l;
        l = (2 - s) * v2;
        let lmin = (2 - s) * vmin;
        return sl = s * vmin, sl /= lmin <= 1 ? lmin : 2 - lmin, sl = sl || 0, l /= 2, [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        let h = hwb[0] / 360, wh = hwb[1] / 100, bl = hwb[2] / 100, ratio = wh + bl, f2;
        ratio > 1 && (wh /= ratio, bl /= ratio);
        let i = Math.floor(6 * h), v2 = 1 - bl;
        f2 = 6 * h - i, i & 1 && (f2 = 1 - f2);
        let n = wh + f2 * (v2 - wh), r, g2, b2;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v2, g2 = n, b2 = wh;
            break;
          case 1:
            r = n, g2 = v2, b2 = wh;
            break;
          case 2:
            r = wh, g2 = v2, b2 = n;
            break;
          case 3:
            r = wh, g2 = n, b2 = v2;
            break;
          case 4:
            r = n, g2 = wh, b2 = v2;
            break;
          case 5:
            r = v2, g2 = wh, b2 = n;
            break;
        }
        return [r * 255, g2 * 255, b2 * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        let c = cmyk[0] / 100, m2 = cmyk[1] / 100, y2 = cmyk[2] / 100, k = cmyk[3] / 100, r = 1 - Math.min(1, c * (1 - k) + k), g2 = 1 - Math.min(1, m2 * (1 - k) + k), b2 = 1 - Math.min(1, y2 * (1 - k) + k);
        return [r * 255, g2 * 255, b2 * 255];
      };
      convert.xyz.rgb = function(xyz) {
        let x = xyz[0] / 100, y2 = xyz[1] / 100, z = xyz[2] / 100, r, g2, b2;
        return r = x * 3.2406 + y2 * -1.5372 + z * -0.4986, g2 = x * -0.9689 + y2 * 1.8758 + z * 0.0415, b2 = x * 0.0557 + y2 * -0.204 + z * 1.057, r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92, g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92, b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92, r = Math.min(Math.max(0, r), 1), g2 = Math.min(Math.max(0, g2), 1), b2 = Math.min(Math.max(0, b2), 1), [r * 255, g2 * 255, b2 * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0], y2 = xyz[1], z = xyz[2];
        x /= 95.047, y2 /= 100, z /= 108.883, x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116, y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116, z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        let l = 116 * y2 - 16, a = 500 * (x - y2), b2 = 200 * (y2 - z);
        return [l, a, b2];
      };
      convert.lab.xyz = function(lab) {
        let l = lab[0], a = lab[1], b2 = lab[2], x, y2, z;
        y2 = (l + 16) / 116, x = a / 500 + y2, z = y2 - b2 / 200;
        let y22 = y2 ** 3, x2 = x ** 3, z2 = z ** 3;
        return y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787, x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787, z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787, x *= 95.047, y2 *= 100, z *= 108.883, [x, y2, z];
      };
      convert.lab.lch = function(lab) {
        let l = lab[0], a = lab[1], b2 = lab[2], h;
        h = Math.atan2(b2, a) * 360 / 2 / Math.PI, h < 0 && (h += 360);
        let c = Math.sqrt(a * a + b2 * b2);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        let l = lch[0], c = lch[1], hr = lch[2] / 360 * 2 * Math.PI, a = c * Math.cos(hr), b2 = c * Math.sin(hr);
        return [l, a, b2];
      };
      convert.rgb.ansi16 = function(args2, saturation = null) {
        let [r, g2, b2] = args2, value2 = saturation === null ? convert.rgb.hsv(args2)[2] : saturation;
        if (value2 = Math.round(value2 / 50), value2 === 0)
          return 30;
        let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r / 255));
        return value2 === 2 && (ansi += 60), ansi;
      };
      convert.hsv.ansi16 = function(args2) {
        return convert.rgb.ansi16(convert.hsv.rgb(args2), args2[2]);
      };
      convert.rgb.ansi256 = function(args2) {
        let r = args2[0], g2 = args2[1], b2 = args2[2];
        return r === g2 && g2 === b2 ? r < 8 ? 16 : r > 248 ? 231 : Math.round((r - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
      };
      convert.ansi16.rgb = function(args2) {
        let color = args2 % 10;
        if (color === 0 || color === 7)
          return args2 > 50 && (color += 3.5), color = color / 10.5 * 255, [color, color, color];
        let mult = (~~(args2 > 50) + 1) * 0.5, r = (color & 1) * mult * 255, g2 = (color >> 1 & 1) * mult * 255, b2 = (color >> 2 & 1) * mult * 255;
        return [r, g2, b2];
      };
      convert.ansi256.rgb = function(args2) {
        if (args2 >= 232) {
          let c = (args2 - 232) * 10 + 8;
          return [c, c, c];
        }
        args2 -= 16;
        let rem, r = Math.floor(args2 / 36) / 5 * 255, g2 = Math.floor((rem = args2 % 36) / 6) / 5 * 255, b2 = rem % 6 / 5 * 255;
        return [r, g2, b2];
      };
      convert.rgb.hex = function(args2) {
        let string2 = (((Math.round(args2[0]) & 255) << 16) + ((Math.round(args2[1]) & 255) << 8) + (Math.round(args2[2]) & 255)).toString(16).toUpperCase();
        return "000000".substring(string2.length) + string2;
      };
      convert.hex.rgb = function(args2) {
        let match = args2.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match)
          return [0, 0, 0];
        let colorString = match[0];
        match[0].length === 3 && (colorString = colorString.split("").map((char) => char + char).join(""));
        let integer = parseInt(colorString, 16), r = integer >> 16 & 255, g2 = integer >> 8 & 255, b2 = integer & 255;
        return [r, g2, b2];
      };
      convert.rgb.hcg = function(rgb) {
        let r = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, max = Math.max(Math.max(r, g2), b2), min = Math.min(Math.min(r, g2), b2), chroma = max - min, grayscale, hue;
        return chroma < 1 ? grayscale = min / (1 - chroma) : grayscale = 0, chroma <= 0 ? hue = 0 : max === r ? hue = (g2 - b2) / chroma % 6 : max === g2 ? hue = 2 + (b2 - r) / chroma : hue = 4 + (r - g2) / chroma, hue /= 6, hue %= 1, [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        let s = hsl[1] / 100, l = hsl[2] / 100, c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l), f2 = 0;
        return c < 1 && (f2 = (l - 0.5 * c) / (1 - c)), [hsl[0], c * 100, f2 * 100];
      };
      convert.hsv.hcg = function(hsv) {
        let s = hsv[1] / 100, v2 = hsv[2] / 100, c = s * v2, f2 = 0;
        return c < 1 && (f2 = (v2 - c) / (1 - c)), [hsv[0], c * 100, f2 * 100];
      };
      convert.hcg.rgb = function(hcg) {
        let h = hcg[0] / 360, c = hcg[1] / 100, g2 = hcg[2] / 100;
        if (c === 0)
          return [g2 * 255, g2 * 255, g2 * 255];
        let pure = [0, 0, 0], hi = h % 1 * 6, v2 = hi % 1, w = 1 - v2, mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1, pure[1] = v2, pure[2] = 0;
            break;
          case 1:
            pure[0] = w, pure[1] = 1, pure[2] = 0;
            break;
          case 2:
            pure[0] = 0, pure[1] = 1, pure[2] = v2;
            break;
          case 3:
            pure[0] = 0, pure[1] = w, pure[2] = 1;
            break;
          case 4:
            pure[0] = v2, pure[1] = 0, pure[2] = 1;
            break;
          default:
            pure[0] = 1, pure[1] = 0, pure[2] = w;
        }
        return mg = (1 - c) * g2, [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
      };
      convert.hcg.hsv = function(hcg) {
        let c = hcg[1] / 100, g2 = hcg[2] / 100, v2 = c + g2 * (1 - c), f2 = 0;
        return v2 > 0 && (f2 = c / v2), [hcg[0], f2 * 100, v2 * 100];
      };
      convert.hcg.hsl = function(hcg) {
        let c = hcg[1] / 100, l = hcg[2] / 100 * (1 - c) + 0.5 * c, s = 0;
        return l > 0 && l < 0.5 ? s = c / (2 * l) : l >= 0.5 && l < 1 && (s = c / (2 * (1 - l))), [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        let c = hcg[1] / 100, g2 = hcg[2] / 100, v2 = c + g2 * (1 - c);
        return [hcg[0], (v2 - c) * 100, (1 - v2) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        let w = hwb[1] / 100, v2 = 1 - hwb[2] / 100, c = v2 - w, g2 = 0;
        return c < 1 && (g2 = (v2 - c) / (1 - c)), [hwb[0], c * 100, g2 * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args2) {
        return [args2[0] / 100 * 255, args2[0] / 100 * 255, args2[0] / 100 * 255];
      };
      convert.gray.hsl = function(args2) {
        return [0, 0, args2[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        let val = Math.round(gray[0] / 100 * 255) & 255, string2 = ((val << 16) + (val << 8) + val).toString(16).toUpperCase();
        return "000000".substring(string2.length) + string2;
      };
      convert.rgb.gray = function(rgb) {
        return [(rgb[0] + rgb[1] + rgb[2]) / 3 / 255 * 100];
      };
    } });
    var require_route = __commonJS3({ "../../node_modules/color-convert/route.js"(exports22, module22) {
      "use strict";
      var conversions = require_conversions();
      function buildGraph() {
        let graph = {}, models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++)
          graph[models[i]] = { distance: -1, parent: null };
        return graph;
      }
      function deriveBFS(fromModel) {
        let graph = buildGraph(), queue = [fromModel];
        for (graph[fromModel].distance = 0; queue.length; ) {
          let current = queue.pop(), adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            let adjacent = adjacents[i], node = graph[adjacent];
            node.distance === -1 && (node.distance = graph[current].distance + 1, node.parent = current, queue.unshift(adjacent));
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args2) {
          return to(from(args2));
        };
      }
      function wrapConversion(toModel, graph) {
        let path = [graph[toModel].parent, toModel], fn3 = conversions[graph[toModel].parent][toModel], cur = graph[toModel].parent;
        for (; graph[cur].parent; )
          path.unshift(graph[cur].parent), fn3 = link(conversions[graph[cur].parent][cur], fn3), cur = graph[cur].parent;
        return fn3.conversion = path, fn3;
      }
      module22.exports = function(fromModel) {
        let graph = deriveBFS(fromModel), conversion = {}, models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          let toModel = models[i];
          graph[toModel].parent !== null && (conversion[toModel] = wrapConversion(toModel, graph));
        }
        return conversion;
      };
    } });
    var require_color_convert = __commonJS3({ "../../node_modules/color-convert/index.js"(exports22, module22) {
      "use strict";
      var conversions = require_conversions(), route = require_route(), convert = {}, models = Object.keys(conversions);
      function wrapRaw(fn3) {
        let wrappedFn = function(...args2) {
          let arg0 = args2[0];
          return arg0 == null ? arg0 : (arg0.length > 1 && (args2 = arg0), fn3(args2));
        };
        return "conversion" in fn3 && (wrappedFn.conversion = fn3.conversion), wrappedFn;
      }
      function wrapRounded(fn3) {
        let wrappedFn = function(...args2) {
          let arg0 = args2[0];
          if (arg0 == null)
            return arg0;
          arg0.length > 1 && (args2 = arg0);
          let result2 = fn3(args2);
          if (typeof result2 == "object")
            for (let len = result2.length, i = 0; i < len; i++)
              result2[i] = Math.round(result2[i]);
          return result2;
        };
        return "conversion" in fn3 && (wrappedFn.conversion = fn3.conversion), wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {}, Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels }), Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        let routes = route(fromModel);
        Object.keys(routes).forEach((toModel) => {
          let fn3 = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn3), convert[fromModel][toModel].raw = wrapRaw(fn3);
        });
      });
      module22.exports = convert;
    } });
    var require_ansi_styles2 = __commonJS3({ "../../node_modules/ansi-styles/index.js"(exports22, module22) {
      "use strict";
      var wrapAnsi16 = (fn3, offset) => (...args2) => `\x1B[${fn3(...args2) + offset}m`, wrapAnsi256 = (fn3, offset) => (...args2) => {
        let code = fn3(...args2);
        return `\x1B[${38 + offset};5;${code}m`;
      }, wrapAnsi16m = (fn3, offset) => (...args2) => {
        let rgb = fn3(...args2);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      }, ansi2ansi = (n) => n, rgb2rgb = (r, g2, b2) => [r, g2, b2], setLazyProperty = (object, property, get2) => {
        Object.defineProperty(object, property, { get: () => {
          let value2 = get2();
          return Object.defineProperty(object, property, { value: value2, enumerable: true, configurable: true }), value2;
        }, enumerable: true, configurable: true });
      }, colorConvert, makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        colorConvert === void 0 && (colorConvert = require_color_convert());
        let offset = isBackground ? 10 : 0, styles2 = {};
        for (let [sourceSpace, suite] of Object.entries(colorConvert)) {
          let name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          sourceSpace === targetSpace ? styles2[name2] = wrap(identity, offset) : typeof suite == "object" && (styles2[name2] = wrap(suite[targetSpace], offset));
        }
        return styles2;
      };
      function assembleStyles() {
        let codes = /* @__PURE__ */ new Map(), styles2 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        styles2.color.gray = styles2.color.blackBright, styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright, styles2.color.grey = styles2.color.blackBright, styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
        for (let [groupName, group] of Object.entries(styles2)) {
          for (let [styleName, style] of Object.entries(group))
            styles2[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles2[styleName], codes.set(style[0], style[1]);
          Object.defineProperty(styles2, groupName, { value: group, enumerable: false });
        }
        return Object.defineProperty(styles2, "codes", { value: codes, enumerable: false }), styles2.color.close = "\x1B[39m", styles2.bgColor.close = "\x1B[49m", setLazyProperty(styles2.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false)), setLazyProperty(styles2.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false)), setLazyProperty(styles2.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false)), setLazyProperty(styles2.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true)), setLazyProperty(styles2.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true)), setLazyProperty(styles2.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true)), styles2;
      }
      Object.defineProperty(module22, "exports", { enumerable: true, get: assembleStyles });
    } });
    var require_has_flag = __commonJS3({ "../../node_modules/has-flag/index.js"(exports22, module22) {
      "use strict";
      module22.exports = (flag, argv = process.argv) => {
        let prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
      };
    } });
    var require_supports_color = __commonJS3({ "../../node_modules/supports-color/index.js"(exports22, module22) {
      "use strict";
      var os = require("os"), tty = require("tty"), hasFlag = require_has_flag(), { env } = process, forceColor;
      hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1);
      "FORCE_COLOR" in env && (env.FORCE_COLOR === "true" ? forceColor = 1 : env.FORCE_COLOR === "false" ? forceColor = 0 : forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3));
      function translateLevel(level) {
        return level === 0 ? false : { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
      }
      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0)
          return 0;
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor"))
          return 3;
        if (hasFlag("color=256"))
          return 2;
        if (haveStream && !streamIsTTY && forceColor === void 0)
          return 0;
        let min = forceColor || 0;
        if (env.TERM === "dumb")
          return min;
        if (process.platform === "win32") {
          let osRelease = os.release().split(".");
          return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
        }
        if ("CI" in env)
          return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship" ? 1 : min;
        if ("TEAMCITY_VERSION" in env)
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
        if (env.COLORTERM === "truecolor")
          return 3;
        if ("TERM_PROGRAM" in env) {
          let version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version2 >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
      }
      function getSupportLevel(stream) {
        let level = supportsColor(stream, stream && stream.isTTY);
        return translateLevel(level);
      }
      module22.exports = { supportsColor: getSupportLevel, stdout: translateLevel(supportsColor(true, tty.isatty(1))), stderr: translateLevel(supportsColor(true, tty.isatty(2))) };
    } });
    var require_util = __commonJS3({ "node_modules/@testing-library/jest-dom/node_modules/chalk/source/util.js"(exports22, module22) {
      "use strict";
      var stringReplaceAll = (string2, substring, replacer3) => {
        let index = string2.indexOf(substring);
        if (index === -1)
          return string2;
        let substringLength = substring.length, endIndex = 0, returnValue = "";
        do
          returnValue += string2.substr(endIndex, index - endIndex) + substring + replacer3, endIndex = index + substringLength, index = string2.indexOf(substring, endIndex);
        while (index !== -1);
        return returnValue += string2.substr(endIndex), returnValue;
      }, stringEncaseCRLFWithFirstIndex = (string2, prefix, postfix, index) => {
        let endIndex = 0, returnValue = "";
        do {
          let gotCR = string2[index - 1] === "\r";
          returnValue += string2.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? `\r
` : `
`) + postfix, endIndex = index + 1, index = string2.indexOf(`
`, endIndex);
        } while (index !== -1);
        return returnValue += string2.substr(endIndex), returnValue;
      };
      module22.exports = { stringReplaceAll, stringEncaseCRLFWithFirstIndex };
    } });
    var require_templates = __commonJS3({ "node_modules/@testing-library/jest-dom/node_modules/chalk/source/templates.js"(exports22, module22) {
      "use strict";
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi, STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g, STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/, ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi, ESCAPES = /* @__PURE__ */ new Map([["n", `
`], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
      function unescape2(c) {
        let u2 = c[0] === "u", bracket = c[1] === "{";
        return u2 && !bracket && c.length === 5 || c[0] === "x" && c.length === 3 ? String.fromCharCode(parseInt(c.slice(1), 16)) : u2 && bracket ? String.fromCodePoint(parseInt(c.slice(2, -1), 16)) : ESCAPES.get(c) || c;
      }
      function parseArguments(name2, arguments_) {
        let results = [], chunks = arguments_.trim().split(/\s*,\s*/g), matches3;
        for (let chunk of chunks) {
          let number = Number(chunk);
          if (!Number.isNaN(number))
            results.push(number);
          else if (matches3 = chunk.match(STRING_REGEX))
            results.push(matches3[2].replace(ESCAPE_REGEX, (m2, escape3, character) => escape3 ? unescape2(escape3) : character));
          else
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        let results = [], matches3;
        for (; (matches3 = STYLE_REGEX.exec(style)) !== null; ) {
          let name2 = matches3[1];
          if (matches3[2]) {
            let args2 = parseArguments(name2, matches3[2]);
            results.push([name2].concat(args2));
          } else
            results.push([name2]);
        }
        return results;
      }
      function buildStyle(chalk3, styles2) {
        let enabled = {};
        for (let layer of styles2)
          for (let style of layer.styles)
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
        let current = chalk3;
        for (let [styleName, styles3] of Object.entries(enabled))
          if (Array.isArray(styles3)) {
            if (!(styleName in current))
              throw new Error(`Unknown Chalk style: ${styleName}`);
            current = styles3.length > 0 ? current[styleName](...styles3) : current[styleName];
          }
        return current;
      }
      module22.exports = (chalk3, temporary) => {
        let styles2 = [], chunks = [], chunk = [];
        if (temporary.replace(TEMPLATE_REGEX, (m2, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter)
            chunk.push(unescape2(escapeCharacter));
          else if (style) {
            let string2 = chunk.join("");
            chunk = [], chunks.push(styles2.length === 0 ? string2 : buildStyle(chalk3, styles2)(string2)), styles2.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles2.length === 0)
              throw new Error("Found extraneous } in Chalk template literal");
            chunks.push(buildStyle(chalk3, styles2)(chunk.join(""))), chunk = [], styles2.pop();
          } else
            chunk.push(character);
        }), chunks.push(chunk.join("")), styles2.length > 0) {
          let errMsg = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    } });
    var require_source = __commonJS3({ "node_modules/@testing-library/jest-dom/node_modules/chalk/source/index.js"(exports22, module22) {
      "use strict";
      var ansiStyles = require_ansi_styles2(), { stdout: stdoutColor, stderr: stderrColor } = require_supports_color(), { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = require_util(), levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"], styles2 = /* @__PURE__ */ Object.create(null), applyOptions = (object, options2 = {}) => {
        if (options2.level > 3 || options2.level < 0)
          throw new Error("The `level` option should be an integer from 0 to 3");
        let colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options2.level === void 0 ? colorLevel : options2.level;
      }, ChalkClass = class {
        constructor(options2) {
          return chalkFactory(options2);
        }
      }, chalkFactory = (options2) => {
        let chalk4 = {};
        return applyOptions(chalk4, options2), chalk4.template = (...arguments_) => chalkTag(chalk4.template, ...arguments_), Object.setPrototypeOf(chalk4, Chalk.prototype), Object.setPrototypeOf(chalk4.template, chalk4), chalk4.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        }, chalk4.template.Instance = ChalkClass, chalk4.template;
      };
      function Chalk(options2) {
        return chalkFactory(options2);
      }
      for (let [styleName, style] of Object.entries(ansiStyles))
        styles2[styleName] = { get() {
          let builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          return Object.defineProperty(this, styleName, { value: builder }), builder;
        } };
      styles2.visible = { get() {
        let builder = createBuilder(this, this._styler, true);
        return Object.defineProperty(this, "visible", { value: builder }), builder;
      } };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (let model of usedModels)
        styles2[model] = { get() {
          let { level } = this;
          return function(...arguments_) {
            let styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        } };
      for (let model of usedModels) {
        let bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles2[bgModel] = { get() {
          let { level } = this;
          return function(...arguments_) {
            let styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        } };
      }
      var proto = Object.defineProperties(() => {
      }, { ...styles2, level: { enumerable: true, get() {
        return this._generator.level;
      }, set(level) {
        this._generator.level = level;
      } } }), createStyler = (open, close, parent) => {
        let openAll, closeAll;
        return parent === void 0 ? (openAll = open, closeAll = close) : (openAll = parent.openAll + open, closeAll = close + parent.closeAll), { open, close, openAll, closeAll, parent };
      }, createBuilder = (self2, _styler, _isEmpty) => {
        let builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        return builder.__proto__ = proto, builder._generator = self2, builder._styler = _styler, builder._isEmpty = _isEmpty, builder;
      }, applyStyle = (self2, string2) => {
        if (self2.level <= 0 || !string2)
          return self2._isEmpty ? "" : string2;
        let styler = self2._styler;
        if (styler === void 0)
          return string2;
        let { openAll, closeAll } = styler;
        if (string2.indexOf("\x1B") !== -1)
          for (; styler !== void 0; )
            string2 = stringReplaceAll(string2, styler.close, styler.open), styler = styler.parent;
        let lfIndex = string2.indexOf(`
`);
        return lfIndex !== -1 && (string2 = stringEncaseCRLFWithFirstIndex(string2, closeAll, openAll, lfIndex)), openAll + string2 + closeAll;
      }, template, chalkTag = (chalk4, ...strings) => {
        let [firstString] = strings;
        if (!Array.isArray(firstString))
          return strings.join(" ");
        let arguments_ = strings.slice(1), parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++)
          parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
        return template === void 0 && (template = require_templates()), template(chalk4, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles2);
      var chalk3 = Chalk();
      chalk3.supportsColor = stdoutColor;
      chalk3.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk3.stderr.supportsColor = stderrColor;
      chalk3.Level = { None: 0, Basic: 1, Ansi256: 2, TrueColor: 3, 0: "None", 1: "Basic", 2: "Ansi256", 3: "TrueColor" };
      module22.exports = chalk3;
    } });
    var require_isEqualWith = __commonJS3({ "../../node_modules/lodash/isEqualWith.js"(exports22, module22) {
      "use strict";
      var baseIsEqual = require_baseIsEqual2();
      function isEqualWith2(value2, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : void 0;
        var result2 = customizer ? customizer(value2, other) : void 0;
        return result2 === void 0 ? baseIsEqual(value2, other, void 0, customizer) : !!result2;
      }
      module22.exports = isEqualWith2;
    } });
    var require_baseFindIndex = __commonJS3({ "../../node_modules/lodash/_baseFindIndex.js"(exports22, module22) {
      "use strict";
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        for (var length = array.length, index = fromIndex + (fromRight ? 1 : -1); fromRight ? index-- : ++index < length; )
          if (predicate(array[index], index, array))
            return index;
        return -1;
      }
      module22.exports = baseFindIndex;
    } });
    var require_baseIsNaN = __commonJS3({ "../../node_modules/lodash/_baseIsNaN.js"(exports22, module22) {
      "use strict";
      function baseIsNaN(value2) {
        return value2 !== value2;
      }
      module22.exports = baseIsNaN;
    } });
    var require_strictIndexOf = __commonJS3({ "../../node_modules/lodash/_strictIndexOf.js"(exports22, module22) {
      "use strict";
      function strictIndexOf(array, value2, fromIndex) {
        for (var index = fromIndex - 1, length = array.length; ++index < length; )
          if (array[index] === value2)
            return index;
        return -1;
      }
      module22.exports = strictIndexOf;
    } });
    var require_baseIndexOf = __commonJS3({ "../../node_modules/lodash/_baseIndexOf.js"(exports22, module22) {
      "use strict";
      var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array, value2, fromIndex) {
        return value2 === value2 ? strictIndexOf(array, value2, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      module22.exports = baseIndexOf;
    } });
    var require_arrayIncludes = __commonJS3({ "../../node_modules/lodash/_arrayIncludes.js"(exports22, module22) {
      "use strict";
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array, value2) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value2, 0) > -1;
      }
      module22.exports = arrayIncludes;
    } });
    var require_arrayIncludesWith = __commonJS3({ "../../node_modules/lodash/_arrayIncludesWith.js"(exports22, module22) {
      "use strict";
      function arrayIncludesWith(array, value2, comparator) {
        for (var index = -1, length = array == null ? 0 : array.length; ++index < length; )
          if (comparator(value2, array[index]))
            return true;
        return false;
      }
      module22.exports = arrayIncludesWith;
    } });
    var require_noop = __commonJS3({ "../../node_modules/lodash/noop.js"(exports22, module22) {
      "use strict";
      function noop2() {
      }
      module22.exports = noop2;
    } });
    var require_createSet = __commonJS3({ "../../node_modules/lodash/_createSet.js"(exports22, module22) {
      "use strict";
      var Set2 = require_Set2(), noop2 = require_noop(), setToArray = require_setToArray2(), INFINITY3 = 1 / 0, createSet = Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY3 ? function(values) {
        return new Set2(values);
      } : noop2;
      module22.exports = createSet;
    } });
    var require_baseUniq = __commonJS3({ "../../node_modules/lodash/_baseUniq.js"(exports22, module22) {
      "use strict";
      var SetCache = require_SetCache2(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas2(), createSet = require_createSet(), setToArray = require_setToArray2(), LARGE_ARRAY_SIZE = 200;
      function baseUniq(array, iteratee, comparator) {
        var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
        if (comparator)
          isCommon = false, includes = arrayIncludesWith;
        else if (length >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee ? null : createSet(array);
          if (set2)
            return setToArray(set2);
          isCommon = false, includes = cacheHas, seen = new SetCache();
        } else
          seen = iteratee ? [] : result2;
        outer:
          for (; ++index < length; ) {
            var value2 = array[index], computed = iteratee ? iteratee(value2) : value2;
            if (value2 = comparator || value2 !== 0 ? value2 : 0, isCommon && computed === computed) {
              for (var seenIndex = seen.length; seenIndex--; )
                if (seen[seenIndex] === computed)
                  continue outer;
              iteratee && seen.push(computed), result2.push(value2);
            } else
              includes(seen, computed, comparator) || (seen !== result2 && seen.push(computed), result2.push(value2));
          }
        return result2;
      }
      module22.exports = baseUniq;
    } });
    var require_uniq = __commonJS3({ "../../node_modules/lodash/uniq.js"(exports22, module22) {
      "use strict";
      var baseUniq = require_baseUniq();
      function uniq2(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      module22.exports = uniq2;
    } });
    var require_css_escape = __commonJS3({ "../../node_modules/css.escape/css.escape.js"(exports22, module22) {
      "use strict";
      (function(root3, factory) {
        typeof exports22 == "object" ? module22.exports = factory(root3) : typeof define == "function" && define.amd ? define([], factory.bind(root3, root3)) : factory(root3);
      })(typeof global < "u" ? global : exports22, function(root3) {
        if (root3.CSS && root3.CSS.escape)
          return root3.CSS.escape;
        var cssEscape = function(value2) {
          if (arguments.length == 0)
            throw new TypeError("`CSS.escape` requires an argument.");
          for (var string2 = String(value2), length = string2.length, index = -1, codeUnit, result2 = "", firstCodeUnit = string2.charCodeAt(0); ++index < length; ) {
            if (codeUnit = string2.charCodeAt(index), codeUnit == 0) {
              result2 += "\uFFFD";
              continue;
            }
            if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {
              result2 += "\\" + codeUnit.toString(16) + " ";
              continue;
            }
            if (index == 0 && length == 1 && codeUnit == 45) {
              result2 += "\\" + string2.charAt(index);
              continue;
            }
            if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
              result2 += string2.charAt(index);
              continue;
            }
            result2 += "\\" + string2.charAt(index);
          }
          return result2;
        };
        return root3.CSS || (root3.CSS = {}), root3.CSS.escape = cssEscape, cssEscape;
      });
    } });
    var require_ansi_styles3 = __commonJS3({ "node_modules/pretty-format/node_modules/ansi-styles/index.js"(exports22, module22) {
      "use strict";
      var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
      function assembleStyles() {
        let codes = /* @__PURE__ */ new Map(), styles2 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        styles2.color.gray = styles2.color.blackBright, styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright, styles2.color.grey = styles2.color.blackBright, styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
        for (let [groupName, group] of Object.entries(styles2)) {
          for (let [styleName, style] of Object.entries(group))
            styles2[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles2[styleName], codes.set(style[0], style[1]);
          Object.defineProperty(styles2, groupName, { value: group, enumerable: false });
        }
        return Object.defineProperty(styles2, "codes", { value: codes, enumerable: false }), styles2.color.close = "\x1B[39m", styles2.bgColor.close = "\x1B[49m", styles2.color.ansi256 = wrapAnsi256(), styles2.color.ansi16m = wrapAnsi16m(), styles2.bgColor.ansi256 = wrapAnsi256(10), styles2.bgColor.ansi16m = wrapAnsi16m(10), Object.defineProperties(styles2, { rgbToAnsi256: { value: (red, green, blue) => red === green && green === blue ? red < 8 ? 16 : red > 248 ? 231 : Math.round((red - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5), enumerable: false }, hexToRgb: { value: (hex2) => {
          let matches3 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex2.toString(16));
          if (!matches3)
            return [0, 0, 0];
          let { colorString } = matches3.groups;
          colorString.length === 3 && (colorString = colorString.split("").map((character) => character + character).join(""));
          let integer = Number.parseInt(colorString, 16);
          return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];
        }, enumerable: false }, hexToAnsi256: { value: (hex2) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex2)), enumerable: false } }), styles2;
      }
      Object.defineProperty(module22, "exports", { enumerable: true, get: assembleStyles });
    } });
    var require_collections2 = __commonJS3({ "node_modules/pretty-format/build/collections.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printIteratorEntries = printIteratorEntries;
      exports22.printIteratorValues = printIteratorValues;
      exports22.printListItems = printListItems;
      exports22.printObjectProperties = printObjectProperties;
      var getKeysOfEnumerableProperties = (object, compareKeys) => {
        let keys2 = Object.keys(object).sort(compareKeys);
        return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(object).forEach((symbol) => {
          Object.getOwnPropertyDescriptor(object, symbol).enumerable && keys2.push(symbol);
        }), keys2;
      };
      function printIteratorEntries(iterator, config3, indentation, depth, refs2, printer, separator = ": ") {
        let result2 = "", current = iterator.next();
        if (!current.done) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (; !current.done; ) {
            let name2 = printer(current.value[0], config3, indentationNext, depth, refs2), value2 = printer(current.value[1], config3, indentationNext, depth, refs2);
            result2 += indentationNext + name2 + separator + value2, current = iterator.next(), current.done ? config3.min || (result2 += ",") : result2 += "," + config3.spacingInner;
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printIteratorValues(iterator, config3, indentation, depth, refs2, printer) {
        let result2 = "", current = iterator.next();
        if (!current.done) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (; !current.done; )
            result2 += indentationNext + printer(current.value, config3, indentationNext, depth, refs2), current = iterator.next(), current.done ? config3.min || (result2 += ",") : result2 += "," + config3.spacingInner;
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printListItems(list, config3, indentation, depth, refs2, printer) {
        let result2 = "";
        if (list.length) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (let i = 0; i < list.length; i++)
            result2 += indentationNext, i in list && (result2 += printer(list[i], config3, indentationNext, depth, refs2)), i < list.length - 1 ? result2 += "," + config3.spacingInner : config3.min || (result2 += ",");
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
      function printObjectProperties(val, config3, indentation, depth, refs2, printer) {
        let result2 = "", keys2 = getKeysOfEnumerableProperties(val, config3.compareKeys);
        if (keys2.length) {
          result2 += config3.spacingOuter;
          let indentationNext = indentation + config3.indent;
          for (let i = 0; i < keys2.length; i++) {
            let key2 = keys2[i], name2 = printer(key2, config3, indentationNext, depth, refs2), value2 = printer(val[key2], config3, indentationNext, depth, refs2);
            result2 += indentationNext + name2 + ": " + value2, i < keys2.length - 1 ? result2 += "," + config3.spacingInner : config3.min || (result2 += ",");
          }
          result2 += config3.spacingOuter + indentation;
        }
        return result2;
      }
    } });
    var require_AsymmetricMatcher2 = __commonJS3({ "node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections2(), global2 = function() {
        return typeof globalThis < "u" ? globalThis : typeof global2 < "u" ? global2 : typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")();
      }(), Symbol22 = global2["jest-symbol-do-not-touch"] || global2.Symbol, asymmetricMatcher = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("jest.asymmetricMatcher") : 1267621, SPACE = " ", serialize = (val, config3, indentation, depth, refs2, printer) => {
        let stringedValue = val.toString();
        return stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining" ? ++depth > config3.maxDepth ? "[" + stringedValue + "]" : stringedValue + SPACE + "[" + (0, _collections.printListItems)(val.sample, config3, indentation, depth, refs2, printer) + "]" : stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining" ? ++depth > config3.maxDepth ? "[" + stringedValue + "]" : stringedValue + SPACE + "{" + (0, _collections.printObjectProperties)(val.sample, config3, indentation, depth, refs2, printer) + "}" : stringedValue === "StringMatching" || stringedValue === "StringNotMatching" || stringedValue === "StringContaining" || stringedValue === "StringNotContaining" ? stringedValue + SPACE + printer(val.sample, config3, indentation, depth, refs2) : val.toAsymmetricMatcher();
      };
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === asymmetricMatcher;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_ansi_regex = __commonJS3({ "../../node_modules/ansi-regex/index.js"(exports22, module22) {
      "use strict";
      module22.exports = ({ onlyFirst = false } = {}) => {
        let pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
        return new RegExp(pattern, onlyFirst ? void 0 : "g");
      };
    } });
    var require_ConvertAnsi = __commonJS3({ "node_modules/pretty-format/build/plugins/ConvertAnsi.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _ansiRegex = _interopRequireDefault(require_ansi_regex()), _ansiStyles = _interopRequireDefault(require_ansi_styles3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var toHumanReadableAnsi = (text) => text.replace((0, _ansiRegex.default)(), (match) => {
        switch (match) {
          case _ansiStyles.default.red.close:
          case _ansiStyles.default.green.close:
          case _ansiStyles.default.cyan.close:
          case _ansiStyles.default.gray.close:
          case _ansiStyles.default.white.close:
          case _ansiStyles.default.yellow.close:
          case _ansiStyles.default.bgRed.close:
          case _ansiStyles.default.bgGreen.close:
          case _ansiStyles.default.bgYellow.close:
          case _ansiStyles.default.inverse.close:
          case _ansiStyles.default.dim.close:
          case _ansiStyles.default.bold.close:
          case _ansiStyles.default.reset.open:
          case _ansiStyles.default.reset.close:
            return "</>";
          case _ansiStyles.default.red.open:
            return "<red>";
          case _ansiStyles.default.green.open:
            return "<green>";
          case _ansiStyles.default.cyan.open:
            return "<cyan>";
          case _ansiStyles.default.gray.open:
            return "<gray>";
          case _ansiStyles.default.white.open:
            return "<white>";
          case _ansiStyles.default.yellow.open:
            return "<yellow>";
          case _ansiStyles.default.bgRed.open:
            return "<bgRed>";
          case _ansiStyles.default.bgGreen.open:
            return "<bgGreen>";
          case _ansiStyles.default.bgYellow.open:
            return "<bgYellow>";
          case _ansiStyles.default.inverse.open:
            return "<inverse>";
          case _ansiStyles.default.dim.open:
            return "<dim>";
          case _ansiStyles.default.bold.open:
            return "<bold>";
          default:
            return "";
        }
      }), test = (val) => typeof val == "string" && !!val.match((0, _ansiRegex.default)());
      exports22.test = test;
      var serialize = (val, config3, indentation, depth, refs2, printer) => printer(toHumanReadableAnsi(val), config3, indentation, depth, refs2);
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_DOMCollection2 = __commonJS3({ "node_modules/pretty-format/build/plugins/DOMCollection.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections2(), SPACE = " ", OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"], ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/, testName = (name2) => OBJECT_NAMES.indexOf(name2) !== -1 || ARRAY_REGEXP.test(name2), test = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
      exports22.test = test;
      var isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap", serialize = (collection, config3, indentation, depth, refs2, printer) => {
        let name2 = collection.constructor.name;
        return ++depth > config3.maxDepth ? "[" + name2 + "]" : (config3.min ? "" : name2 + SPACE) + (OBJECT_NAMES.indexOf(name2) !== -1 ? "{" + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}) : { ...collection }, config3, indentation, depth, refs2, printer) + "}" : "[" + (0, _collections.printListItems)(Array.from(collection), config3, indentation, depth, refs2, printer) + "]");
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_escapeHTML2 = __commonJS3({ "node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = escapeHTML2;
      function escapeHTML2(str) {
        return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
      }
    } });
    var require_markup2 = __commonJS3({ "node_modules/pretty-format/build/plugins/lib/markup.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.printText = exports22.printProps = exports22.printElementAsLeaf = exports22.printElement = exports22.printComment = exports22.printChildren = void 0;
      var _escapeHTML = _interopRequireDefault(require_escapeHTML2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var printProps2 = (keys2, props, config3, indentation, depth, refs2, printer) => {
        let indentationNext = indentation + config3.indent, colors = config3.colors;
        return keys2.map((key2) => {
          let value2 = props[key2], printed = printer(value2, config3, indentationNext, depth, refs2);
          return typeof value2 != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = "{" + printed + "}"), config3.spacingInner + indentation + colors.prop.open + key2 + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
        }).join("");
      };
      exports22.printProps = printProps2;
      var printChildren2 = (children2, config3, indentation, depth, refs2, printer) => children2.map((child) => config3.spacingOuter + indentation + (typeof child == "string" ? printText2(child, config3) : printer(child, config3, indentation, depth, refs2))).join("");
      exports22.printChildren = printChildren2;
      var printText2 = (text, config3) => {
        let contentColor = config3.colors.content;
        return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
      };
      exports22.printText = printText2;
      var printComment2 = (comment, config3) => {
        let commentColor = config3.colors.comment;
        return commentColor.open + "<!--" + (0, _escapeHTML.default)(comment) + "-->" + commentColor.close;
      };
      exports22.printComment = printComment2;
      var printElement2 = (type3, printedProps, printedChildren, config3, indentation) => {
        let tagColor = config3.colors.tag;
        return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config3.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config3.min ? "" : " ") + "/") + ">" + tagColor.close;
      };
      exports22.printElement = printElement2;
      var printElementAsLeaf2 = (type3, config3) => {
        let tagColor = config3.colors.tag;
        return tagColor.open + "<" + type3 + tagColor.close + " \u2026" + tagColor.open + " />" + tagColor.close;
      };
      exports22.printElementAsLeaf = printElementAsLeaf2;
    } });
    var require_DOMElement2 = __commonJS3({ "node_modules/pretty-format/build/plugins/DOMElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup2(), ELEMENT_NODE2 = 1, TEXT_NODE2 = 3, COMMENT_NODE2 = 8, FRAGMENT_NODE2 = 11, ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/, testHasAttribute = (val) => {
        try {
          return typeof val.hasAttribute == "function" && val.hasAttribute("is");
        } catch {
          return false;
        }
      }, testNode2 = (val) => {
        let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || testHasAttribute(val);
        return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
      }, test = (val) => {
        var _val$constructor;
        return (val == null || (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode2(val);
      };
      exports22.test = test;
      function nodeIsText2(node) {
        return node.nodeType === TEXT_NODE2;
      }
      function nodeIsComment2(node) {
        return node.nodeType === COMMENT_NODE2;
      }
      function nodeIsFragment2(node) {
        return node.nodeType === FRAGMENT_NODE2;
      }
      var serialize = (node, config3, indentation, depth, refs2, printer) => {
        if (nodeIsText2(node))
          return (0, _markup.printText)(node.data, config3);
        if (nodeIsComment2(node))
          return (0, _markup.printComment)(node.data, config3);
        let type3 = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
        return ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(type3, config3) : (0, _markup.printElement)(type3, (0, _markup.printProps)(nodeIsFragment2(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs2, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config3, indentation + config3.indent, depth, refs2, printer), config3, indentation);
      };
      exports22.serialize = serialize;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_Immutable2 = __commonJS3({ "node_modules/pretty-format/build/plugins/Immutable.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _collections = require_collections2(), IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@", IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@", IS_KEYED_SENTINEL2 = "@@__IMMUTABLE_KEYED__@@", IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@", IS_ORDERED_SENTINEL2 = "@@__IMMUTABLE_ORDERED__@@", IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@", IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@", IS_SET_SENTINEL2 = "@@__IMMUTABLE_SET__@@", IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@", getImmutableName = (name2) => "Immutable." + name2, printAsLeaf = (name2) => "[" + name2 + "]", SPACE = " ", LAZY = "\u2026", printImmutableEntries = (val, config3, indentation, depth, refs2, printer, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : getImmutableName(type3) + SPACE + "{" + (0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer) + "}";
      function getRecordEntries(val) {
        let i = 0;
        return { next() {
          if (i < val._keys.length) {
            let key2 = val._keys[i++];
            return { done: false, value: [key2, val.get(key2)] };
          }
          return { done: true, value: void 0 };
        } };
      }
      var printImmutableRecord = (val, config3, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName(val._name || "Record");
        return ++depth > config3.maxDepth ? printAsLeaf(name2) : name2 + SPACE + "{" + (0, _collections.printIteratorEntries)(getRecordEntries(val), config3, indentation, depth, refs2, printer) + "}";
      }, printImmutableSeq = (val, config3, indentation, depth, refs2, printer) => {
        let name2 = getImmutableName("Seq");
        return ++depth > config3.maxDepth ? printAsLeaf(name2) : val[IS_KEYED_SENTINEL2] ? name2 + SPACE + "{" + (val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer) : LAZY) + "}" : name2 + SPACE + "[" + (val._iter || val._array || val._collection || val._iterable ? (0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer) : LAZY) + "]";
      }, printImmutableValues = (val, config3, indentation, depth, refs2, printer, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : getImmutableName(type3) + SPACE + "[" + (0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer) + "]", serialize = (val, config3, indentation, depth, refs2, printer) => val[IS_MAP_SENTINEL] ? printImmutableEntries(val, config3, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL2] ? "OrderedMap" : "Map") : val[IS_LIST_SENTINEL] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, "List") : val[IS_SET_SENTINEL2] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, val[IS_ORDERED_SENTINEL2] ? "OrderedSet" : "Set") : val[IS_STACK_SENTINEL] ? printImmutableValues(val, config3, indentation, depth, refs2, printer, "Stack") : val[IS_SEQ_SENTINEL] ? printImmutableSeq(val, config3, indentation, depth, refs2, printer) : printImmutableRecord(val, config3, indentation, depth, refs2, printer);
      exports22.serialize = serialize;
      var test = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_react_is_production_min2 = __commonJS3({ "node_modules/react-is/cjs/react-is.production.min.js"(exports22) {
      "use strict";
      var b2 = 60103, c = 60106, d2 = 60107, e = 60108, f2 = 60114, g2 = 60109, h = 60110, k = 60112, l = 60113, m2 = 60120, n = 60115, p2 = 60116, q = 60121, r = 60122, u2 = 60117, v2 = 60129, w = 60131;
      typeof Symbol == "function" && Symbol.for && (x = Symbol.for, b2 = x("react.element"), c = x("react.portal"), d2 = x("react.fragment"), e = x("react.strict_mode"), f2 = x("react.profiler"), g2 = x("react.provider"), h = x("react.context"), k = x("react.forward_ref"), l = x("react.suspense"), m2 = x("react.suspense_list"), n = x("react.memo"), p2 = x("react.lazy"), q = x("react.block"), r = x("react.server.block"), u2 = x("react.fundamental"), v2 = x("react.debug_trace_mode"), w = x("react.legacy_hidden"));
      var x;
      function y2(a) {
        if (typeof a == "object" && a !== null) {
          var t = a.$$typeof;
          switch (t) {
            case b2:
              switch (a = a.type, a) {
                case d2:
                case f2:
                case e:
                case l:
                case m2:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case h:
                    case k:
                    case p2:
                    case n:
                    case g2:
                      return a;
                    default:
                      return t;
                  }
              }
            case c:
              return t;
          }
        }
      }
      var z = g2, A = b2, B = k, C2 = d2, D = p2, E2 = n, F = c, G = f2, H = e, I2 = l;
      exports22.ContextConsumer = h;
      exports22.ContextProvider = z;
      exports22.Element = A;
      exports22.ForwardRef = B;
      exports22.Fragment = C2;
      exports22.Lazy = D;
      exports22.Memo = E2;
      exports22.Portal = F;
      exports22.Profiler = G;
      exports22.StrictMode = H;
      exports22.Suspense = I2;
      exports22.isAsyncMode = function() {
        return false;
      };
      exports22.isConcurrentMode = function() {
        return false;
      };
      exports22.isContextConsumer = function(a) {
        return y2(a) === h;
      };
      exports22.isContextProvider = function(a) {
        return y2(a) === g2;
      };
      exports22.isElement = function(a) {
        return typeof a == "object" && a !== null && a.$$typeof === b2;
      };
      exports22.isForwardRef = function(a) {
        return y2(a) === k;
      };
      exports22.isFragment = function(a) {
        return y2(a) === d2;
      };
      exports22.isLazy = function(a) {
        return y2(a) === p2;
      };
      exports22.isMemo = function(a) {
        return y2(a) === n;
      };
      exports22.isPortal = function(a) {
        return y2(a) === c;
      };
      exports22.isProfiler = function(a) {
        return y2(a) === f2;
      };
      exports22.isStrictMode = function(a) {
        return y2(a) === e;
      };
      exports22.isSuspense = function(a) {
        return y2(a) === l;
      };
      exports22.isValidElementType = function(a) {
        return typeof a == "string" || typeof a == "function" || a === d2 || a === f2 || a === v2 || a === e || a === l || a === m2 || a === w || typeof a == "object" && a !== null && (a.$$typeof === p2 || a.$$typeof === n || a.$$typeof === g2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u2 || a.$$typeof === q || a[0] === r);
      };
      exports22.typeOf = y2;
    } });
    var require_react_is_development2 = __commonJS3({ "node_modules/react-is/cjs/react-is.development.js"(exports22) {
      "use strict";
      process.env.NODE_ENV !== "production" && function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103, REACT_PORTAL_TYPE = 60106, REACT_FRAGMENT_TYPE = 60107, REACT_STRICT_MODE_TYPE = 60108, REACT_PROFILER_TYPE = 60114, REACT_PROVIDER_TYPE = 60109, REACT_CONTEXT_TYPE = 60110, REACT_FORWARD_REF_TYPE = 60112, REACT_SUSPENSE_TYPE = 60113, REACT_SUSPENSE_LIST_TYPE = 60120, REACT_MEMO_TYPE = 60115, REACT_LAZY_TYPE = 60116, REACT_BLOCK_TYPE = 60121, REACT_SERVER_BLOCK_TYPE = 60122, REACT_FUNDAMENTAL_TYPE = 60117, REACT_SCOPE_TYPE = 60119, REACT_OPAQUE_ID_TYPE = 60128, REACT_DEBUG_TRACING_MODE_TYPE = 60129, REACT_OFFSCREEN_TYPE = 60130, REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol == "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element"), REACT_PORTAL_TYPE = symbolFor("react.portal"), REACT_FRAGMENT_TYPE = symbolFor("react.fragment"), REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode"), REACT_PROFILER_TYPE = symbolFor("react.profiler"), REACT_PROVIDER_TYPE = symbolFor("react.provider"), REACT_CONTEXT_TYPE = symbolFor("react.context"), REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref"), REACT_SUSPENSE_TYPE = symbolFor("react.suspense"), REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list"), REACT_MEMO_TYPE = symbolFor("react.memo"), REACT_LAZY_TYPE = symbolFor("react.lazy"), REACT_BLOCK_TYPE = symbolFor("react.block"), REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block"), REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental"), REACT_SCOPE_TYPE = symbolFor("react.scope"), REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id"), REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type3) {
          return !!(typeof type3 == "string" || typeof type3 == "function" || type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || type3 === REACT_DEBUG_TRACING_MODE_TYPE || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || type3 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI || typeof type3 == "object" && type3 !== null && (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_BLOCK_TYPE || type3[0] === REACT_SERVER_BLOCK_TYPE));
        }
        function typeOf(object) {
          if (typeof object == "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type3 = object.type;
                switch (type3) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type3;
                  default:
                    var $$typeofType = type3 && type3.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        var ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false, hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isConcurrentMode(object) {
          return hasWarnedAboutDeprecatedIsConcurrentMode || (hasWarnedAboutDeprecatedIsConcurrentMode = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement5(object) {
          return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports22.ContextConsumer = ContextConsumer, exports22.ContextProvider = ContextProvider, exports22.Element = Element2, exports22.ForwardRef = ForwardRef, exports22.Fragment = Fragment, exports22.Lazy = Lazy, exports22.Memo = Memo, exports22.Portal = Portal, exports22.Profiler = Profiler, exports22.StrictMode = StrictMode, exports22.Suspense = Suspense, exports22.isAsyncMode = isAsyncMode, exports22.isConcurrentMode = isConcurrentMode, exports22.isContextConsumer = isContextConsumer, exports22.isContextProvider = isContextProvider, exports22.isElement = isElement5, exports22.isForwardRef = isForwardRef, exports22.isFragment = isFragment, exports22.isLazy = isLazy, exports22.isMemo = isMemo, exports22.isPortal = isPortal, exports22.isProfiler = isProfiler, exports22.isStrictMode = isStrictMode, exports22.isSuspense = isSuspense, exports22.isValidElementType = isValidElementType, exports22.typeOf = typeOf;
      }();
    } });
    var require_react_is2 = __commonJS3({ "node_modules/react-is/index.js"(exports22, module22) {
      "use strict";
      process.env.NODE_ENV === "production" ? module22.exports = require_react_is_production_min2() : module22.exports = require_react_is_development2();
    } });
    var require_ReactElement2 = __commonJS3({ "node_modules/pretty-format/build/plugins/ReactElement.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var ReactIs = _interopRequireWildcard(require_react_is2()), _markup = require_markup2();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap != "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule)
          return obj;
        if (obj === null || typeof obj != "object" && typeof obj != "function")
          return { default: obj };
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj))
          return cache.get(obj);
        var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key2 in obj)
          if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
            desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key2, desc) : newObj[key2] = obj[key2];
          }
        return newObj.default = obj, cache && cache.set(obj, newObj), newObj;
      }
      var getChildren = (arg, children2 = []) => (Array.isArray(arg) ? arg.forEach((item) => {
        getChildren(item, children2);
      }) : arg != null && arg !== false && children2.push(arg), children2), getType3 = (element) => {
        let type3 = element.type;
        if (typeof type3 == "string")
          return type3;
        if (typeof type3 == "function")
          return type3.displayName || type3.name || "Unknown";
        if (ReactIs.isFragment(element))
          return "React.Fragment";
        if (ReactIs.isSuspense(element))
          return "React.Suspense";
        if (typeof type3 == "object" && type3 !== null) {
          if (ReactIs.isContextProvider(element))
            return "Context.Provider";
          if (ReactIs.isContextConsumer(element))
            return "Context.Consumer";
          if (ReactIs.isForwardRef(element)) {
            if (type3.displayName)
              return type3.displayName;
            let functionName = type3.render.displayName || type3.render.name || "";
            return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
          }
          if (ReactIs.isMemo(element)) {
            let functionName = type3.displayName || type3.type.displayName || type3.type.name || "";
            return functionName !== "" ? "Memo(" + functionName + ")" : "Memo";
          }
        }
        return "UNDEFINED";
      }, getPropKeys = (element) => {
        let { props } = element;
        return Object.keys(props).filter((key2) => key2 !== "children" && props[key2] !== void 0).sort();
      }, serialize = (element, config3, indentation, depth, refs2, printer) => ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(getType3(element), config3) : (0, _markup.printElement)(getType3(element), (0, _markup.printProps)(getPropKeys(element), element.props, config3, indentation + config3.indent, depth, refs2, printer), (0, _markup.printChildren)(getChildren(element.props.children), config3, indentation + config3.indent, depth, refs2, printer), config3, indentation);
      exports22.serialize = serialize;
      var test = (val) => val != null && ReactIs.isElement(val);
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_ReactTestComponent2 = __commonJS3({ "node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.test = exports22.serialize = exports22.default = void 0;
      var _markup = require_markup2(), global2 = function() {
        return typeof globalThis < "u" ? globalThis : typeof global2 < "u" ? global2 : typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")();
      }(), Symbol22 = global2["jest-symbol-do-not-touch"] || global2.Symbol, testSymbol = typeof Symbol22 == "function" && Symbol22.for ? Symbol22.for("react.test.json") : 245830487, getPropKeys = (object) => {
        let { props } = object;
        return props ? Object.keys(props).filter((key2) => props[key2] !== void 0).sort() : [];
      }, serialize = (object, config3, indentation, depth, refs2, printer) => ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config3) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config3, indentation + config3.indent, depth, refs2, printer) : "", object.children ? (0, _markup.printChildren)(object.children, config3, indentation + config3.indent, depth, refs2, printer) : "", config3, indentation);
      exports22.serialize = serialize;
      var test = (val) => val && val.$$typeof === testSymbol;
      exports22.test = test;
      var plugin = { serialize, test }, _default = plugin;
      exports22.default = _default;
    } });
    var require_build3 = __commonJS3({ "node_modules/pretty-format/build/index.js"(exports22) {
      "use strict";
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = exports22.DEFAULT_OPTIONS = void 0;
      exports22.format = format4;
      exports22.plugins = void 0;
      var _ansiStyles = _interopRequireDefault(require_ansi_styles3()), _collections = require_collections2(), _AsymmetricMatcher = _interopRequireDefault(require_AsymmetricMatcher2()), _ConvertAnsi = _interopRequireDefault(require_ConvertAnsi()), _DOMCollection = _interopRequireDefault(require_DOMCollection2()), _DOMElement = _interopRequireDefault(require_DOMElement2()), _Immutable = _interopRequireDefault(require_Immutable2()), _ReactElement = _interopRequireDefault(require_ReactElement2()), _ReactTestComponent = _interopRequireDefault(require_ReactTestComponent2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var toString22 = Object.prototype.toString, toISOString = Date.prototype.toISOString, errorToString = Error.prototype.toString, regExpToString = RegExp.prototype.toString, getConstructorName = (val) => typeof val.constructor == "function" && val.constructor.name || "Object", isWindow = (val) => typeof window < "u" && val === window, SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/, NEWLINE_REGEXP = /\n/gi, PrettyFormatPluginError = class extends Error {
        constructor(message, stack) {
          super(message), this.stack = stack, this.name = this.constructor.name;
        }
      };
      function isToStringedArrayType(toStringed) {
        return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
      }
      function printNumber(val) {
        return Object.is(val, -0) ? "-0" : String(val);
      }
      function printBigInt(val) {
        return `${val}n`;
      }
      function printFunction(val, printFunctionName) {
        return printFunctionName ? "[Function " + (val.name || "anonymous") + "]" : "[Function]";
      }
      function printSymbol(val) {
        return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
      }
      function printError(val) {
        return "[" + errorToString.call(val) + "]";
      }
      function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
        if (val === true || val === false)
          return "" + val;
        if (val === void 0)
          return "undefined";
        if (val === null)
          return "null";
        let typeOf = typeof val;
        if (typeOf === "number")
          return printNumber(val);
        if (typeOf === "bigint")
          return printBigInt(val);
        if (typeOf === "string")
          return escapeString ? '"' + val.replace(/"|\\/g, "\\$&") + '"' : '"' + val + '"';
        if (typeOf === "function")
          return printFunction(val, printFunctionName);
        if (typeOf === "symbol")
          return printSymbol(val);
        let toStringed = toString22.call(val);
        return toStringed === "[object WeakMap]" ? "WeakMap {}" : toStringed === "[object WeakSet]" ? "WeakSet {}" : toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]" ? printFunction(val, printFunctionName) : toStringed === "[object Symbol]" ? printSymbol(val) : toStringed === "[object Date]" ? isNaN(+val) ? "Date { NaN }" : toISOString.call(val) : toStringed === "[object Error]" ? printError(val) : toStringed === "[object RegExp]" ? escapeRegex ? regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : regExpToString.call(val) : val instanceof Error ? printError(val) : null;
      }
      function printComplexValue(val, config3, indentation, depth, refs2, hasCalledToJSON) {
        if (refs2.indexOf(val) !== -1)
          return "[Circular]";
        refs2 = refs2.slice(), refs2.push(val);
        let hitMaxDepth = ++depth > config3.maxDepth, min = config3.min;
        if (config3.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON == "function" && !hasCalledToJSON)
          return printer(val.toJSON(), config3, indentation, depth, refs2, true);
        let toStringed = toString22.call(val);
        return toStringed === "[object Arguments]" ? hitMaxDepth ? "[Arguments]" : (min ? "" : "Arguments ") + "[" + (0, _collections.printListItems)(val, config3, indentation, depth, refs2, printer) + "]" : isToStringedArrayType(toStringed) ? hitMaxDepth ? "[" + val.constructor.name + "]" : (min || !config3.printBasicPrototype && val.constructor.name === "Array" ? "" : val.constructor.name + " ") + "[" + (0, _collections.printListItems)(val, config3, indentation, depth, refs2, printer) + "]" : toStringed === "[object Map]" ? hitMaxDepth ? "[Map]" : "Map {" + (0, _collections.printIteratorEntries)(val.entries(), config3, indentation, depth, refs2, printer, " => ") + "}" : toStringed === "[object Set]" ? hitMaxDepth ? "[Set]" : "Set {" + (0, _collections.printIteratorValues)(val.values(), config3, indentation, depth, refs2, printer) + "}" : hitMaxDepth || isWindow(val) ? "[" + getConstructorName(val) + "]" : (min || !config3.printBasicPrototype && getConstructorName(val) === "Object" ? "" : getConstructorName(val) + " ") + "{" + (0, _collections.printObjectProperties)(val, config3, indentation, depth, refs2, printer) + "}";
      }
      function isNewPlugin(plugin) {
        return plugin.serialize != null;
      }
      function printPlugin(plugin, val, config3, indentation, depth, refs2) {
        let printed;
        try {
          printed = isNewPlugin(plugin) ? plugin.serialize(val, config3, indentation, depth, refs2, printer) : plugin.print(val, (valChild) => printer(valChild, config3, indentation, depth, refs2), (str) => {
            let indentationNext = indentation + config3.indent;
            return indentationNext + str.replace(NEWLINE_REGEXP, `
` + indentationNext);
          }, { edgeSpacing: config3.spacingOuter, min: config3.min, spacing: config3.spacingInner }, config3.colors);
        } catch (error) {
          throw new PrettyFormatPluginError(error.message, error.stack);
        }
        if (typeof printed != "string")
          throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
        return printed;
      }
      function findPlugin(plugins5, val) {
        for (let p2 = 0; p2 < plugins5.length; p2++)
          try {
            if (plugins5[p2].test(val))
              return plugins5[p2];
          } catch (error) {
            throw new PrettyFormatPluginError(error.message, error.stack);
          }
        return null;
      }
      function printer(val, config3, indentation, depth, refs2, hasCalledToJSON) {
        let plugin = findPlugin(config3.plugins, val);
        if (plugin !== null)
          return printPlugin(plugin, val, config3, indentation, depth, refs2);
        let basicResult = printBasicValue(val, config3.printFunctionName, config3.escapeRegex, config3.escapeString);
        return basicResult !== null ? basicResult : printComplexValue(val, config3, indentation, depth, refs2, hasCalledToJSON);
      }
      var DEFAULT_THEME = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME), DEFAULT_OPTIONS = { callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: DEFAULT_THEME };
      exports22.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
      function validateOptions(options2) {
        if (Object.keys(options2).forEach((key2) => {
          if (!DEFAULT_OPTIONS.hasOwnProperty(key2))
            throw new Error(`pretty-format: Unknown option "${key2}".`);
        }), options2.min && options2.indent !== void 0 && options2.indent !== 0)
          throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
        if (options2.theme !== void 0) {
          if (options2.theme === null)
            throw new Error('pretty-format: Option "theme" must not be null.');
          if (typeof options2.theme != "object")
            throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options2.theme}".`);
        }
      }
      var getColorsHighlight = (options2) => DEFAULT_THEME_KEYS.reduce((colors, key2) => {
        let value2 = options2.theme && options2.theme[key2] !== void 0 ? options2.theme[key2] : DEFAULT_THEME[key2], color = value2 && _ansiStyles.default[value2];
        if (color && typeof color.close == "string" && typeof color.open == "string")
          colors[key2] = color;
        else
          throw new Error(`pretty-format: Option "theme" has a key "${key2}" whose value "${value2}" is undefined in ansi-styles.`);
        return colors;
      }, /* @__PURE__ */ Object.create(null)), getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key2) => (colors[key2] = { close: "", open: "" }, colors), /* @__PURE__ */ Object.create(null)), getPrintFunctionName = (options2) => options2 && options2.printFunctionName !== void 0 ? options2.printFunctionName : DEFAULT_OPTIONS.printFunctionName, getEscapeRegex = (options2) => options2 && options2.escapeRegex !== void 0 ? options2.escapeRegex : DEFAULT_OPTIONS.escapeRegex, getEscapeString = (options2) => options2 && options2.escapeString !== void 0 ? options2.escapeString : DEFAULT_OPTIONS.escapeString, getConfig3 = (options2) => {
        var _options$printBasicPr;
        return { callToJSON: options2 && options2.callToJSON !== void 0 ? options2.callToJSON : DEFAULT_OPTIONS.callToJSON, colors: options2 && options2.highlight ? getColorsHighlight(options2) : getColorsEmpty(), compareKeys: options2 && typeof options2.compareKeys == "function" ? options2.compareKeys : DEFAULT_OPTIONS.compareKeys, escapeRegex: getEscapeRegex(options2), escapeString: getEscapeString(options2), indent: options2 && options2.min ? "" : createIndent(options2 && options2.indent !== void 0 ? options2.indent : DEFAULT_OPTIONS.indent), maxDepth: options2 && options2.maxDepth !== void 0 ? options2.maxDepth : DEFAULT_OPTIONS.maxDepth, min: options2 && options2.min !== void 0 ? options2.min : DEFAULT_OPTIONS.min, plugins: options2 && options2.plugins !== void 0 ? options2.plugins : DEFAULT_OPTIONS.plugins, printBasicPrototype: (_options$printBasicPr = options2 == null ? void 0 : options2.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true, printFunctionName: getPrintFunctionName(options2), spacingInner: options2 && options2.min ? " " : `
`, spacingOuter: options2 && options2.min ? "" : `
` };
      };
      function createIndent(indent) {
        return new Array(indent + 1).join(" ");
      }
      function format4(val, options2) {
        if (options2 && (validateOptions(options2), options2.plugins)) {
          let plugin = findPlugin(options2.plugins, val);
          if (plugin !== null)
            return printPlugin(plugin, val, getConfig3(options2), "", 0, []);
        }
        let basicResult = printBasicValue(val, getPrintFunctionName(options2), getEscapeRegex(options2), getEscapeString(options2));
        return basicResult !== null ? basicResult : printComplexValue(val, getConfig3(options2), "", 0, []);
      }
      var plugins4 = { AsymmetricMatcher: _AsymmetricMatcher.default, ConvertAnsi: _ConvertAnsi.default, DOMCollection: _DOMCollection.default, DOMElement: _DOMElement.default, Immutable: _Immutable.default, ReactElement: _ReactElement.default, ReactTestComponent: _ReactTestComponent.default };
      exports22.plugins = plugins4;
      var _default = format4;
      exports22.default = _default;
    } });
    var require_lz_string = __commonJS3({ "../../node_modules/lz-string/libs/lz-string.js"(exports22, module22) {
      "use strict";
      var LZString = function() {
        var f2 = String.fromCharCode, keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", baseReverseDic = {};
        function getBaseValue(alphabet, character) {
          if (!baseReverseDic[alphabet]) {
            baseReverseDic[alphabet] = {};
            for (var i = 0; i < alphabet.length; i++)
              baseReverseDic[alphabet][alphabet.charAt(i)] = i;
          }
          return baseReverseDic[alphabet][character];
        }
        var LZString2 = { compressToBase64: function(input2) {
          if (input2 == null)
            return "";
          var res = LZString2._compress(input2, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
            default:
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        }, decompressFromBase64: function(input2) {
          return input2 == null ? "" : input2 == "" ? null : LZString2._decompress(input2.length, 32, function(index) {
            return getBaseValue(keyStrBase64, input2.charAt(index));
          });
        }, compressToUTF16: function(input2) {
          return input2 == null ? "" : LZString2._compress(input2, 15, function(a) {
            return f2(a + 32);
          }) + " ";
        }, decompressFromUTF16: function(compressed) {
          return compressed == null ? "" : compressed == "" ? null : LZString2._decompress(compressed.length, 16384, function(index) {
            return compressed.charCodeAt(index) - 32;
          });
        }, compressToUint8Array: function(uncompressed) {
          for (var compressed = LZString2.compress(uncompressed), buf = new Uint8Array(compressed.length * 2), i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[i * 2] = current_value >>> 8, buf[i * 2 + 1] = current_value % 256;
          }
          return buf;
        }, decompressFromUint8Array: function(compressed) {
          if (compressed == null)
            return LZString2.decompress(compressed);
          for (var buf = new Array(compressed.length / 2), i = 0, TotalLen = buf.length; i < TotalLen; i++)
            buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
          var result2 = [];
          return buf.forEach(function(c) {
            result2.push(f2(c));
          }), LZString2.decompress(result2.join(""));
        }, compressToEncodedURIComponent: function(input2) {
          return input2 == null ? "" : LZString2._compress(input2, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        }, decompressFromEncodedURIComponent: function(input2) {
          return input2 == null ? "" : input2 == "" ? null : (input2 = input2.replace(/ /g, "+"), LZString2._decompress(input2.length, 32, function(index) {
            return getBaseValue(keyStrUriSafe, input2.charAt(index));
          }));
        }, compress: function(uncompressed) {
          return LZString2._compress(uncompressed, 16, function(a) {
            return f2(a);
          });
        }, _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null)
            return "";
          var i, value2, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1)
            if (context_c = uncompressed.charAt(ii), Object.prototype.hasOwnProperty.call(context_dictionary, context_c) || (context_dictionary[context_c] = context_dictSize++, context_dictionaryToCreate[context_c] = true), context_wc = context_w + context_c, Object.prototype.hasOwnProperty.call(context_dictionary, context_wc))
              context_w = context_wc;
            else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++)
                    context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++;
                  for (value2 = context_w.charCodeAt(0), i = 0; i < 8; i++)
                    context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
                } else {
                  for (value2 = 1, i = 0; i < context_numBits; i++)
                    context_data_val = context_data_val << 1 | value2, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = 0;
                  for (value2 = context_w.charCodeAt(0), i = 0; i < 16; i++)
                    context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
                }
                context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), delete context_dictionaryToCreate[context_w];
              } else
                for (value2 = context_dictionary[context_w], i = 0; i < context_numBits; i++)
                  context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
              context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), context_dictionary[context_wc] = context_dictSize++, context_w = String(context_c);
            }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++)
                  context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++;
                for (value2 = context_w.charCodeAt(0), i = 0; i < 8; i++)
                  context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
              } else {
                for (value2 = 1, i = 0; i < context_numBits; i++)
                  context_data_val = context_data_val << 1 | value2, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = 0;
                for (value2 = context_w.charCodeAt(0), i = 0; i < 16; i++)
                  context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
              }
              context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), delete context_dictionaryToCreate[context_w];
            } else
              for (value2 = context_dictionary[context_w], i = 0; i < context_numBits; i++)
                context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
            context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++);
          }
          for (value2 = 2, i = 0; i < context_numBits; i++)
            context_data_val = context_data_val << 1 | value2 & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value2 = value2 >> 1;
          for (; ; )
            if (context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else
              context_data_position++;
          return context_data.join("");
        }, decompress: function(compressed) {
          return compressed == null ? "" : compressed == "" ? null : LZString2._decompress(compressed.length, 32768, function(index) {
            return compressed.charCodeAt(index);
          });
        }, _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result2 = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i = 0; i < 3; i += 1)
            dictionary[i] = i;
          for (bits = 0, maxpower = Math.pow(2, 2), power = 1; power != maxpower; )
            resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
          switch (next = bits) {
            case 0:
              for (bits = 0, maxpower = Math.pow(2, 8), power = 1; power != maxpower; )
                resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
              c = f2(bits);
              break;
            case 1:
              for (bits = 0, maxpower = Math.pow(2, 16), power = 1; power != maxpower; )
                resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
              c = f2(bits);
              break;
            case 2:
              return "";
          }
          for (dictionary[3] = c, w = c, result2.push(c); ; ) {
            if (data.index > length)
              return "";
            for (bits = 0, maxpower = Math.pow(2, numBits), power = 1; power != maxpower; )
              resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
            switch (c = bits) {
              case 0:
                for (bits = 0, maxpower = Math.pow(2, 8), power = 1; power != maxpower; )
                  resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
                dictionary[dictSize++] = f2(bits), c = dictSize - 1, enlargeIn--;
                break;
              case 1:
                for (bits = 0, maxpower = Math.pow(2, 16), power = 1; power != maxpower; )
                  resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
                dictionary[dictSize++] = f2(bits), c = dictSize - 1, enlargeIn--;
                break;
              case 2:
                return result2.join("");
            }
            if (enlargeIn == 0 && (enlargeIn = Math.pow(2, numBits), numBits++), dictionary[c])
              entry = dictionary[c];
            else if (c === dictSize)
              entry = w + w.charAt(0);
            else
              return null;
            result2.push(entry), dictionary[dictSize++] = w + entry.charAt(0), enlargeIn--, w = entry, enlargeIn == 0 && (enlargeIn = Math.pow(2, numBits), numBits++);
          }
        } };
        return LZString2;
      }();
      typeof define == "function" && define.amd ? define(function() {
        return LZString;
      }) : typeof module22 < "u" && module22 != null ? module22.exports = LZString : typeof angular < "u" && angular != null && angular.module("LZString", []).factory("LZString", function() {
        return LZString;
      });
    } });
    var src_exports = {};
    __export2(src_exports, { buildQueries: () => buildQueries2, clearAllMocks: () => clearAllMocks, configure: () => configure2, createEvent: () => createEvent3, expect: () => expect3, findAllByAltText: () => findAllByAltText2, findAllByDisplayValue: () => findAllByDisplayValue2, findAllByLabelText: () => findAllByLabelText2, findAllByPlaceholderText: () => findAllByPlaceholderText2, findAllByRole: () => findAllByRole2, findAllByTestId: () => findAllByTestId2, findAllByText: () => findAllByText2, findAllByTitle: () => findAllByTitle2, findByAltText: () => findByAltText2, findByDisplayValue: () => findByDisplayValue2, findByLabelText: () => findByLabelText2, findByPlaceholderText: () => findByPlaceholderText2, findByRole: () => findByRole2, findByTestId: () => findByTestId2, findByText: () => findByText2, findByTitle: () => findByTitle2, fireEvent: () => fireEvent2, fn: () => fn22, getAllByAltText: () => getAllByAltText2, getAllByDisplayValue: () => getAllByDisplayValue2, getAllByLabelText: () => getAllByLabelText2, getAllByPlaceholderText: () => getAllByPlaceholderText2, getAllByRole: () => getAllByRole2, getAllByTestId: () => getAllByTestId2, getAllByText: () => getAllByText2, getAllByTitle: () => getAllByTitle2, getByAltText: () => getByAltText2, getByDisplayValue: () => getByDisplayValue2, getByLabelText: () => getByLabelText2, getByPlaceholderText: () => getByPlaceholderText2, getByRole: () => getByRole2, getByTestId: () => getByTestId2, getByText: () => getByText2, getByTitle: () => getByTitle2, getConfig: () => getConfig2, getDefaultNormalizer: () => getDefaultNormalizer2, getElementError: () => getElementError2, getNodeText: () => getNodeText2, getQueriesForElement: () => getQueriesForElement2, getRoles: () => getRoles2, getSuggestedQuery: () => getSuggestedQuery2, isInaccessible: () => isInaccessible2, isMockFunction: () => isMockFunction, logDOM: () => logDOM2, logRoles: () => logRoles2, mocked: () => mocked, mocks: () => mocks, onMockCall: () => onMockCall, prettyDOM: () => prettyDOM2, prettyFormat: () => prettyFormat2, queries: () => queries2, queryAllByAltText: () => queryAllByAltText2, queryAllByAttribute: () => queryAllByAttribute2, queryAllByDisplayValue: () => queryAllByDisplayValue2, queryAllByLabelText: () => queryAllByLabelText2, queryAllByPlaceholderText: () => queryAllByPlaceholderText2, queryAllByRole: () => queryAllByRole2, queryAllByTestId: () => queryAllByTestId2, queryAllByText: () => queryAllByText2, queryAllByTitle: () => queryAllByTitle2, queryByAltText: () => queryByAltText2, queryByAttribute: () => queryByAttribute2, queryByDisplayValue: () => queryByDisplayValue2, queryByLabelText: () => queryByLabelText2, queryByPlaceholderText: () => queryByPlaceholderText2, queryByRole: () => queryByRole2, queryByTestId: () => queryByTestId2, queryByText: () => queryByText2, queryByTitle: () => queryByTitle2, queryHelpers: () => queryHelpers2, resetAllMocks: () => resetAllMocks, restoreAllMocks: () => restoreAllMocks, screen: () => screen2, spyOn: () => spyOn2, traverseArgs: () => traverseArgs, userEvent: () => userEvent2, waitFor: () => waitFor2, waitForElementToBeRemoved: () => waitForElementToBeRemoved2, within: () => within });
    module2.exports = __toCommonJS2(src_exports);
    var import_instrumenter2 = require_dist8();
    var import_index = __toESM3(require_chai2(), 1);
    var expect = import_index.default.expect;
    var version = import_index.default.version;
    var Assertion = import_index.default.Assertion;
    var AssertionError = import_index.default.AssertionError;
    var util = import_index.default.util;
    var config = import_index.default.config;
    var use = import_index.default.use;
    var should = import_index.default.should;
    var assert = import_index.default.assert;
    var core = import_index.default.core;
    var chai_default = import_index.default;
    var scope = (() => {
      let win;
      return typeof window < "u" ? win = window : typeof globalThis < "u" ? win = globalThis : typeof global < "u" ? win = global : typeof self < "u" ? win = self : win = {}, win;
    })();
    function assertTypes(value2, name2, types) {
      let receivedType = typeof value2;
      if (!types.includes(receivedType))
        throw new TypeError(`${name2} value must be ${types.join(" or ")}, received "${receivedType}"`);
    }
    function isObject4(item) {
      return item != null && typeof item == "object" && !Array.isArray(item);
    }
    function isFinalObj(obj) {
      return obj === Object.prototype || obj === Function.prototype || obj === RegExp.prototype;
    }
    function getType(value2) {
      return Object.prototype.toString.apply(value2).slice(8, -1);
    }
    function collectOwnProperties(obj, collector) {
      let collect = typeof collector == "function" ? collector : (key2) => collector.add(key2);
      Object.getOwnPropertyNames(obj).forEach(collect), Object.getOwnPropertySymbols(obj).forEach(collect);
    }
    function getOwnProperties(obj) {
      let ownProps = /* @__PURE__ */ new Set();
      return isFinalObj(obj) ? [] : (collectOwnProperties(obj, ownProps), Array.from(ownProps));
    }
    var defaultCloneOptions = { forceWritable: false };
    function deepClone(val, options2 = defaultCloneOptions) {
      return clone(val, /* @__PURE__ */ new WeakMap(), options2);
    }
    function clone(val, seen, options2 = defaultCloneOptions) {
      let k, out;
      if (seen.has(val))
        return seen.get(val);
      if (Array.isArray(val)) {
        for (out = Array(k = val.length), seen.set(val, out); k--; )
          out[k] = clone(val[k], seen, options2);
        return out;
      }
      if (Object.prototype.toString.call(val) === "[object Object]") {
        out = Object.create(Object.getPrototypeOf(val)), seen.set(val, out);
        let props = getOwnProperties(val);
        for (let k2 of props) {
          let descriptor = Object.getOwnPropertyDescriptor(val, k2);
          if (!descriptor)
            continue;
          let cloned = clone(val[k2], seen, options2);
          "get" in descriptor ? Object.defineProperty(out, k2, { ...descriptor, get() {
            return cloned;
          } }) : Object.defineProperty(out, k2, { ...descriptor, writable: options2.forceWritable ? true : descriptor.writable, value: cloned });
        }
        return out;
      }
      return val;
    }
    var import_pretty_format = __toESM3(require_build(), 1);
    init_loupe();
    var { AsymmetricMatcher, DOMCollection, DOMElement, Immutable, ReactElement, ReactTestComponent } = import_pretty_format.plugins;
    var PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];
    function stringify2(object, maxDepth = 10, { maxLength, ...options2 } = {}) {
      let MAX_LENGTH = maxLength ?? 1e4, result2;
      try {
        result2 = (0, import_pretty_format.format)(object, { maxDepth, escapeString: false, plugins: PLUGINS, ...options2 });
      } catch {
        result2 = (0, import_pretty_format.format)(object, { callToJSON: false, maxDepth, escapeString: false, plugins: PLUGINS, ...options2 });
      }
      return result2.length >= MAX_LENGTH && maxDepth > 1 ? stringify2(object, Math.floor(maxDepth / 2)) : result2;
    }
    var formatRegExp = /%[sdjifoOcj%]/g;
    function format(...args2) {
      if (typeof args2[0] != "string") {
        let objects = [];
        for (let i2 = 0; i2 < args2.length; i2++)
          objects.push(inspect2(args2[i2], { depth: 0, colors: false, compact: 3 }));
        return objects.join(" ");
      }
      let len = args2.length, i = 1, template = args2[0], str = String(template).replace(formatRegExp, (x) => {
        if (x === "%%")
          return "%";
        if (i >= len)
          return x;
        switch (x) {
          case "%s": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : typeof value2 == "number" && value2 === 0 && 1 / value2 < 0 ? "-0" : typeof value2 == "object" && value2 !== null ? inspect2(value2, { depth: 0, colors: false, compact: 3 }) : String(value2);
          }
          case "%d": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : Number(value2).toString();
          }
          case "%i": {
            let value2 = args2[i++];
            return typeof value2 == "bigint" ? `${value2.toString()}n` : Number.parseInt(String(value2)).toString();
          }
          case "%f":
            return Number.parseFloat(String(args2[i++])).toString();
          case "%o":
            return inspect2(args2[i++], { showHidden: true, showProxy: true });
          case "%O":
            return inspect2(args2[i++]);
          case "%c":
            return i++, "";
          case "%j":
            try {
              return JSON.stringify(args2[i++]);
            } catch (err) {
              let m2 = err.message;
              if (m2.includes("circular structure") || m2.includes("cyclic structures") || m2.includes("cyclic object"))
                return "[Circular]";
              throw err;
            }
          default:
            return x;
        }
      });
      for (let x = args2[i]; i < len; x = args2[++i])
        x === null || typeof x != "object" ? str += ` ${x}` : str += ` ${inspect2(x)}`;
      return str;
    }
    function inspect2(obj, options2 = {}) {
      return options2.truncate === 0 && (options2.truncate = Number.POSITIVE_INFINITY), inspect(obj, options2);
    }
    var SAFE_TIMERS_SYMBOL = Symbol("vitest:SAFE_TIMERS");
    var SAFE_COLORS_SYMBOL = Symbol("vitest:SAFE_COLORS");
    var colorsMap = { bold: ["\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"], dim: ["\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"], italic: ["\x1B[3m", "\x1B[23m"], underline: ["\x1B[4m", "\x1B[24m"], inverse: ["\x1B[7m", "\x1B[27m"], hidden: ["\x1B[8m", "\x1B[28m"], strikethrough: ["\x1B[9m", "\x1B[29m"], black: ["\x1B[30m", "\x1B[39m"], red: ["\x1B[31m", "\x1B[39m"], green: ["\x1B[32m", "\x1B[39m"], yellow: ["\x1B[33m", "\x1B[39m"], blue: ["\x1B[34m", "\x1B[39m"], magenta: ["\x1B[35m", "\x1B[39m"], cyan: ["\x1B[36m", "\x1B[39m"], white: ["\x1B[37m", "\x1B[39m"], gray: ["\x1B[90m", "\x1B[39m"], bgBlack: ["\x1B[40m", "\x1B[49m"], bgRed: ["\x1B[41m", "\x1B[49m"], bgGreen: ["\x1B[42m", "\x1B[49m"], bgYellow: ["\x1B[43m", "\x1B[49m"], bgBlue: ["\x1B[44m", "\x1B[49m"], bgMagenta: ["\x1B[45m", "\x1B[49m"], bgCyan: ["\x1B[46m", "\x1B[49m"], bgWhite: ["\x1B[47m", "\x1B[49m"] };
    var colorsEntries = Object.entries(colorsMap);
    function string(str) {
      return String(str);
    }
    string.open = "";
    string.close = "";
    var defaultColors = colorsEntries.reduce((acc, [key2]) => (acc[key2] = string, acc), { isColorSupported: false });
    function getColors() {
      return globalThis[SAFE_COLORS_SYMBOL] || defaultColors;
    }
    var import_pretty_format2 = __toESM3(require_build(), 1);
    init_loupe();
    var Identifier;
    var JSXIdentifier;
    var JSXPunctuator;
    var JSXString;
    var JSXText;
    var KeywordsWithExpressionAfter;
    var KeywordsWithNoLineTerminatorAfter;
    var LineTerminatorSequence;
    var MultiLineComment;
    var Newline;
    var NumericLiteral;
    var Punctuator;
    var RegularExpressionLiteral;
    var SingleLineComment;
    var StringLiteral;
    var Template;
    var TokensNotPrecedingObjectLiteral;
    var TokensPrecedingExpression;
    var WhiteSpace;
    RegularExpressionLiteral = /\/(?![*\/])(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\\]).|\\.)*(\/[$_\u200C\u200D\p{ID_Continue}]*|\\)?/yu;
    Punctuator = /--|\+\+|=>|\.{3}|\??\.(?!\d)|(?:&&|\|\||\?\?|[+\-%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2}|\/(?![\/*]))=?|[?~,:;[\](){}]/y;
    Identifier = /(\x23?)(?=[$_\p{ID_Start}\\])(?:[$_\u200C\u200D\p{ID_Continue}]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+/yu;
    StringLiteral = /(['"])(?:(?!\1)[^\\\n\r]|\\(?:\r\n|[^]))*(\1)?/y;
    NumericLiteral = /(?:0[xX][\da-fA-F](?:_?[\da-fA-F])*|0[oO][0-7](?:_?[0-7])*|0[bB][01](?:_?[01])*)n?|0n|[1-9](?:_?\d)*n|(?:(?:0(?!\d)|0\d*[89]\d*|[1-9](?:_?\d)*)(?:\.(?:\d(?:_?\d)*)?)?|\.\d(?:_?\d)*)(?:[eE][+-]?\d(?:_?\d)*)?|0[0-7]+/y;
    Template = /[`}](?:[^`\\$]|\\[^]|\$(?!\{))*(`|\$\{)?/y;
    WhiteSpace = /[\t\v\f\ufeff\p{Zs}]+/yu;
    LineTerminatorSequence = /\r?\n|[\r\u2028\u2029]/y;
    MultiLineComment = /\/\*(?:[^*]|\*(?!\/))*(\*\/)?/y;
    SingleLineComment = /\/\/.*/y;
    JSXPunctuator = /[<>.:={}]|\/(?![\/*])/y;
    JSXIdentifier = /[$_\p{ID_Start}][$_\u200C\u200D\p{ID_Continue}-]*/yu;
    JSXString = /(['"])(?:(?!\1)[^])*(\1)?/y;
    JSXText = /[^<>{}]+/y;
    TokensPrecedingExpression = /^(?:[\/+-]|\.{3}|\?(?:InterpolationIn(?:JSX|Template)|NoLineTerminatorHere|NonExpressionParenEnd|UnaryIncDec))?$|[{}([,;<>=*%&|^!~?:]$/;
    TokensNotPrecedingObjectLiteral = /^(?:=>|[;\]){}]|else|\?(?:NoLineTerminatorHere|NonExpressionParenEnd))?$/;
    KeywordsWithExpressionAfter = /^(?:await|case|default|delete|do|else|instanceof|new|return|throw|typeof|void|yield)$/;
    KeywordsWithNoLineTerminatorAfter = /^(?:return|throw|yield)$/;
    Newline = RegExp(LineTerminatorSequence.source);
    var reservedWords = { keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"], strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"] };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var import_pretty_format3 = __toESM3(require_build(), 1);
    var diff$1 = __toESM3(require_build2(), 1);
    function getType2(value2) {
      if (value2 === void 0)
        return "undefined";
      if (value2 === null)
        return "null";
      if (Array.isArray(value2))
        return "array";
      if (typeof value2 == "boolean")
        return "boolean";
      if (typeof value2 == "function")
        return "function";
      if (typeof value2 == "number")
        return "number";
      if (typeof value2 == "string")
        return "string";
      if (typeof value2 == "bigint")
        return "bigint";
      if (typeof value2 == "object") {
        if (value2 != null) {
          if (value2.constructor === RegExp)
            return "regexp";
          if (value2.constructor === Map)
            return "map";
          if (value2.constructor === Set)
            return "set";
          if (value2.constructor === Date)
            return "date";
        }
        return "object";
      } else if (typeof value2 == "symbol")
        return "symbol";
      throw new Error(`value of unknown type: ${value2}`);
    }
    var DIFF_DELETE = -1;
    var DIFF_INSERT = 1;
    var DIFF_EQUAL = 0;
    var Diff = class {
      0;
      1;
      constructor(op, text) {
        this[0] = op, this[1] = text;
      }
    };
    var NO_DIFF_MESSAGE = "Compared values have no visual difference.";
    var SIMILAR_MESSAGE = "Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead.";
    function formatTrailingSpaces(line, trailingSpaceFormatter) {
      return line.replace(/\s+$/, (match) => trailingSpaceFormatter(match));
    }
    function printDiffLine(line, isFirstOrLast, color, indicator, trailingSpaceFormatter, emptyFirstOrLastLinePlaceholder) {
      return line.length !== 0 ? color(`${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`) : indicator !== " " ? color(indicator) : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0 ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`) : "";
    }
    function printDeleteLine(line, isFirstOrLast, { aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function printInsertLine(line, isFirstOrLast, { bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function printCommonLine(line, isFirstOrLast, { commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
      return printDiffLine(line, isFirstOrLast, commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
    }
    function createPatchMark(aStart, aEnd, bStart, bEnd, { patchColor }) {
      return patchColor(`@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`);
    }
    function joinAlignedDiffsNoExpand(diffs, options2) {
      let iLength = diffs.length, nContextLines = options2.contextLines, nContextLines2 = nContextLines + nContextLines, jLength = iLength, hasExcessAtStartOrEnd = false, nExcessesBetweenChanges = 0, i = 0;
      for (; i !== iLength; ) {
        let iStart = i;
        for (; i !== iLength && diffs[i][0] === DIFF_EQUAL; )
          i += 1;
        if (iStart !== i)
          if (iStart === 0)
            i > nContextLines && (jLength -= i - nContextLines, hasExcessAtStartOrEnd = true);
          else if (i === iLength) {
            let n = i - iStart;
            n > nContextLines && (jLength -= n - nContextLines, hasExcessAtStartOrEnd = true);
          } else {
            let n = i - iStart;
            n > nContextLines2 && (jLength -= n - nContextLines2, nExcessesBetweenChanges += 1);
          }
        for (; i !== iLength && diffs[i][0] !== DIFF_EQUAL; )
          i += 1;
      }
      let hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;
      nExcessesBetweenChanges !== 0 ? jLength += nExcessesBetweenChanges + 1 : hasExcessAtStartOrEnd && (jLength += 1);
      let jLast = jLength - 1, lines = [], jPatchMark = 0;
      hasPatch && lines.push("");
      let aStart = 0, bStart = 0, aEnd = 0, bEnd = 0, pushCommonLine = (line) => {
        let j = lines.length;
        lines.push(printCommonLine(line, j === 0 || j === jLast, options2)), aEnd += 1, bEnd += 1;
      }, pushDeleteLine = (line) => {
        let j = lines.length;
        lines.push(printDeleteLine(line, j === 0 || j === jLast, options2)), aEnd += 1;
      }, pushInsertLine = (line) => {
        let j = lines.length;
        lines.push(printInsertLine(line, j === 0 || j === jLast, options2)), bEnd += 1;
      };
      for (i = 0; i !== iLength; ) {
        let iStart = i;
        for (; i !== iLength && diffs[i][0] === DIFF_EQUAL; )
          i += 1;
        if (iStart !== i)
          if (iStart === 0) {
            i > nContextLines && (iStart = i - nContextLines, aStart = iStart, bStart = iStart, aEnd = aStart, bEnd = bStart);
            for (let iCommon = iStart; iCommon !== i; iCommon += 1)
              pushCommonLine(diffs[iCommon][1]);
          } else if (i === iLength) {
            let iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;
            for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1)
              pushCommonLine(diffs[iCommon][1]);
          } else {
            let nCommon = i - iStart;
            if (nCommon > nContextLines2) {
              let iEnd = iStart + nContextLines;
              for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
              lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options2), jPatchMark = lines.length, lines.push("");
              let nOmit = nCommon - nContextLines2;
              aStart = aEnd + nOmit, bStart = bEnd + nOmit, aEnd = aStart, bEnd = bStart;
              for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
            } else
              for (let iCommon = iStart; iCommon !== i; iCommon += 1)
                pushCommonLine(diffs[iCommon][1]);
          }
        for (; i !== iLength && diffs[i][0] === DIFF_DELETE; )
          pushDeleteLine(diffs[i][1]), i += 1;
        for (; i !== iLength && diffs[i][0] === DIFF_INSERT; )
          pushInsertLine(diffs[i][1]), i += 1;
      }
      return hasPatch && (lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options2)), lines.join(`
`);
    }
    function joinAlignedDiffsExpand(diffs, options2) {
      return diffs.map((diff2, i, diffs2) => {
        let line = diff2[1], isFirstOrLast = i === 0 || i === diffs2.length - 1;
        switch (diff2[0]) {
          case DIFF_DELETE:
            return printDeleteLine(line, isFirstOrLast, options2);
          case DIFF_INSERT:
            return printInsertLine(line, isFirstOrLast, options2);
          default:
            return printCommonLine(line, isFirstOrLast, options2);
        }
      }).join(`
`);
    }
    var noColor = (string2) => string2;
    var DIFF_CONTEXT_DEFAULT = 5;
    function getDefaultOptions() {
      let c = getColors();
      return { aAnnotation: "Expected", aColor: c.green, aIndicator: "-", bAnnotation: "Received", bColor: c.red, bIndicator: "+", changeColor: c.inverse, changeLineTrailingSpaceColor: noColor, commonColor: c.dim, commonIndicator: " ", commonLineTrailingSpaceColor: noColor, compareKeys: void 0, contextLines: DIFF_CONTEXT_DEFAULT, emptyFirstOrLastLinePlaceholder: "", expand: true, includeChangeCounts: false, omitAnnotationLines: false, patchColor: c.yellow };
    }
    function getCompareKeys(compareKeys) {
      return compareKeys && typeof compareKeys == "function" ? compareKeys : void 0;
    }
    function getContextLines(contextLines) {
      return typeof contextLines == "number" && Number.isSafeInteger(contextLines) && contextLines >= 0 ? contextLines : DIFF_CONTEXT_DEFAULT;
    }
    function normalizeDiffOptions(options2 = {}) {
      return { ...getDefaultOptions(), ...options2, compareKeys: getCompareKeys(options2.compareKeys), contextLines: getContextLines(options2.contextLines) };
    }
    function isEmptyString(lines) {
      return lines.length === 1 && lines[0].length === 0;
    }
    function countChanges(diffs) {
      let a = 0, b2 = 0;
      return diffs.forEach((diff2) => {
        switch (diff2[0]) {
          case DIFF_DELETE:
            a += 1;
            break;
          case DIFF_INSERT:
            b2 += 1;
            break;
        }
      }), { a, b: b2 };
    }
    function printAnnotation({ aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator, includeChangeCounts, omitAnnotationLines }, changeCounts) {
      if (omitAnnotationLines)
        return "";
      let aRest = "", bRest = "";
      if (includeChangeCounts) {
        let aCount = String(changeCounts.a), bCount = String(changeCounts.b), baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length, aAnnotationPadding = " ".repeat(Math.max(0, baAnnotationLengthDiff)), bAnnotationPadding = " ".repeat(Math.max(0, -baAnnotationLengthDiff)), baCountLengthDiff = bCount.length - aCount.length, aCountPadding = " ".repeat(Math.max(0, baCountLengthDiff)), bCountPadding = " ".repeat(Math.max(0, -baCountLengthDiff));
        aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`, bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;
      }
      let a = `${aIndicator} ${aAnnotation}${aRest}`, b2 = `${bIndicator} ${bAnnotation}${bRest}`;
      return `${aColor(a)}
${bColor(b2)}

`;
    }
    function printDiffLines(diffs, options2) {
      return printAnnotation(options2, countChanges(diffs)) + (options2.expand ? joinAlignedDiffsExpand(diffs, options2) : joinAlignedDiffsNoExpand(diffs, options2));
    }
    function diffLinesUnified(aLines, bLines, options2) {
      return printDiffLines(diffLinesRaw(isEmptyString(aLines) ? [] : aLines, isEmptyString(bLines) ? [] : bLines), normalizeDiffOptions(options2));
    }
    function diffLinesUnified2(aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options2) {
      if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare) && (aLinesDisplay = [], aLinesCompare = []), isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare) && (bLinesDisplay = [], bLinesCompare = []), aLinesDisplay.length !== aLinesCompare.length || bLinesDisplay.length !== bLinesCompare.length)
        return diffLinesUnified(aLinesDisplay, bLinesDisplay, options2);
      let diffs = diffLinesRaw(aLinesCompare, bLinesCompare), aIndex = 0, bIndex = 0;
      return diffs.forEach((diff2) => {
        switch (diff2[0]) {
          case DIFF_DELETE:
            diff2[1] = aLinesDisplay[aIndex], aIndex += 1;
            break;
          case DIFF_INSERT:
            diff2[1] = bLinesDisplay[bIndex], bIndex += 1;
            break;
          default:
            diff2[1] = bLinesDisplay[bIndex], aIndex += 1, bIndex += 1;
        }
      }), printDiffLines(diffs, normalizeDiffOptions(options2));
    }
    function diffLinesRaw(aLines, bLines) {
      let aLength = aLines.length, bLength = bLines.length, isCommon = (aIndex2, bIndex2) => aLines[aIndex2] === bLines[bIndex2], diffs = [], aIndex = 0, bIndex = 0, foundSubsequence = (nCommon, aCommon, bCommon) => {
        for (; aIndex !== aCommon; aIndex += 1)
          diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
        for (; bIndex !== bCommon; bIndex += 1)
          diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
        for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1)
          diffs.push(new Diff(DIFF_EQUAL, bLines[bIndex]));
      };
      for ((diff$1.default.default || diff$1.default)(aLength, bLength, isCommon, foundSubsequence); aIndex !== aLength; aIndex += 1)
        diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
      for (; bIndex !== bLength; bIndex += 1)
        diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
      return diffs;
    }
    function getCommonMessage(message, options2) {
      let { commonColor } = normalizeDiffOptions(options2);
      return commonColor(message);
    }
    var { AsymmetricMatcher: AsymmetricMatcher2, DOMCollection: DOMCollection2, DOMElement: DOMElement2, Immutable: Immutable2, ReactElement: ReactElement2, ReactTestComponent: ReactTestComponent2 } = import_pretty_format3.plugins;
    var PLUGINS2 = [ReactTestComponent2, ReactElement2, DOMElement2, DOMCollection2, Immutable2, AsymmetricMatcher2];
    var FORMAT_OPTIONS = { plugins: PLUGINS2 };
    var FALLBACK_FORMAT_OPTIONS = { callToJSON: false, maxDepth: 10, plugins: PLUGINS2 };
    function diff(a, b2, options2) {
      if (Object.is(a, b2))
        return "";
      let aType = getType2(a), expectedType = aType, omitDifference = false;
      if (aType === "object" && typeof a.asymmetricMatch == "function") {
        if (a.$$typeof !== Symbol.for("jest.asymmetricMatcher") || typeof a.getExpectedType != "function")
          return null;
        expectedType = a.getExpectedType(), omitDifference = expectedType === "string";
      }
      if (expectedType !== getType2(b2)) {
        let { aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator } = normalizeDiffOptions(options2), formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options2), aDisplay = (0, import_pretty_format3.format)(a, formatOptions), bDisplay = (0, import_pretty_format3.format)(b2, formatOptions), aDiff = `${aColor(`${aIndicator} ${aAnnotation}:`)} 
${aDisplay}`, bDiff = `${bColor(`${bIndicator} ${bAnnotation}:`)} 
${bDisplay}`;
        return `${aDiff}

${bDiff}`;
      }
      if (omitDifference)
        return null;
      switch (aType) {
        case "string":
          return diffLinesUnified(a.split(`
`), b2.split(`
`), options2);
        case "boolean":
        case "number":
          return comparePrimitive(a, b2, options2);
        case "map":
          return compareObjects(sortMap(a), sortMap(b2), options2);
        case "set":
          return compareObjects(sortSet(a), sortSet(b2), options2);
        default:
          return compareObjects(a, b2, options2);
      }
    }
    function comparePrimitive(a, b2, options2) {
      let aFormat = (0, import_pretty_format3.format)(a, FORMAT_OPTIONS), bFormat = (0, import_pretty_format3.format)(b2, FORMAT_OPTIONS);
      return aFormat === bFormat ? "" : diffLinesUnified(aFormat.split(`
`), bFormat.split(`
`), options2);
    }
    function sortMap(map) {
      return new Map(Array.from(map.entries()).sort());
    }
    function sortSet(set2) {
      return new Set(Array.from(set2.values()).sort());
    }
    function compareObjects(a, b2, options2) {
      let difference, hasThrown = false;
      try {
        let formatOptions = getFormatOptions(FORMAT_OPTIONS, options2);
        difference = getObjectsDifference(a, b2, formatOptions, options2);
      } catch {
        hasThrown = true;
      }
      let noDiffMessage = getCommonMessage(NO_DIFF_MESSAGE, options2);
      if (difference === void 0 || difference === noDiffMessage) {
        let formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options2);
        difference = getObjectsDifference(a, b2, formatOptions, options2), difference !== noDiffMessage && !hasThrown && (difference = `${getCommonMessage(SIMILAR_MESSAGE, options2)}

${difference}`);
      }
      return difference;
    }
    function getFormatOptions(formatOptions, options2) {
      let { compareKeys } = normalizeDiffOptions(options2);
      return { ...formatOptions, compareKeys };
    }
    function getObjectsDifference(a, b2, formatOptions, options2) {
      let formatOptionsZeroIndent = { ...formatOptions, indent: 0 }, aCompare = (0, import_pretty_format3.format)(a, formatOptionsZeroIndent), bCompare = (0, import_pretty_format3.format)(b2, formatOptionsZeroIndent);
      if (aCompare === bCompare)
        return getCommonMessage(NO_DIFF_MESSAGE, options2);
      {
        let aDisplay = (0, import_pretty_format3.format)(a, formatOptions), bDisplay = (0, import_pretty_format3.format)(b2, formatOptions);
        return diffLinesUnified2(aDisplay.split(`
`), bDisplay.split(`
`), aCompare.split(`
`), bCompare.split(`
`), options2);
      }
    }
    function m(e, t) {
      if (!e)
        throw new Error(t);
    }
    function y(e, t) {
      return typeof t === e;
    }
    function b(e) {
      return e instanceof Promise;
    }
    function d(e, t, n) {
      Object.defineProperty(e, t, n);
    }
    function p(e, t, n) {
      Object.defineProperty(e, t, { value: n });
    }
    var u = Symbol.for("tinyspy:spy");
    var I = /* @__PURE__ */ new Set();
    var M = (e) => {
      e.called = false, e.callCount = 0, e.calls = [], e.results = [], e.next = [];
    };
    var C = (e) => (d(e, u, { value: { reset: () => M(e[u]) } }), e[u]);
    var v = (e) => e[u] || C(e);
    function T(e) {
      m(y("function", e) || y("undefined", e), "cannot spy on a non-function value");
      let t = function(...a) {
        let r = v(t);
        r.called = true, r.callCount++, r.calls.push(a);
        let i = r.next.shift();
        if (i) {
          r.results.push(i);
          let [s, l] = i;
          if (s === "ok")
            return l;
          throw l;
        }
        let o, c = "ok";
        if (r.impl)
          try {
            new.target ? o = Reflect.construct(r.impl, a, new.target) : o = r.impl.apply(this, a), c = "ok";
          } catch (s) {
            throw o = s, c = "error", r.results.push([c, s]), s;
          }
        let x = [c, o];
        if (b(o)) {
          let s = o.then((l) => x[1] = l).catch((l) => {
            throw x[0] = "error", x[1] = l, l;
          });
          Object.assign(s, o), o = s;
        }
        return r.results.push(x), o;
      };
      p(t, "_isMockFunction", true), p(t, "length", e ? e.length : 0), p(t, "name", e && e.name || "spy");
      let n = v(t);
      return n.reset(), n.impl = e, t;
    }
    var P = (e, t) => Object.getOwnPropertyDescriptor(e, t);
    function E(e, t, n) {
      m(!y("undefined", e), "spyOn could not find an object to spy upon"), m(y("object", e) || y("function", e), "cannot spyOn on a primitive value");
      let a = () => {
        if (!y("object", t))
          return [t, "value"];
        if ("getter" in t && "setter" in t)
          throw new Error("cannot spy on both getter and setter");
        if ("getter" in t)
          return [t.getter, "get"];
        if ("setter" in t)
          return [t.setter, "set"];
        throw new Error("specify getter or setter to spy on");
      }, [r, i] = a(), o = P(e, r), c = Object.getPrototypeOf(e), x = c && P(c, r), s = o || x;
      m(s || r in e, `${String(r)} does not exist`);
      let l = false;
      i === "value" && s && !s.value && s.get && (i = "get", l = true, n = s.get());
      let f2;
      s ? f2 = s[i] : i !== "value" ? f2 = () => e[r] : f2 = e[r], n || (n = f2);
      let S = T(n), O = (w) => {
        let { value: G, ...k } = s || { configurable: true, writable: true };
        i !== "value" && delete k.writable, k[i] = w, d(e, r, k);
      }, K = () => s ? d(e, r, s) : O(f2), A = S[u];
      return p(A, "restore", K), p(A, "getOriginal", () => l ? f2() : f2), p(A, "willCall", (w) => (A.impl = w, S)), O(l ? () => S : S), I.add(S), S;
    }
    var mocks = /* @__PURE__ */ new Set();
    function isMockFunction(fn222) {
      return typeof fn222 == "function" && "_isMockFunction" in fn222 && fn222._isMockFunction;
    }
    function spyOn(obj, method, accessType) {
      let objMethod = accessType ? { [{ get: "getter", set: "setter" }[accessType]]: method } : method, stub = E(obj, objMethod);
      return enhanceSpy(stub);
    }
    var callOrder = 0;
    function enhanceSpy(spy) {
      let stub = spy, implementation, instances = [], invocations = [], state = v(spy), mockContext = { get calls() {
        return state.calls;
      }, get instances() {
        return instances;
      }, get invocationCallOrder() {
        return invocations;
      }, get results() {
        return state.results.map(([callType, value2]) => ({ type: callType === "error" ? "throw" : "return", value: value2 }));
      }, get lastCall() {
        return state.calls[state.calls.length - 1];
      } }, onceImplementations = [], implementationChangedTemporarily = false;
      function mockCall(...args2) {
        return instances.push(this), invocations.push(++callOrder), (implementationChangedTemporarily ? implementation : onceImplementations.shift() || implementation || state.getOriginal() || (() => {
        })).apply(this, args2);
      }
      let name2 = stub.name;
      stub.getMockName = () => name2 || "vi.fn()", stub.mockName = (n) => (name2 = n, stub), stub.mockClear = () => (state.reset(), instances = [], invocations = [], stub), stub.mockReset = () => (stub.mockClear(), implementation = () => {
      }, onceImplementations = [], stub), stub.mockRestore = () => (stub.mockReset(), state.restore(), implementation = void 0, stub), stub.getMockImplementation = () => implementation, stub.mockImplementation = (fn222) => (implementation = fn222, state.willCall(mockCall), stub), stub.mockImplementationOnce = (fn222) => (onceImplementations.push(fn222), stub);
      function withImplementation(fn222, cb) {
        let originalImplementation = implementation;
        implementation = fn222, state.willCall(mockCall), implementationChangedTemporarily = true;
        let reset = () => {
          implementation = originalImplementation, implementationChangedTemporarily = false;
        }, result2 = cb();
        return result2 instanceof Promise ? result2.then(() => (reset(), stub)) : (reset(), stub);
      }
      return stub.withImplementation = withImplementation, stub.mockReturnThis = () => stub.mockImplementation(function() {
        return this;
      }), stub.mockReturnValue = (val) => stub.mockImplementation(() => val), stub.mockReturnValueOnce = (val) => stub.mockImplementationOnce(() => val), stub.mockResolvedValue = (val) => stub.mockImplementation(() => Promise.resolve(val)), stub.mockResolvedValueOnce = (val) => stub.mockImplementationOnce(() => Promise.resolve(val)), stub.mockRejectedValue = (val) => stub.mockImplementation(() => Promise.reject(val)), stub.mockRejectedValueOnce = (val) => stub.mockImplementationOnce(() => Promise.reject(val)), Object.defineProperty(stub, "mock", { get: () => mockContext }), state.willCall(mockCall), mocks.add(stub), stub;
    }
    function fn2(implementation) {
      let enhancedSpy = enhanceSpy(E({ spy: implementation || (() => {
      }) }, "spy"));
      return implementation && enhancedSpy.mockImplementation(implementation), enhancedSpy;
    }
    var import_pretty_format4 = __toESM3(require_build(), 1);
    var import_diff_sequences = __toESM3(require_build2(), 1);
    init_loupe();
    var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
    var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
    function isImmutable(v2) {
      return v2 && (v2[IS_COLLECTION_SYMBOL] || v2[IS_RECORD_SYMBOL]);
    }
    var OBJECT_PROTO = Object.getPrototypeOf({});
    function getUnserializableMessage(err) {
      return err instanceof Error ? `<unserializable>: ${err.message}` : typeof err == "string" ? `<unserializable>: ${err}` : "<unserializable>";
    }
    function serializeError(val, seen = /* @__PURE__ */ new WeakMap()) {
      if (!val || typeof val == "string")
        return val;
      if (typeof val == "function")
        return `Function<${val.name || "anonymous"}>`;
      if (typeof val == "symbol")
        return val.toString();
      if (typeof val != "object")
        return val;
      if (isImmutable(val))
        return serializeError(val.toJSON(), seen);
      if (val instanceof Promise || val.constructor && val.constructor.prototype === "AsyncFunction")
        return "Promise";
      if (typeof Element < "u" && val instanceof Element)
        return val.tagName;
      if (typeof val.asymmetricMatch == "function")
        return `${val.toString()} ${format(val.sample)}`;
      if (seen.has(val))
        return seen.get(val);
      if (Array.isArray(val)) {
        let clone2 = new Array(val.length);
        return seen.set(val, clone2), val.forEach((e, i) => {
          try {
            clone2[i] = serializeError(e, seen);
          } catch (err) {
            clone2[i] = getUnserializableMessage(err);
          }
        }), clone2;
      } else {
        let clone2 = /* @__PURE__ */ Object.create(null);
        seen.set(val, clone2);
        let obj = val;
        for (; obj && obj !== OBJECT_PROTO; )
          Object.getOwnPropertyNames(obj).forEach((key2) => {
            if (!(key2 in clone2))
              try {
                clone2[key2] = serializeError(val[key2], seen);
              } catch (err) {
                delete clone2[key2], clone2[key2] = getUnserializableMessage(err);
              }
          }), obj = Object.getPrototypeOf(obj);
        return clone2;
      }
    }
    function normalizeErrorMessage(message) {
      return message.replace(/__(vite_ssr_import|vi_import)_\d+__\./g, "");
    }
    function processError(err, diffOptions) {
      if (!err || typeof err != "object")
        return { message: err };
      if (err.stack && (err.stackStr = String(err.stack)), err.name && (err.nameStr = String(err.name)), err.showDiff || err.showDiff === void 0 && err.expected !== void 0 && err.actual !== void 0) {
        let clonedActual = deepClone(err.actual, { forceWritable: true }), clonedExpected = deepClone(err.expected, { forceWritable: true }), { replacedActual, replacedExpected } = replaceAsymmetricMatcher(clonedActual, clonedExpected);
        err.diff = diff(replacedExpected, replacedActual, { ...diffOptions, ...err.diffOptions });
      }
      typeof err.expected != "string" && (err.expected = stringify2(err.expected, 10)), typeof err.actual != "string" && (err.actual = stringify2(err.actual, 10));
      try {
        typeof err.message == "string" && (err.message = normalizeErrorMessage(err.message)), typeof err.cause == "object" && typeof err.cause.message == "string" && (err.cause.message = normalizeErrorMessage(err.cause.message));
      } catch {
      }
      try {
        return serializeError(err);
      } catch (e) {
        return serializeError(new Error(`Failed to fully serialize error: ${e == null ? void 0 : e.message}
Inner error message: ${err == null ? void 0 : err.message}`));
      }
    }
    function isAsymmetricMatcher(data) {
      return getType(data) === "Object" && typeof data.asymmetricMatch == "function";
    }
    function isReplaceable(obj1, obj2) {
      let obj1Type = getType(obj1), obj2Type = getType(obj2);
      return obj1Type === obj2Type && (obj1Type === "Object" || obj1Type === "Array");
    }
    function replaceAsymmetricMatcher(actual, expected, actualReplaced = /* @__PURE__ */ new WeakSet(), expectedReplaced = /* @__PURE__ */ new WeakSet()) {
      return isReplaceable(actual, expected) ? actualReplaced.has(actual) || expectedReplaced.has(expected) ? { replacedActual: actual, replacedExpected: expected } : (actualReplaced.add(actual), expectedReplaced.add(expected), getOwnProperties(expected).forEach((key2) => {
        let expectedValue = expected[key2], actualValue = actual[key2];
        if (isAsymmetricMatcher(expectedValue))
          expectedValue.asymmetricMatch(actualValue) && (actual[key2] = expectedValue);
        else if (isAsymmetricMatcher(actualValue))
          actualValue.asymmetricMatch(expectedValue) && (expected[key2] = actualValue);
        else if (isReplaceable(actualValue, expectedValue)) {
          let replaced = replaceAsymmetricMatcher(actualValue, expectedValue, actualReplaced, expectedReplaced);
          actual[key2] = replaced.replacedActual, expected[key2] = replaced.replacedExpected;
        }
      }), { replacedActual: actual, replacedExpected: expected }) : { replacedActual: actual, replacedExpected: expected };
    }
    var MATCHERS_OBJECT = Symbol.for("matchers-object");
    var JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object-storybook");
    var GLOBAL_EXPECT = Symbol.for("expect-global");
    var ASYMMETRIC_MATCHERS_OBJECT = Symbol.for("asymmetric-matchers-object");
    if (!Object.prototype.hasOwnProperty.call(globalThis, MATCHERS_OBJECT)) {
      let globalState = /* @__PURE__ */ new WeakMap();
      Object.defineProperty(globalThis, MATCHERS_OBJECT, { get: () => globalState });
    }
    if (!Object.prototype.hasOwnProperty.call(globalThis, JEST_MATCHERS_OBJECT)) {
      let matchers = /* @__PURE__ */ Object.create(null), customEqualityTesters = [];
      Object.defineProperty(globalThis, JEST_MATCHERS_OBJECT, { configurable: true, get: () => ({ state: globalThis[MATCHERS_OBJECT].get(globalThis[GLOBAL_EXPECT]), matchers, customEqualityTesters }) });
    }
    if (!Object.prototype.hasOwnProperty.call(globalThis, ASYMMETRIC_MATCHERS_OBJECT)) {
      let assymetricMatchers = /* @__PURE__ */ Object.create(null);
      Object.defineProperty(globalThis, ASYMMETRIC_MATCHERS_OBJECT, { get: () => assymetricMatchers });
    }
    function getState(expect4) {
      return globalThis[MATCHERS_OBJECT].get(expect4);
    }
    function setState(state, expect4) {
      let map = globalThis[MATCHERS_OBJECT], current = map.get(expect4) || {};
      Object.assign(current, state), map.set(expect4, current);
    }
    function getMatcherUtils() {
      let c = () => getColors(), EXPECTED_COLOR = c().green, RECEIVED_COLOR = c().red, INVERTED_COLOR = c().inverse, BOLD_WEIGHT = c().bold, DIM_COLOR = c().dim;
      function matcherHint(matcherName, received = "received", expected = "expected", options2 = {}) {
        let { comment = "", isDirectExpectCall = false, isNot = false, promise = "", secondArgument = "", expectedColor = EXPECTED_COLOR, receivedColor = RECEIVED_COLOR, secondArgumentColor = EXPECTED_COLOR } = options2, hint = "", dimString = "expect";
        return !isDirectExpectCall && received !== "" && (hint += DIM_COLOR(`${dimString}(`) + receivedColor(received), dimString = ")"), promise !== "" && (hint += DIM_COLOR(`${dimString}.`) + promise, dimString = ""), isNot && (hint += `${DIM_COLOR(`${dimString}.`)}not`, dimString = ""), matcherName.includes(".") ? dimString += matcherName : (hint += DIM_COLOR(`${dimString}.`) + matcherName, dimString = ""), expected === "" ? dimString += "()" : (hint += DIM_COLOR(`${dimString}(`) + expectedColor(expected), secondArgument && (hint += DIM_COLOR(", ") + secondArgumentColor(secondArgument)), dimString = ")"), comment !== "" && (dimString += ` // ${comment}`), dimString !== "" && (hint += DIM_COLOR(dimString)), hint;
      }
      let SPACE_SYMBOL = "\xB7", replaceTrailingSpaces = (text) => text.replace(/\s+$/gm, (spaces) => SPACE_SYMBOL.repeat(spaces.length));
      return { EXPECTED_COLOR, RECEIVED_COLOR, INVERTED_COLOR, BOLD_WEIGHT, DIM_COLOR, matcherHint, printReceived: (object) => RECEIVED_COLOR(replaceTrailingSpaces(stringify2(object))), printExpected: (value2) => EXPECTED_COLOR(replaceTrailingSpaces(stringify2(value2))) };
    }
    function getCustomEqualityTesters() {
      return globalThis[JEST_MATCHERS_OBJECT].customEqualityTesters;
    }
    function equals(a, b2, customTesters, strictCheck) {
      return customTesters = customTesters || [], eq2(a, b2, [], [], customTesters, strictCheck ? hasKey : hasDefinedKey);
    }
    var functionToString = Function.prototype.toString;
    function isAsymmetric(obj) {
      return !!obj && typeof obj == "object" && "asymmetricMatch" in obj && isA("Function", obj.asymmetricMatch);
    }
    function asymmetricMatch(a, b2) {
      let asymmetricA = isAsymmetric(a), asymmetricB = isAsymmetric(b2);
      if (!(asymmetricA && asymmetricB)) {
        if (asymmetricA)
          return a.asymmetricMatch(b2);
        if (asymmetricB)
          return b2.asymmetricMatch(a);
      }
    }
    function eq2(a, b2, aStack, bStack, customTesters, hasKey2) {
      let result2 = true, asymmetricResult = asymmetricMatch(a, b2);
      if (asymmetricResult !== void 0)
        return asymmetricResult;
      let testerContext = { equals };
      for (let i = 0; i < customTesters.length; i++) {
        let customTesterResult = customTesters[i].call(testerContext, a, b2, customTesters);
        if (customTesterResult !== void 0)
          return customTesterResult;
      }
      if (a instanceof Error && b2 instanceof Error)
        return a.message === b2.message;
      if (typeof URL == "function" && a instanceof URL && b2 instanceof URL)
        return a.href === b2.href;
      if (Object.is(a, b2))
        return true;
      if (a === null || b2 === null)
        return a === b2;
      let className = Object.prototype.toString.call(a);
      if (className !== Object.prototype.toString.call(b2))
        return false;
      switch (className) {
        case "[object Boolean]":
        case "[object String]":
        case "[object Number]":
          return typeof a != typeof b2 ? false : typeof a != "object" && typeof b2 != "object" ? Object.is(a, b2) : Object.is(a.valueOf(), b2.valueOf());
        case "[object Date]": {
          let numA = +a, numB = +b2;
          return numA === numB || Number.isNaN(numA) && Number.isNaN(numB);
        }
        case "[object RegExp]":
          return a.source === b2.source && a.flags === b2.flags;
      }
      if (typeof a != "object" || typeof b2 != "object")
        return false;
      if (isDomNode(a) && isDomNode(b2))
        return a.isEqualNode(b2);
      let length = aStack.length;
      for (; length--; ) {
        if (aStack[length] === a)
          return bStack[length] === b2;
        if (bStack[length] === b2)
          return false;
      }
      if (aStack.push(a), bStack.push(b2), className === "[object Array]" && a.length !== b2.length)
        return false;
      let aKeys = keys(a, hasKey2), key2, size = aKeys.length;
      if (keys(b2, hasKey2).length !== size)
        return false;
      for (; size--; )
        if (key2 = aKeys[size], result2 = hasKey2(b2, key2) && eq2(a[key2], b2[key2], aStack, bStack, customTesters, hasKey2), !result2)
          return false;
      return aStack.pop(), bStack.pop(), result2;
    }
    function keys(obj, hasKey2) {
      let keys2 = [];
      for (let key2 in obj)
        hasKey2(obj, key2) && keys2.push(key2);
      return keys2.concat(Object.getOwnPropertySymbols(obj).filter((symbol) => Object.getOwnPropertyDescriptor(obj, symbol).enumerable));
    }
    function hasDefinedKey(obj, key2) {
      return hasKey(obj, key2) && obj[key2] !== void 0;
    }
    function hasKey(obj, key2) {
      return Object.prototype.hasOwnProperty.call(obj, key2);
    }
    function isA(typeName, value2) {
      return Object.prototype.toString.apply(value2) === `[object ${typeName}]`;
    }
    function isDomNode(obj) {
      return obj !== null && typeof obj == "object" && "nodeType" in obj && typeof obj.nodeType == "number" && "nodeName" in obj && typeof obj.nodeName == "string" && "isEqualNode" in obj && typeof obj.isEqualNode == "function";
    }
    var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
    var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
    var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
    function isImmutableUnorderedKeyed(maybeKeyed) {
      return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL] && !maybeKeyed[IS_ORDERED_SENTINEL]);
    }
    function isImmutableUnorderedSet(maybeSet) {
      return !!(maybeSet && maybeSet[IS_SET_SENTINEL] && !maybeSet[IS_ORDERED_SENTINEL]);
    }
    var IteratorSymbol = Symbol.iterator;
    function hasIterator(object) {
      return !!(object != null && object[IteratorSymbol]);
    }
    function iterableEquality(a, b2, customTesters = [], aStack = [], bStack = []) {
      if (typeof a != "object" || typeof b2 != "object" || Array.isArray(a) || Array.isArray(b2) || !hasIterator(a) || !hasIterator(b2))
        return;
      if (a.constructor !== b2.constructor)
        return false;
      let length = aStack.length;
      for (; length--; )
        if (aStack[length] === a)
          return bStack[length] === b2;
      aStack.push(a), bStack.push(b2);
      let filteredCustomTesters = [...customTesters.filter((t) => t !== iterableEquality), iterableEqualityWithStack];
      function iterableEqualityWithStack(a2, b22) {
        return iterableEquality(a2, b22, [...filteredCustomTesters], [...aStack], [...bStack]);
      }
      if (a.size !== void 0) {
        if (a.size !== b2.size)
          return false;
        if (isA("Set", a) || isImmutableUnorderedSet(a)) {
          let allFound = true;
          for (let aValue of a)
            if (!b2.has(aValue)) {
              let has2 = false;
              for (let bValue of b2)
                equals(aValue, bValue, filteredCustomTesters) === true && (has2 = true);
              if (has2 === false) {
                allFound = false;
                break;
              }
            }
          return aStack.pop(), bStack.pop(), allFound;
        } else if (isA("Map", a) || isImmutableUnorderedKeyed(a)) {
          let allFound = true;
          for (let aEntry of a)
            if (!b2.has(aEntry[0]) || !equals(aEntry[1], b2.get(aEntry[0]), filteredCustomTesters)) {
              let has2 = false;
              for (let bEntry of b2) {
                let matchedKey = equals(aEntry[0], bEntry[0], filteredCustomTesters), matchedValue = false;
                matchedKey === true && (matchedValue = equals(aEntry[1], bEntry[1], filteredCustomTesters)), matchedValue === true && (has2 = true);
              }
              if (has2 === false) {
                allFound = false;
                break;
              }
            }
          return aStack.pop(), bStack.pop(), allFound;
        }
      }
      let bIterator = b2[IteratorSymbol]();
      for (let aValue of a) {
        let nextB = bIterator.next();
        if (nextB.done || !equals(aValue, nextB.value, filteredCustomTesters))
          return false;
      }
      return bIterator.next().done ? (aStack.pop(), bStack.pop(), true) : false;
    }
    function hasPropertyInObject(object, key2) {
      return !object || typeof object != "object" || object === Object.prototype ? false : Object.prototype.hasOwnProperty.call(object, key2) || hasPropertyInObject(Object.getPrototypeOf(object), key2);
    }
    function isObjectWithKeys(a) {
      return isObject4(a) && !(a instanceof Error) && !Array.isArray(a) && !(a instanceof Date);
    }
    function subsetEquality(object, subset, customTesters = []) {
      let filteredCustomTesters = customTesters.filter((t) => t !== subsetEquality), subsetEqualityWithContext = (seenReferences = /* @__PURE__ */ new WeakMap()) => (object2, subset2) => {
        if (isObjectWithKeys(subset2))
          return Object.keys(subset2).every((key2) => {
            if (isObjectWithKeys(subset2[key2])) {
              if (seenReferences.has(subset2[key2]))
                return equals(object2[key2], subset2[key2], filteredCustomTesters);
              seenReferences.set(subset2[key2], true);
            }
            let result2 = object2 != null && hasPropertyInObject(object2, key2) && equals(object2[key2], subset2[key2], [...filteredCustomTesters, subsetEqualityWithContext(seenReferences)]);
            return seenReferences.delete(subset2[key2]), result2;
          });
      };
      return subsetEqualityWithContext()(object, subset);
    }
    function typeEquality(a, b2) {
      if (!(a == null || b2 == null || a.constructor === b2.constructor))
        return false;
    }
    function arrayBufferEquality(a, b2) {
      let dataViewA = a, dataViewB = b2;
      if (!(a instanceof DataView && b2 instanceof DataView)) {
        if (!(a instanceof ArrayBuffer) || !(b2 instanceof ArrayBuffer))
          return;
        try {
          dataViewA = new DataView(a), dataViewB = new DataView(b2);
        } catch {
          return;
        }
      }
      if (dataViewA.byteLength !== dataViewB.byteLength)
        return false;
      for (let i = 0; i < dataViewA.byteLength; i++)
        if (dataViewA.getUint8(i) !== dataViewB.getUint8(i))
          return false;
      return true;
    }
    function sparseArrayEquality(a, b2, customTesters = []) {
      if (!Array.isArray(a) || !Array.isArray(b2))
        return;
      let aKeys = Object.keys(a), bKeys = Object.keys(b2), filteredCustomTesters = customTesters.filter((t) => t !== sparseArrayEquality);
      return equals(a, b2, filteredCustomTesters, true) && equals(aKeys, bKeys);
    }
    function generateToBeMessage(deepEqualityName, expected = "#{this}", actual = "#{exp}") {
      let toBeMessage = `expected ${expected} to be ${actual} // Object.is equality`;
      return ["toStrictEqual", "toEqual"].includes(deepEqualityName) ? `${toBeMessage}

If it should pass with deep equality, replace "toBe" with "${deepEqualityName}"

Expected: ${expected}
Received: serializes to the same string
` : toBeMessage;
    }
    function pluralize(word, count) {
      return `${count} ${word}${count === 1 ? "" : "s"}`;
    }
    var AsymmetricMatcher3 = class {
      constructor(sample, inverse = false) {
        this.sample = sample, this.inverse = inverse;
      }
      $$typeof = Symbol.for("jest.asymmetricMatcher");
      getMatcherContext(expect4) {
        return { ...getState(expect4 || globalThis[GLOBAL_EXPECT]), equals, isNot: this.inverse, customTesters: getCustomEqualityTesters(), utils: { ...getMatcherUtils(), diff, stringify: stringify2, iterableEquality, subsetEquality } };
      }
      [Symbol.for("chai/inspect")](options2) {
        let result2 = stringify2(this, options2.depth, { min: true });
        return result2.length <= options2.truncate ? result2 : `${this.toString()}{\u2026}`;
      }
    };
    var StringContaining = class extends AsymmetricMatcher3 {
      constructor(sample, inverse = false) {
        if (!isA("String", sample))
          throw new Error("Expected is not a string");
        super(sample, inverse);
      }
      asymmetricMatch(other) {
        let result2 = isA("String", other) && other.includes(this.sample);
        return this.inverse ? !result2 : result2;
      }
      toString() {
        return `String${this.inverse ? "Not" : ""}Containing`;
      }
      getExpectedType() {
        return "string";
      }
    };
    var Anything = class extends AsymmetricMatcher3 {
      asymmetricMatch(other) {
        return other != null;
      }
      toString() {
        return "Anything";
      }
      toAsymmetricMatcher() {
        return "Anything";
      }
    };
    var ObjectContaining = class extends AsymmetricMatcher3 {
      constructor(sample, inverse = false) {
        super(sample, inverse);
      }
      getPrototype(obj) {
        return Object.getPrototypeOf ? Object.getPrototypeOf(obj) : obj.constructor.prototype === obj ? null : obj.constructor.prototype;
      }
      hasProperty(obj, property) {
        return obj ? Object.prototype.hasOwnProperty.call(obj, property) ? true : this.hasProperty(this.getPrototype(obj), property) : false;
      }
      asymmetricMatch(other) {
        if (typeof this.sample != "object")
          throw new TypeError(`You must provide an object to ${this.toString()}, not '${typeof this.sample}'.`);
        let result2 = true, matcherContext = this.getMatcherContext();
        for (let property in this.sample)
          if (!this.hasProperty(other, property) || !equals(this.sample[property], other[property], matcherContext.customTesters)) {
            result2 = false;
            break;
          }
        return this.inverse ? !result2 : result2;
      }
      toString() {
        return `Object${this.inverse ? "Not" : ""}Containing`;
      }
      getExpectedType() {
        return "object";
      }
    };
    var ArrayContaining = class extends AsymmetricMatcher3 {
      constructor(sample, inverse = false) {
        super(sample, inverse);
      }
      asymmetricMatch(other) {
        if (!Array.isArray(this.sample))
          throw new TypeError(`You must provide an array to ${this.toString()}, not '${typeof this.sample}'.`);
        let matcherContext = this.getMatcherContext(), result2 = this.sample.length === 0 || Array.isArray(other) && this.sample.every((item) => other.some((another) => equals(item, another, matcherContext.customTesters)));
        return this.inverse ? !result2 : result2;
      }
      toString() {
        return `Array${this.inverse ? "Not" : ""}Containing`;
      }
      getExpectedType() {
        return "array";
      }
    };
    var Any = class extends AsymmetricMatcher3 {
      constructor(sample) {
        if (typeof sample > "u")
          throw new TypeError("any() expects to be passed a constructor function. Please pass one or use anything() to match any object.");
        super(sample);
      }
      fnNameFor(func) {
        if (func.name)
          return func.name;
        let matches3 = Function.prototype.toString.call(func).match(/^(?:async)?\s*function\s*\*?\s*([\w$]+)\s*\(/);
        return matches3 ? matches3[1] : "<anonymous>";
      }
      asymmetricMatch(other) {
        return this.sample === String ? typeof other == "string" || other instanceof String : this.sample === Number ? typeof other == "number" || other instanceof Number : this.sample === Function ? typeof other == "function" || other instanceof Function : this.sample === Boolean ? typeof other == "boolean" || other instanceof Boolean : this.sample === BigInt ? typeof other == "bigint" || other instanceof BigInt : this.sample === Symbol ? typeof other == "symbol" || other instanceof Symbol : this.sample === Object ? typeof other == "object" : other instanceof this.sample;
      }
      toString() {
        return "Any";
      }
      getExpectedType() {
        return this.sample === String ? "string" : this.sample === Number ? "number" : this.sample === Function ? "function" : this.sample === Object ? "object" : this.sample === Boolean ? "boolean" : this.fnNameFor(this.sample);
      }
      toAsymmetricMatcher() {
        return `Any<${this.fnNameFor(this.sample)}>`;
      }
    };
    var StringMatching = class extends AsymmetricMatcher3 {
      constructor(sample, inverse = false) {
        if (!isA("String", sample) && !isA("RegExp", sample))
          throw new Error("Expected is not a String or a RegExp");
        super(new RegExp(sample), inverse);
      }
      asymmetricMatch(other) {
        let result2 = isA("String", other) && this.sample.test(other);
        return this.inverse ? !result2 : result2;
      }
      toString() {
        return `String${this.inverse ? "Not" : ""}Matching`;
      }
      getExpectedType() {
        return "string";
      }
    };
    var CloseTo = class extends AsymmetricMatcher3 {
      precision;
      constructor(sample, precision = 2, inverse = false) {
        if (!isA("Number", sample))
          throw new Error("Expected is not a Number");
        if (!isA("Number", precision))
          throw new Error("Precision is not a Number");
        super(sample), this.inverse = inverse, this.precision = precision;
      }
      asymmetricMatch(other) {
        if (!isA("Number", other))
          return false;
        let result2 = false;
        return other === Number.POSITIVE_INFINITY && this.sample === Number.POSITIVE_INFINITY || other === Number.NEGATIVE_INFINITY && this.sample === Number.NEGATIVE_INFINITY ? result2 = true : result2 = Math.abs(this.sample - other) < 10 ** -this.precision / 2, this.inverse ? !result2 : result2;
      }
      toString() {
        return `Number${this.inverse ? "Not" : ""}CloseTo`;
      }
      getExpectedType() {
        return "number";
      }
      toAsymmetricMatcher() {
        return [this.toString(), this.sample, `(${pluralize("digit", this.precision)})`].join(" ");
      }
    };
    var JestAsymmetricMatchers = (chai2, utils) => {
      utils.addMethod(chai2.expect, "anything", () => new Anything()), utils.addMethod(chai2.expect, "any", (expected) => new Any(expected)), utils.addMethod(chai2.expect, "stringContaining", (expected) => new StringContaining(expected)), utils.addMethod(chai2.expect, "objectContaining", (expected) => new ObjectContaining(expected)), utils.addMethod(chai2.expect, "arrayContaining", (expected) => new ArrayContaining(expected)), utils.addMethod(chai2.expect, "stringMatching", (expected) => new StringMatching(expected)), utils.addMethod(chai2.expect, "closeTo", (expected, precision) => new CloseTo(expected, precision)), chai2.expect.not = { stringContaining: (expected) => new StringContaining(expected, true), objectContaining: (expected) => new ObjectContaining(expected, true), arrayContaining: (expected) => new ArrayContaining(expected, true), stringMatching: (expected) => new StringMatching(expected, true), closeTo: (expected, precision) => new CloseTo(expected, precision, true) };
    };
    function recordAsyncExpect(test, promise) {
      return test && promise instanceof Promise && (promise = promise.finally(() => {
        let index = test.promises.indexOf(promise);
        index !== -1 && test.promises.splice(index, 1);
      }), test.promises || (test.promises = []), test.promises.push(promise)), promise;
    }
    function wrapSoft(utils, fn3) {
      return function(...args2) {
        var _a;
        let test = utils.flag(this, "vitest-test");
        if (!((test == null ? void 0 : test.context._local) ? test.context.expect.getState() : getState(globalThis[GLOBAL_EXPECT])).soft)
          return fn3.apply(this, args2);
        if (!test)
          throw new Error("expect.soft() can only be used inside a test");
        try {
          return fn3.apply(this, args2);
        } catch (err) {
          test.result || (test.result = { state: "fail" }), test.result.state = "fail", (_a = test.result).errors || (_a.errors = []), test.result.errors.push(processError(err));
        }
      };
    }
    var JestChaiExpect = (chai2, utils) => {
      let { AssertionError: AssertionError2 } = chai2, c = () => getColors(), customTesters = getCustomEqualityTesters();
      function def(name2, fn3) {
        let addMethod = (n) => {
          let softWrapper = wrapSoft(utils, fn3);
          utils.addMethod(chai2.Assertion.prototype, n, softWrapper), utils.addMethod(globalThis[JEST_MATCHERS_OBJECT].matchers, n, softWrapper);
        };
        Array.isArray(name2) ? name2.forEach((n) => addMethod(n)) : addMethod(name2);
      }
      ["throw", "throws", "Throw"].forEach((m2) => {
        utils.overwriteMethod(chai2.Assertion.prototype, m2, (_super) => function(...args2) {
          let promise = utils.flag(this, "promise"), object = utils.flag(this, "object"), isNot = utils.flag(this, "negate");
          if (promise === "rejects")
            utils.flag(this, "object", () => {
              throw object;
            });
          else if (promise === "resolves" && typeof object != "function") {
            if (isNot)
              return;
            {
              let message = utils.flag(this, "message") || "expected promise to throw an error, but it didn't", error = { showDiff: false };
              throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
            }
          }
          _super.apply(this, args2);
        });
      }), def("withTest", function(test) {
        return utils.flag(this, "vitest-test", test), this;
      }), def("toEqual", function(expected) {
        let actual = utils.flag(this, "object"), equal = equals(actual, expected, [...customTesters, iterableEquality]);
        return this.assert(equal, "expected #{this} to deeply equal #{exp}", "expected #{this} to not deeply equal #{exp}", expected, actual);
      }), def("toStrictEqual", function(expected) {
        let obj = utils.flag(this, "object"), equal = equals(obj, expected, [...customTesters, iterableEquality, typeEquality, sparseArrayEquality, arrayBufferEquality], true);
        return this.assert(equal, "expected #{this} to strictly equal #{exp}", "expected #{this} to not strictly equal #{exp}", expected, obj);
      }), def("toBe", function(expected) {
        let actual = this._obj, pass = Object.is(actual, expected), deepEqualityName = "";
        return pass || (equals(actual, expected, [...customTesters, iterableEquality, typeEquality, sparseArrayEquality, arrayBufferEquality], true) ? deepEqualityName = "toStrictEqual" : equals(actual, expected, [...customTesters, iterableEquality]) && (deepEqualityName = "toEqual")), this.assert(pass, generateToBeMessage(deepEqualityName), "expected #{this} not to be #{exp} // Object.is equality", expected, actual);
      }), def("toMatchObject", function(expected) {
        let actual = this._obj;
        return this.assert(equals(actual, expected, [...customTesters, iterableEquality, subsetEquality]), "expected #{this} to match object #{exp}", "expected #{this} to not match object #{exp}", expected, actual);
      }), def("toMatch", function(expected) {
        return typeof expected == "string" ? this.include(expected) : this.match(expected);
      }), def("toContain", function(item) {
        let actual = this._obj;
        if (typeof Node < "u" && actual instanceof Node) {
          if (!(item instanceof Node))
            throw new TypeError(`toContain() expected a DOM node as the argument, but got ${typeof item}`);
          return this.assert(actual.contains(item), "expected #{this} to contain element #{exp}", "expected #{this} not to contain element #{exp}", item, actual);
        }
        if (typeof DOMTokenList < "u" && actual instanceof DOMTokenList) {
          assertTypes(item, "class name", ["string"]);
          let expectedClassList = utils.flag(this, "negate") ? actual.value.replace(item, "").trim() : `${actual.value} ${item}`;
          return this.assert(actual.contains(item), `expected "${actual.value}" to contain "${item}"`, `expected "${actual.value}" not to contain "${item}"`, expectedClassList, actual.value);
        }
        return actual != null && typeof actual != "string" && utils.flag(this, "object", Array.from(actual)), this.contain(item);
      }), def("toContainEqual", function(expected) {
        let obj = utils.flag(this, "object"), index = Array.from(obj).findIndex((item) => equals(item, expected, customTesters));
        this.assert(index !== -1, "expected #{this} to deep equally contain #{exp}", "expected #{this} to not deep equally contain #{exp}", expected);
      }), def("toBeTruthy", function() {
        let obj = utils.flag(this, "object");
        this.assert(!!obj, "expected #{this} to be truthy", "expected #{this} to not be truthy", obj, false);
      }), def("toBeFalsy", function() {
        let obj = utils.flag(this, "object");
        this.assert(!obj, "expected #{this} to be falsy", "expected #{this} to not be falsy", obj, false);
      }), def("toBeGreaterThan", function(expected) {
        let actual = this._obj;
        return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual > expected, `expected ${actual} to be greater than ${expected}`, `expected ${actual} to be not greater than ${expected}`, actual, expected, false);
      }), def("toBeGreaterThanOrEqual", function(expected) {
        let actual = this._obj;
        return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual >= expected, `expected ${actual} to be greater than or equal to ${expected}`, `expected ${actual} to be not greater than or equal to ${expected}`, actual, expected, false);
      }), def("toBeLessThan", function(expected) {
        let actual = this._obj;
        return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual < expected, `expected ${actual} to be less than ${expected}`, `expected ${actual} to be not less than ${expected}`, actual, expected, false);
      }), def("toBeLessThanOrEqual", function(expected) {
        let actual = this._obj;
        return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual <= expected, `expected ${actual} to be less than or equal to ${expected}`, `expected ${actual} to be not less than or equal to ${expected}`, actual, expected, false);
      }), def("toBeNaN", function() {
        return this.be.NaN;
      }), def("toBeUndefined", function() {
        return this.be.undefined;
      }), def("toBeNull", function() {
        return this.be.null;
      }), def("toBeDefined", function() {
        let negate = utils.flag(this, "negate");
        return utils.flag(this, "negate", false), negate ? this.be.undefined : this.not.be.undefined;
      }), def("toBeTypeOf", function(expected) {
        let actual = typeof this._obj, equal = expected === actual;
        return this.assert(equal, "expected #{this} to be type of #{exp}", "expected #{this} not to be type of #{exp}", expected, actual);
      }), def("toBeInstanceOf", function(obj) {
        return this.instanceOf(obj);
      }), def("toHaveLength", function(length) {
        return this.have.length(length);
      }), def("toHaveProperty", function(...args2) {
        Array.isArray(args2[0]) && (args2[0] = args2[0].map((key2) => String(key2).replace(/([.[\]])/g, "\\$1")).join("."));
        let actual = this._obj, [propertyName, expected] = args2, getValue2 = () => Object.prototype.hasOwnProperty.call(actual, propertyName) ? { value: actual[propertyName], exists: true } : utils.getPathInfo(actual, propertyName), { value: value2, exists } = getValue2(), pass = exists && (args2.length === 1 || equals(expected, value2, customTesters)), valueString = args2.length === 1 ? "" : ` with value ${utils.objDisplay(expected)}`;
        return this.assert(pass, `expected #{this} to have property "${propertyName}"${valueString}`, `expected #{this} to not have property "${propertyName}"${valueString}`, expected, exists ? value2 : void 0);
      }), def("toBeCloseTo", function(received, precision = 2) {
        let expected = this._obj, pass = false, expectedDiff2 = 0, receivedDiff = 0;
        return received === Number.POSITIVE_INFINITY && expected === Number.POSITIVE_INFINITY || received === Number.NEGATIVE_INFINITY && expected === Number.NEGATIVE_INFINITY ? pass = true : (expectedDiff2 = 10 ** -precision / 2, receivedDiff = Math.abs(expected - received), pass = receivedDiff < expectedDiff2), this.assert(pass, `expected #{this} to be close to #{exp}, received difference is ${receivedDiff}, but expected ${expectedDiff2}`, `expected #{this} to not be close to #{exp}, received difference is ${receivedDiff}, but expected ${expectedDiff2}`, received, expected, false);
      });
      let assertIsMock = (assertion) => {
        if (!isMockFunction(assertion._obj))
          throw new TypeError(`${utils.inspect(assertion._obj)} is not a spy or a call to a spy!`);
      }, getSpy = (assertion) => (assertIsMock(assertion), assertion._obj), ordinalOf = (i) => {
        let j = i % 10, k = i % 100;
        return j === 1 && k !== 11 ? `${i}st` : j === 2 && k !== 12 ? `${i}nd` : j === 3 && k !== 13 ? `${i}rd` : `${i}th`;
      }, formatCalls = (spy, msg, actualCall) => (spy.mock.calls && (msg += c().gray(`

Received: 

${spy.mock.calls.map((callArg, i) => {
        let methodCall = c().bold(`  ${ordinalOf(i + 1)} ${spy.getMockName()} call:

`);
        return actualCall ? methodCall += diff(actualCall, callArg, { omitAnnotationLines: true }) : methodCall += stringify2(callArg).split(`
`).map((line) => `    ${line}`).join(`
`), methodCall += `
`, methodCall;
      }).join(`
`)}`)), msg += c().gray(`

Number of calls: ${c().bold(spy.mock.calls.length)}
`), msg), formatReturns = (spy, msg, actualReturn) => (msg += c().gray(`

Received: 

${spy.mock.results.map((callReturn, i) => {
        let methodCall = c().bold(`  ${ordinalOf(i + 1)} ${spy.getMockName()} call return:

`);
        return actualReturn ? methodCall += diff(actualReturn, callReturn.value, { omitAnnotationLines: true }) : methodCall += stringify2(callReturn).split(`
`).map((line) => `    ${line}`).join(`
`), methodCall += `
`, methodCall;
      }).join(`
`)}`), msg += c().gray(`

Number of calls: ${c().bold(spy.mock.calls.length)}
`), msg);
      def(["toHaveBeenCalledTimes", "toBeCalledTimes"], function(number) {
        let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length;
        return this.assert(callCount === number, `expected "${spyName}" to be called #{exp} times, but got ${callCount} times`, `expected "${spyName}" to not be called #{exp} times`, number, callCount, false);
      }), def("toHaveBeenCalledOnce", function() {
        let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length;
        return this.assert(callCount === 1, `expected "${spyName}" to be called once, but got ${callCount} times`, `expected "${spyName}" to not be called once`, 1, callCount, false);
      }), def(["toHaveBeenCalled", "toBeCalled"], function() {
        let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length, called = callCount > 0, isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [called, `expected "${spyName}" to be called at least once`, `expected "${spyName}" to not be called at all, but actually been called ${callCount} times`, true, called]);
        if (called && isNot && (msg = formatCalls(spy, msg)), called && isNot || !called && !isNot)
          throw new AssertionError2(msg);
      }), def(["toHaveBeenCalledWith", "toBeCalledWith"], function(...args2) {
        let spy = getSpy(this), spyName = spy.getMockName(), pass = spy.mock.calls.some((callArg) => equals(callArg, args2, [...customTesters, iterableEquality])), isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [pass, `expected "${spyName}" to be called with arguments: #{exp}`, `expected "${spyName}" to not be called with arguments: #{exp}`, args2]);
        if (pass && isNot || !pass && !isNot)
          throw new AssertionError2(formatCalls(spy, msg, args2));
      }), def(["toHaveBeenNthCalledWith", "nthCalledWith"], function(times, ...args2) {
        let spy = getSpy(this), spyName = spy.getMockName(), nthCall = spy.mock.calls[times - 1];
        this.assert(equals(nthCall, args2, [...customTesters, iterableEquality]), `expected ${ordinalOf(times)} "${spyName}" call to have been called with #{exp}`, `expected ${ordinalOf(times)} "${spyName}" call to not have been called with #{exp}`, args2, nthCall);
      }), def(["toHaveBeenLastCalledWith", "lastCalledWith"], function(...args2) {
        let spy = getSpy(this), spyName = spy.getMockName(), lastCall = spy.mock.calls[spy.mock.calls.length - 1];
        this.assert(equals(lastCall, args2, [...customTesters, iterableEquality]), `expected last "${spyName}" call to have been called with #{exp}`, `expected last "${spyName}" call to not have been called with #{exp}`, args2, lastCall);
      }), def(["toThrow", "toThrowError"], function(expected) {
        if (typeof expected == "string" || typeof expected > "u" || expected instanceof RegExp)
          return this.throws(expected);
        let obj = this._obj, promise = utils.flag(this, "promise"), isNot = utils.flag(this, "negate"), thrown = null;
        if (promise === "rejects")
          thrown = obj;
        else if (promise === "resolves" && typeof obj != "function") {
          if (isNot)
            return;
          {
            let message = utils.flag(this, "message") || "expected promise to throw an error, but it didn't", error = { showDiff: false };
            throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
          }
        } else {
          let isThrow = false;
          try {
            obj();
          } catch (err) {
            isThrow = true, thrown = err;
          }
          if (!isThrow && !isNot) {
            let message = utils.flag(this, "message") || "expected function to throw an error, but it didn't", error = { showDiff: false };
            throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
          }
        }
        if (typeof expected == "function") {
          let name2 = expected.name || expected.prototype.constructor.name;
          return this.assert(thrown && thrown instanceof expected, `expected error to be instance of ${name2}`, `expected error not to be instance of ${name2}`, expected, thrown);
        }
        if (expected instanceof Error)
          return this.assert(thrown && expected.message === thrown.message, `expected error to have message: ${expected.message}`, `expected error not to have message: ${expected.message}`, expected.message, thrown && thrown.message);
        if (typeof expected == "object" && "asymmetricMatch" in expected && typeof expected.asymmetricMatch == "function") {
          let matcher = expected;
          return this.assert(thrown && matcher.asymmetricMatch(thrown), "expected error to match asymmetric matcher", "expected error not to match asymmetric matcher", matcher, thrown);
        }
        throw new Error(`"toThrow" expects string, RegExp, function, Error instance or asymmetric matcher, got "${typeof expected}"`);
      }), def(["toHaveReturned", "toReturn"], function() {
        let spy = getSpy(this), spyName = spy.getMockName(), calledAndNotThrew = spy.mock.calls.length > 0 && spy.mock.results.some(({ type: type3 }) => type3 !== "throw");
        this.assert(calledAndNotThrew, `expected "${spyName}" to be successfully called at least once`, `expected "${spyName}" to not be successfully called`, calledAndNotThrew, !calledAndNotThrew, false);
      }), def(["toHaveReturnedTimes", "toReturnTimes"], function(times) {
        let spy = getSpy(this), spyName = spy.getMockName(), successfulReturns = spy.mock.results.reduce((success, { type: type3 }) => type3 === "throw" ? success : ++success, 0);
        this.assert(successfulReturns === times, `expected "${spyName}" to be successfully called ${times} times`, `expected "${spyName}" to not be successfully called ${times} times`, `expected number of returns: ${times}`, `received number of returns: ${successfulReturns}`, false);
      }), def(["toHaveReturnedWith", "toReturnWith"], function(value2) {
        let spy = getSpy(this), spyName = spy.getMockName(), pass = spy.mock.results.some(({ type: type3, value: result2 }) => type3 === "return" && equals(value2, result2)), isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [pass, `expected "${spyName}" to return with: #{exp} at least once`, `expected "${spyName}" to not return with: #{exp}`, value2]);
        if (pass && isNot || !pass && !isNot)
          throw new AssertionError2(formatReturns(spy, msg, value2));
      }), def(["toHaveLastReturnedWith", "lastReturnedWith"], function(value2) {
        let spy = getSpy(this), spyName = spy.getMockName(), { value: lastResult } = spy.mock.results[spy.mock.results.length - 1], pass = equals(lastResult, value2);
        this.assert(pass, `expected last "${spyName}" call to return #{exp}`, `expected last "${spyName}" call to not return #{exp}`, value2, lastResult);
      }), def(["toHaveNthReturnedWith", "nthReturnedWith"], function(nthCall, value2) {
        let spy = getSpy(this), spyName = spy.getMockName(), isNot = utils.flag(this, "negate"), { type: callType, value: callResult } = spy.mock.results[nthCall - 1], ordinalCall = `${ordinalOf(nthCall)} call`;
        !isNot && callType === "throw" && chai2.assert.fail(`expected ${ordinalCall} to return #{exp}, but instead it threw an error`);
        let nthCallReturn = equals(callResult, value2);
        this.assert(nthCallReturn, `expected ${ordinalCall} "${spyName}" call to return #{exp}`, `expected ${ordinalCall} "${spyName}" call to not return #{exp}`, value2, callResult);
      }), def("toSatisfy", function(matcher, message) {
        return this.be.satisfy(matcher, message);
      }), utils.addProperty(chai2.Assertion.prototype, "resolves", function() {
        let error = new Error("resolves");
        utils.flag(this, "promise", "resolves"), utils.flag(this, "error", error);
        let test = utils.flag(this, "vitest-test"), obj = utils.flag(this, "object");
        if (typeof (obj == null ? void 0 : obj.then) != "function")
          throw new TypeError(`You must provide a Promise to expect() when using .resolves, not '${typeof obj}'.`);
        let proxy = new Proxy(this, { get: (target, key2, receiver) => {
          let result2 = Reflect.get(target, key2, receiver);
          return typeof result2 != "function" ? result2 instanceof chai2.Assertion ? proxy : result2 : async (...args2) => {
            let promise = obj.then((value2) => (utils.flag(this, "object", value2), result2.call(this, ...args2)), (err) => {
              let _error = new AssertionError2(`promise rejected "${utils.inspect(err)}" instead of resolving`, { showDiff: false });
              throw _error.cause = err, _error.stack = error.stack.replace(error.message, _error.message), _error;
            });
            return recordAsyncExpect(test, promise);
          };
        } });
        return proxy;
      }), utils.addProperty(chai2.Assertion.prototype, "rejects", function() {
        let error = new Error("rejects");
        utils.flag(this, "promise", "rejects"), utils.flag(this, "error", error);
        let test = utils.flag(this, "vitest-test"), obj = utils.flag(this, "object"), wrapper = typeof obj == "function" ? obj() : obj;
        if (typeof (wrapper == null ? void 0 : wrapper.then) != "function")
          throw new TypeError(`You must provide a Promise to expect() when using .rejects, not '${typeof wrapper}'.`);
        let proxy = new Proxy(this, { get: (target, key2, receiver) => {
          let result2 = Reflect.get(target, key2, receiver);
          return typeof result2 != "function" ? result2 instanceof chai2.Assertion ? proxy : result2 : async (...args2) => {
            let promise = wrapper.then((value2) => {
              let _error = new AssertionError2(`promise resolved "${utils.inspect(value2)}" instead of rejecting`, { showDiff: true, expected: new Error("rejected promise"), actual: value2 });
              throw _error.stack = error.stack.replace(error.message, _error.message), _error;
            }, (err) => (utils.flag(this, "object", err), result2.call(this, ...args2)));
            return recordAsyncExpect(test, promise);
          };
        } });
        return proxy;
      });
    };
    function getMatcherState(assertion, expect4) {
      let obj = assertion._obj, isNot = util.flag(assertion, "negate"), promise = util.flag(assertion, "promise") || "", jestUtils = { ...getMatcherUtils(), diff, stringify: stringify2, iterableEquality, subsetEquality };
      return { state: { ...getState(expect4), customTesters: getCustomEqualityTesters(), isNot, utils: jestUtils, promise, equals, suppressedErrors: [] }, isNot, obj };
    }
    var JestExtendError = class extends Error {
      constructor(message, actual, expected) {
        super(message), this.actual = actual, this.expected = expected;
      }
    };
    function JestExtendPlugin(expect4, matchers) {
      return (c, utils) => {
        Object.entries(matchers).forEach(([expectAssertionName, expectAssertion]) => {
          function expectWrapper(...args2) {
            let { state, isNot, obj } = getMatcherState(this, expect4), result2 = expectAssertion.call(state, obj, ...args2);
            if (result2 && typeof result2 == "object" && result2 instanceof Promise)
              return result2.then(({ pass: pass2, message: message2, actual: actual2, expected: expected2 }) => {
                if (pass2 && isNot || !pass2 && !isNot)
                  throw new JestExtendError(message2(), actual2, expected2);
              });
            let { pass, message, actual, expected } = result2;
            if (pass && isNot || !pass && !isNot)
              throw new JestExtendError(message(), actual, expected);
          }
          let softWrapper = wrapSoft(utils, expectWrapper);
          utils.addMethod(globalThis[JEST_MATCHERS_OBJECT].matchers, expectAssertionName, softWrapper), utils.addMethod(c.Assertion.prototype, expectAssertionName, softWrapper);
          class CustomMatcher extends AsymmetricMatcher3 {
            constructor(inverse = false, ...sample) {
              super(sample, inverse);
            }
            asymmetricMatch(other) {
              let { pass } = expectAssertion.call(this.getMatcherContext(expect4), other, ...this.sample);
              return this.inverse ? !pass : pass;
            }
            toString() {
              return `${this.inverse ? "not." : ""}${expectAssertionName}`;
            }
            getExpectedType() {
              return "any";
            }
            toAsymmetricMatcher() {
              return `${this.toString()}<${this.sample.map(String).join(", ")}>`;
            }
          }
          let customMatcher = (...sample) => new CustomMatcher(false, ...sample);
          Object.defineProperty(expect4, expectAssertionName, { configurable: true, enumerable: true, value: customMatcher, writable: true }), Object.defineProperty(expect4.not, expectAssertionName, { configurable: true, enumerable: true, value: (...sample) => new CustomMatcher(true, ...sample), writable: true }), Object.defineProperty(globalThis[ASYMMETRIC_MATCHERS_OBJECT], expectAssertionName, { configurable: true, enumerable: true, value: customMatcher, writable: true });
        });
      };
    }
    var JestExtend = (chai2, utils) => {
      utils.addMethod(chai2.expect, "extend", (expect4, expects) => {
        chai2.use(JestExtendPlugin(expect4, expects));
      });
    };
    var matchers_exports = {};
    __export2(matchers_exports, { toBeChecked: () => toBeChecked, toBeDisabled: () => toBeDisabled, toBeEmpty: () => toBeEmpty, toBeEmptyDOMElement: () => toBeEmptyDOMElement, toBeEnabled: () => toBeEnabled, toBeInTheDOM: () => toBeInTheDOM, toBeInTheDocument: () => toBeInTheDocument, toBeInvalid: () => toBeInvalid, toBePartiallyChecked: () => toBePartiallyChecked, toBeRequired: () => toBeRequired, toBeValid: () => toBeValid, toBeVisible: () => toBeVisible, toContainElement: () => toContainElement, toContainHTML: () => toContainHTML, toHaveAccessibleDescription: () => toHaveAccessibleDescription, toHaveAccessibleErrorMessage: () => toHaveAccessibleErrorMessage, toHaveAccessibleName: () => toHaveAccessibleName, toHaveAttribute: () => toHaveAttribute, toHaveClass: () => toHaveClass, toHaveDescription: () => toHaveDescription, toHaveDisplayValue: () => toHaveDisplayValue, toHaveErrorMessage: () => toHaveErrorMessage, toHaveFocus: () => toHaveFocus, toHaveFormValues: () => toHaveFormValues, toHaveRole: () => toHaveRole, toHaveStyle: () => toHaveStyle, toHaveTextContent: () => toHaveTextContent, toHaveValue: () => toHaveValue });
    var import_redent = __toESM3(require_redent(), 1);
    var import_isEqual = __toESM3(require_isEqual(), 1);
    function $parcel$defineInteropFlag(a) {
      Object.defineProperty(a, "__esModule", { value: true, configurable: true });
    }
    function $parcel$export(e, n, v2, s) {
      Object.defineProperty(e, n, { get: v2, set: s, enumerable: true, configurable: true });
    }
    var $009ddb00d3ec72b8$exports = {};
    $parcel$defineInteropFlag($009ddb00d3ec72b8$exports);
    $parcel$export($009ddb00d3ec72b8$exports, "default", () => $009ddb00d3ec72b8$export$2e2bcd8739ae039);
    var $009ddb00d3ec72b8$export$2e2bcd8739ae039 = class extends Error {
      constructor(filename, msg, lineno, column, css) {
        super(filename + ":" + lineno + ":" + column + ": " + msg), this.reason = msg, this.filename = filename, this.line = lineno, this.column = column, this.source = css;
      }
    };
    var $0865a9fb4cc365fe$exports = {};
    $parcel$defineInteropFlag($0865a9fb4cc365fe$exports);
    $parcel$export($0865a9fb4cc365fe$exports, "default", () => $0865a9fb4cc365fe$export$2e2bcd8739ae039);
    var $0865a9fb4cc365fe$export$2e2bcd8739ae039 = class {
      constructor(start, end, source2) {
        this.start = start, this.end = end, this.source = source2;
      }
    };
    var $b2e137848b48cf4f$exports = {};
    $parcel$export($b2e137848b48cf4f$exports, "CssTypes", () => $b2e137848b48cf4f$export$9be5dd6e61d5d73a);
    var $b2e137848b48cf4f$export$9be5dd6e61d5d73a;
    (function(CssTypes) {
      CssTypes.stylesheet = "stylesheet", CssTypes.rule = "rule", CssTypes.declaration = "declaration", CssTypes.comment = "comment", CssTypes.container = "container", CssTypes.charset = "charset", CssTypes.document = "document", CssTypes.customMedia = "custom-media", CssTypes.fontFace = "font-face", CssTypes.host = "host", CssTypes.import = "import", CssTypes.keyframes = "keyframes", CssTypes.keyframe = "keyframe", CssTypes.layer = "layer", CssTypes.media = "media", CssTypes.namespace = "namespace", CssTypes.page = "page", CssTypes.supports = "supports";
    })($b2e137848b48cf4f$export$9be5dd6e61d5d73a || ($b2e137848b48cf4f$export$9be5dd6e61d5d73a = {}));
    var $d708735ed1303b43$var$commentre = /\/\*[^]*?(?:\*\/|$)/g;
    var $d708735ed1303b43$export$98e6a39c04603d36 = (css, options2) => {
      options2 = options2 || {};
      let lineno = 1, column = 1;
      function updatePosition(str) {
        let lines = str.match(/\n/g);
        lines && (lineno += lines.length);
        let i = str.lastIndexOf(`
`);
        column = ~i ? str.length - i : column + str.length;
      }
      function position() {
        let start = { line: lineno, column };
        return function(node) {
          return node.position = new $0865a9fb4cc365fe$export$2e2bcd8739ae039(start, { line: lineno, column }, (options2 == null ? void 0 : options2.source) || ""), whitespace(), node;
        };
      }
      let errorsList = [];
      function error(msg) {
        let err = new $009ddb00d3ec72b8$export$2e2bcd8739ae039((options2 == null ? void 0 : options2.source) || "", msg, lineno, column, css);
        if (options2 == null ? void 0 : options2.silent)
          errorsList.push(err);
        else
          throw err;
      }
      function stylesheet() {
        let rulesList = rules();
        return { type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.stylesheet, stylesheet: { source: options2 == null ? void 0 : options2.source, rules: rulesList, parsingErrors: errorsList } };
      }
      function open() {
        return match(/^{\s*/);
      }
      function close() {
        return match(/^}/);
      }
      function rules() {
        let node, rules2 = [];
        for (whitespace(), comments(rules2); css.length && css.charAt(0) !== "}" && (node = atrule() || rule()); )
          node && (rules2.push(node), comments(rules2));
        return rules2;
      }
      function match(re) {
        let m2 = re.exec(css);
        if (!m2)
          return;
        let str = m2[0];
        return updatePosition(str), css = css.slice(str.length), m2;
      }
      function whitespace() {
        match(/^\s*/);
      }
      function comments(rules2) {
        let c;
        for (rules2 = rules2 || []; c = comment(); )
          c && rules2.push(c);
        return rules2;
      }
      function comment() {
        let pos = position();
        if (css.charAt(0) !== "/" || css.charAt(1) !== "*")
          return;
        let m2 = match(/^\/\*[^]*?\*\//);
        return m2 ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.comment, comment: m2[0].slice(2, -2) }) : error("End of comment missing");
      }
      function findClosingParenthese(str, start, depth) {
        let ptr = start + 1, found = false, closeParentheses = str.indexOf(")", ptr);
        for (; !found && closeParentheses !== -1; ) {
          let nextParentheses = str.indexOf("(", ptr);
          nextParentheses !== -1 && nextParentheses < closeParentheses ? (ptr = findClosingParenthese(str, nextParentheses + 1, depth + 1) + 1, closeParentheses = str.indexOf(")", ptr)) : found = true;
        }
        return found && closeParentheses !== -1 ? closeParentheses : -1;
      }
      function selector() {
        let m2 = match(/^([^{]+)/);
        if (!m2)
          return;
        let res = $d708735ed1303b43$var$trim(m2[0]).replace($d708735ed1303b43$var$commentre, "");
        if (res.indexOf(",") === -1)
          return [res];
        let ptr = 0, startParentheses = res.indexOf("(", ptr);
        for (; startParentheses !== -1; ) {
          let closeParentheses = findClosingParenthese(res, startParentheses, 0);
          if (closeParentheses === -1)
            break;
          ptr = closeParentheses + 1, res = res.substring(0, startParentheses) + res.substring(startParentheses, closeParentheses).replace(/,/g, "\u200C") + res.substring(closeParentheses), startParentheses = res.indexOf("(", ptr);
        }
        return res = res.replace(/("|')(?:\\\1|.)*?\1/g, (m3) => m3.replace(/,/g, "\u200C")), res.split(",").map((s) => $d708735ed1303b43$var$trim(s.replace(/\u200C/g, ",")));
      }
      function declaration() {
        let pos = position(), propMatch = match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
        if (!propMatch)
          return;
        let propValue = $d708735ed1303b43$var$trim(propMatch[0]);
        if (!match(/^:\s*/))
          return error("property missing ':'");
        let val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/), ret = pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.declaration, property: propValue.replace($d708735ed1303b43$var$commentre, ""), value: val ? $d708735ed1303b43$var$trim(val[0]).replace($d708735ed1303b43$var$commentre, "") : "" });
        return match(/^[;\s]*/), ret;
      }
      function declarations() {
        let decls = [];
        if (!open())
          return error("missing '{'");
        comments(decls);
        let decl;
        for (; decl = declaration(); )
          decl && (decls.push(decl), comments(decls));
        return close() ? decls : error("missing '}'");
      }
      function keyframe() {
        let m2, vals = [], pos = position();
        for (; m2 = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); )
          vals.push(m2[1]), match(/^,\s*/);
        if (vals.length)
          return pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframe, values: vals, declarations: declarations() || [] });
      }
      function atkeyframes() {
        let pos = position(), m1 = match(/^@([-\w]+)?keyframes\s*/);
        if (!m1)
          return;
        let vendor = m1[1], m2 = match(/^([-\w]+)\s*/);
        if (!m2)
          return error("@keyframes missing name");
        let name2 = m2[1];
        if (!open())
          return error("@keyframes missing '{'");
        let frame, frames = comments();
        for (; frame = keyframe(); )
          frames.push(frame), frames = frames.concat(comments());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframes, name: name2, vendor, keyframes: frames }) : error("@keyframes missing '}'");
      }
      function atsupports() {
        let pos = position(), m2 = match(/^@supports *([^{]+)/);
        if (!m2)
          return;
        let supports = $d708735ed1303b43$var$trim(m2[1]);
        if (!open())
          return error("@supports missing '{'");
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.supports, supports, rules: style }) : error("@supports missing '}'");
      }
      function athost() {
        let pos = position();
        if (!match(/^@host\s*/))
          return;
        if (!open())
          return error("@host missing '{'");
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.host, rules: style }) : error("@host missing '}'");
      }
      function atcontainer() {
        let pos = position(), m2 = match(/^@container *([^{]+)/);
        if (!m2)
          return;
        let container = $d708735ed1303b43$var$trim(m2[1]);
        if (!open())
          return error("@container missing '{'");
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.container, container, rules: style }) : error("@container missing '}'");
      }
      function atlayer() {
        let pos = position(), m2 = match(/^@layer *([^{;@]+)/);
        if (!m2)
          return;
        let layer = $d708735ed1303b43$var$trim(m2[1]);
        if (!open())
          return match(/^[;\s]*/), pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer, layer });
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer, layer, rules: style }) : error("@layer missing '}'");
      }
      function atmedia() {
        let pos = position(), m2 = match(/^@media *([^{]+)/);
        if (!m2)
          return;
        let media = $d708735ed1303b43$var$trim(m2[1]);
        if (!open())
          return error("@media missing '{'");
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.media, media, rules: style }) : error("@media missing '}'");
      }
      function atcustommedia() {
        let pos = position(), m2 = match(/^@custom-media\s+(--\S+)\s*([^{;\s][^{;]*);/);
        if (m2)
          return pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.customMedia, name: $d708735ed1303b43$var$trim(m2[1]), media: $d708735ed1303b43$var$trim(m2[2]) });
      }
      function atpage() {
        let pos = position();
        if (!match(/^@page */))
          return;
        let sel = selector() || [];
        if (!open())
          return error("@page missing '{'");
        let decls = comments(), decl;
        for (; decl = declaration(); )
          decls.push(decl), decls = decls.concat(comments());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.page, selectors: sel, declarations: decls }) : error("@page missing '}'");
      }
      function atdocument() {
        let pos = position(), m2 = match(/^@([-\w]+)?document *([^{]+)/);
        if (!m2)
          return;
        let vendor = $d708735ed1303b43$var$trim(m2[1]), doc = $d708735ed1303b43$var$trim(m2[2]);
        if (!open())
          return error("@document missing '{'");
        let style = comments().concat(rules());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.document, document: doc, vendor, rules: style }) : error("@document missing '}'");
      }
      function atfontface() {
        let pos = position();
        if (!match(/^@font-face\s*/))
          return;
        if (!open())
          return error("@font-face missing '{'");
        let decls = comments(), decl;
        for (; decl = declaration(); )
          decls.push(decl), decls = decls.concat(comments());
        return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.fontFace, declarations: decls }) : error("@font-face missing '}'");
      }
      let atimport = _compileAtrule("import"), atcharset = _compileAtrule("charset"), atnamespace = _compileAtrule("namespace");
      function _compileAtrule(name2) {
        let re = new RegExp("^@" + name2 + `\\s*((?::?[^;'"]|"(?:\\\\"|[^"])*?"|'(?:\\\\'|[^'])*?')+)(?:;|$)`);
        return function() {
          let pos = position(), m2 = match(re);
          if (!m2)
            return;
          let ret = { type: name2 };
          return ret[name2] = m2[1].trim(), pos(ret);
        };
      }
      function atrule() {
        if (css[0] === "@")
          return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface() || atcontainer() || atlayer();
      }
      function rule() {
        let pos = position(), sel = selector();
        return sel ? (comments(), pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.rule, selectors: sel, declarations: declarations() || [] })) : error("selector missing");
      }
      return $d708735ed1303b43$var$addParent(stylesheet());
    };
    function $d708735ed1303b43$var$trim(str) {
      return str ? str.trim() : "";
    }
    function $d708735ed1303b43$var$addParent(obj, parent) {
      let isNode = obj && typeof obj.type == "string", childParent = isNode ? obj : parent;
      for (let k in obj) {
        let value2 = obj[k];
        Array.isArray(value2) ? value2.forEach((v2) => {
          $d708735ed1303b43$var$addParent(v2, childParent);
        }) : value2 && typeof value2 == "object" && $d708735ed1303b43$var$addParent(value2, childParent);
      }
      return isNode && Object.defineProperty(obj, "parent", { configurable: true, writable: true, enumerable: false, value: parent || null }), obj;
    }
    var $d708735ed1303b43$export$2e2bcd8739ae039 = $d708735ed1303b43$export$98e6a39c04603d36;
    var $149c1bd638913645$export$98e6a39c04603d36 = $d708735ed1303b43$export$2e2bcd8739ae039;
    var toStr = Object.prototype.toString;
    function isCallable(fn3) {
      return typeof fn3 == "function" || toStr.call(fn3) === "[object Function]";
    }
    function toInteger(value2) {
      var number = Number(value2);
      return isNaN(number) ? 0 : number === 0 || !isFinite(number) ? number : (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(value2) {
      var len = toInteger(value2);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    }
    function arrayFrom(arrayLike, mapFn) {
      var C2 = Array, items = Object(arrayLike);
      if (arrayLike == null)
        throw new TypeError("Array.from requires an array-like object - not null or undefined");
      if (typeof mapFn < "u" && !isCallable(mapFn))
        throw new TypeError("Array.from: when provided, the second argument must be a function");
      for (var len = toLength(items.length), A = isCallable(C2) ? Object(new C2(len)) : new Array(len), k = 0, kValue; k < len; )
        kValue = items[k], mapFn ? A[k] = mapFn(kValue, k) : A[k] = kValue, k += 1;
      return A.length = len, A;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && typeof Symbol == "function" && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor))
        throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: false }), Constructor;
    }
    function _defineProperty(obj, key2, value2) {
      return key2 = _toPropertyKey(key2), key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return _typeof(key2) === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input2, hint) {
      if (_typeof(input2) !== "object" || input2 === null)
        return input2;
      var prim = input2[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input2, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input2);
    }
    var SetLike = function() {
      function SetLike3() {
        var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        _classCallCheck(this, SetLike3), _defineProperty(this, "items", void 0), this.items = items;
      }
      return _createClass(SetLike3, [{ key: "add", value: function(value2) {
        return this.has(value2) === false && this.items.push(value2), this;
      } }, { key: "clear", value: function() {
        this.items = [];
      } }, { key: "delete", value: function(value2) {
        var previousLength = this.items.length;
        return this.items = this.items.filter(function(item) {
          return item !== value2;
        }), previousLength !== this.items.length;
      } }, { key: "forEach", value: function(callbackfn) {
        var _this = this;
        this.items.forEach(function(item) {
          callbackfn(item, item, _this);
        });
      } }, { key: "has", value: function(value2) {
        return this.items.indexOf(value2) !== -1;
      } }, { key: "size", get: function() {
        return this.items.length;
      } }]), SetLike3;
    }();
    var SetLike_default = typeof Set > "u" ? Set : SetLike;
    function getLocalName(element) {
      var _element$localName;
      return (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : element.tagName.toLowerCase();
    }
    var localNameToRoleMappings = { article: "article", aside: "complementary", button: "button", datalist: "listbox", dd: "definition", details: "group", dialog: "dialog", dt: "term", fieldset: "group", figure: "figure", form: "form", footer: "contentinfo", h1: "heading", h2: "heading", h3: "heading", h4: "heading", h5: "heading", h6: "heading", header: "banner", hr: "separator", html: "document", legend: "legend", li: "listitem", math: "math", main: "main", menu: "list", nav: "navigation", ol: "list", optgroup: "group", option: "option", output: "status", progress: "progressbar", section: "region", summary: "button", table: "table", tbody: "rowgroup", textarea: "textbox", tfoot: "rowgroup", td: "cell", th: "columnheader", thead: "rowgroup", tr: "row", ul: "list" };
    var prohibitedAttributes = { caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]), insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), none: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]) };
    function hasGlobalAriaAttributes(element, role) {
      return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-description", "aria-describedby", "aria-details", "aria-dropeffect", "aria-flowto", "aria-grabbed", "aria-hidden", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function(attributeName) {
        var _prohibitedAttributes;
        return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
      });
    }
    function ignorePresentationalRole(element, implicitRole) {
      return hasGlobalAriaAttributes(element, implicitRole);
    }
    function getRole(element) {
      var explicitRole = getExplicitRole(element);
      if (explicitRole === null || presentationRoles.indexOf(explicitRole) !== -1) {
        var implicitRole = getImplicitRole(element);
        if (presentationRoles.indexOf(explicitRole || "") === -1 || ignorePresentationalRole(element, implicitRole || ""))
          return implicitRole;
      }
      return explicitRole;
    }
    function getImplicitRole(element) {
      var mappedByTag = localNameToRoleMappings[getLocalName(element)];
      if (mappedByTag !== void 0)
        return mappedByTag;
      switch (getLocalName(element)) {
        case "a":
        case "area":
        case "link":
          if (element.hasAttribute("href"))
            return "link";
          break;
        case "img":
          return element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img") ? "presentation" : "img";
        case "input": {
          var _ref = element, type3 = _ref.type;
          switch (type3) {
            case "button":
            case "image":
            case "reset":
            case "submit":
              return "button";
            case "checkbox":
            case "radio":
              return type3;
            case "range":
              return "slider";
            case "email":
            case "tel":
            case "text":
            case "url":
              return element.hasAttribute("list") ? "combobox" : "textbox";
            case "search":
              return element.hasAttribute("list") ? "combobox" : "searchbox";
            case "number":
              return "spinbutton";
            default:
              return null;
          }
        }
        case "select":
          return element.hasAttribute("multiple") || element.size > 1 ? "listbox" : "combobox";
      }
      return null;
    }
    function getExplicitRole(element) {
      var role = element.getAttribute("role");
      if (role !== null) {
        var explicitRole = role.trim().split(" ")[0];
        if (explicitRole.length > 0)
          return explicitRole;
      }
      return null;
    }
    var presentationRoles = ["presentation", "none"];
    function isElement(node) {
      return node !== null && node.nodeType === node.ELEMENT_NODE;
    }
    function isHTMLTableCaptionElement(node) {
      return isElement(node) && getLocalName(node) === "caption";
    }
    function isHTMLInputElement(node) {
      return isElement(node) && getLocalName(node) === "input";
    }
    function isHTMLOptGroupElement(node) {
      return isElement(node) && getLocalName(node) === "optgroup";
    }
    function isHTMLSelectElement(node) {
      return isElement(node) && getLocalName(node) === "select";
    }
    function isHTMLTableElement(node) {
      return isElement(node) && getLocalName(node) === "table";
    }
    function isHTMLTextAreaElement(node) {
      return isElement(node) && getLocalName(node) === "textarea";
    }
    function safeWindow(node) {
      var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
      if (defaultView === null)
        throw new TypeError("no window available");
      return defaultView;
    }
    function isHTMLFieldSetElement(node) {
      return isElement(node) && getLocalName(node) === "fieldset";
    }
    function isHTMLLegendElement(node) {
      return isElement(node) && getLocalName(node) === "legend";
    }
    function isHTMLSlotElement(node) {
      return isElement(node) && getLocalName(node) === "slot";
    }
    function isSVGElement(node) {
      return isElement(node) && node.ownerSVGElement !== void 0;
    }
    function isSVGSVGElement(node) {
      return isElement(node) && getLocalName(node) === "svg";
    }
    function isSVGTitleElement(node) {
      return isSVGElement(node) && getLocalName(node) === "title";
    }
    function queryIdRefs(node, attributeName) {
      if (isElement(node) && node.hasAttribute(attributeName)) {
        var ids = node.getAttribute(attributeName).split(" "), root3 = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        return ids.map(function(id) {
          return root3.getElementById(id);
        }).filter(function(element) {
          return element !== null;
        });
      }
      return [];
    }
    function hasAnyConcreteRoles(node, roles3) {
      return isElement(node) ? roles3.indexOf(getRole(node)) !== -1 : false;
    }
    function asFlatString(s) {
      return s.trim().replace(/\s\s+/g, " ");
    }
    function isHidden(node, getComputedStyleImplementation) {
      if (!isElement(node))
        return false;
      if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true")
        return true;
      var style = getComputedStyleImplementation(node);
      return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
    }
    function isControl(node) {
      return hasAnyConcreteRoles(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
    }
    function hasAbstractRole(node, role) {
      if (!isElement(node))
        return false;
      switch (role) {
        case "range":
          return hasAnyConcreteRoles(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
        default:
          throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
      }
    }
    function querySelectorAllSubtree(element, selectors) {
      var elements = arrayFrom(element.querySelectorAll(selectors));
      return queryIdRefs(element, "aria-owns").forEach(function(root3) {
        elements.push.apply(elements, arrayFrom(root3.querySelectorAll(selectors)));
      }), elements;
    }
    function querySelectedOptions(listbox) {
      return isHTMLSelectElement(listbox) ? listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]") : querySelectorAllSubtree(listbox, '[aria-selected="true"]');
    }
    function isMarkedPresentational(node) {
      return hasAnyConcreteRoles(node, presentationRoles);
    }
    function isNativeHostLanguageTextAlternativeElement(node) {
      return isHTMLTableCaptionElement(node);
    }
    function allowsNameFromContent(node) {
      return hasAnyConcreteRoles(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
    }
    function isDescendantOfNativeHostLanguageTextAlternativeElement(node) {
      return false;
    }
    function getValueOfTextbox(element) {
      return isHTMLInputElement(element) || isHTMLTextAreaElement(element) ? element.value : element.textContent || "";
    }
    function getTextualContent(declaration) {
      var content = declaration.getPropertyValue("content");
      return /^["'].*["']$/.test(content) ? content.slice(1, -1) : "";
    }
    function isLabelableElement(element) {
      var localName = getLocalName(element);
      return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
    }
    function findLabelableElement(element) {
      if (isLabelableElement(element))
        return element;
      var labelableElement = null;
      return element.childNodes.forEach(function(childNode) {
        if (labelableElement === null && isElement(childNode)) {
          var descendantLabelableElement = findLabelableElement(childNode);
          descendantLabelableElement !== null && (labelableElement = descendantLabelableElement);
        }
      }), labelableElement;
    }
    function getControlOfLabel(label) {
      if (label.control !== void 0)
        return label.control;
      var htmlFor = label.getAttribute("for");
      return htmlFor !== null ? label.ownerDocument.getElementById(htmlFor) : findLabelableElement(label);
    }
    function getLabels(element) {
      var labelsProperty = element.labels;
      if (labelsProperty === null)
        return labelsProperty;
      if (labelsProperty !== void 0)
        return arrayFrom(labelsProperty);
      if (!isLabelableElement(element))
        return null;
      var document2 = element.ownerDocument;
      return arrayFrom(document2.querySelectorAll("label")).filter(function(label) {
        return getControlOfLabel(label) === element;
      });
    }
    function getSlotContents(slot) {
      var assignedNodes = slot.assignedNodes();
      return assignedNodes.length === 0 ? arrayFrom(slot.childNodes) : assignedNodes;
    }
    function computeTextAlternative(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, consultedNodes = new SetLike_default(), window2 = safeWindow(root3), _options$compute = options2.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options2.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options2.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options2.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options2.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
      function computeMiscTextAlternative(node, context) {
        var accumulatedText = "";
        if (isElement(node) && computedStyleSupportsPseudoElements) {
          var pseudoBefore = getComputedStyle(node, "::before"), beforeContent = getTextualContent(pseudoBefore);
          accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
        }
        var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : arrayFrom(node.childNodes).concat(queryIdRefs(node, "aria-owns"));
        if (childNodes.forEach(function(child) {
          var result2 = computeTextAlternative3(child, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true }), display2 = isElement(child) ? getComputedStyle(child).getPropertyValue("display") : "inline", separator = display2 !== "inline" ? " " : "";
          accumulatedText += "".concat(separator).concat(result2).concat(separator);
        }), isElement(node) && computedStyleSupportsPseudoElements) {
          var pseudoAfter = getComputedStyle(node, "::after"), afterContent = getTextualContent(pseudoAfter);
          accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
        }
        return accumulatedText.trim();
      }
      function useAttribute(element, attributeName) {
        var attribute = element.getAttributeNode(attributeName);
        return attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "" ? (consultedNodes.add(attribute), attribute.value) : null;
      }
      function computeTooltipAttributeValue(node) {
        return isElement(node) ? useAttribute(node, "title") : null;
      }
      function computeElementTextAlternative(node) {
        if (!isElement(node))
          return null;
        if (isHTMLFieldSetElement(node)) {
          consultedNodes.add(node);
          for (var children2 = arrayFrom(node.childNodes), i = 0; i < children2.length; i += 1) {
            var child = children2[i];
            if (isHTMLLegendElement(child))
              return computeTextAlternative3(child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
          }
        } else if (isHTMLTableElement(node)) {
          consultedNodes.add(node);
          for (var _children = arrayFrom(node.childNodes), _i = 0; _i < _children.length; _i += 1) {
            var _child = _children[_i];
            if (isHTMLTableCaptionElement(_child))
              return computeTextAlternative3(_child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
          }
        } else if (isSVGSVGElement(node)) {
          consultedNodes.add(node);
          for (var _children2 = arrayFrom(node.childNodes), _i2 = 0; _i2 < _children2.length; _i2 += 1) {
            var _child2 = _children2[_i2];
            if (isSVGTitleElement(_child2))
              return _child2.textContent;
          }
          return null;
        } else if (getLocalName(node) === "img" || getLocalName(node) === "area") {
          var nameFromAlt = useAttribute(node, "alt");
          if (nameFromAlt !== null)
            return nameFromAlt;
        } else if (isHTMLOptGroupElement(node)) {
          var nameFromLabel = useAttribute(node, "label");
          if (nameFromLabel !== null)
            return nameFromLabel;
        }
        if (isHTMLInputElement(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
          var nameFromValue = useAttribute(node, "value");
          if (nameFromValue !== null)
            return nameFromValue;
          if (node.type === "submit")
            return "Submit";
          if (node.type === "reset")
            return "Reset";
        }
        var labels = getLabels(node);
        if (labels !== null && labels.length !== 0)
          return consultedNodes.add(node), arrayFrom(labels).map(function(element) {
            return computeTextAlternative3(element, { isEmbeddedInLabel: true, isReferenced: false, recursion: true });
          }).filter(function(label) {
            return label.length > 0;
          }).join(" ");
        if (isHTMLInputElement(node) && node.type === "image") {
          var _nameFromAlt = useAttribute(node, "alt");
          if (_nameFromAlt !== null)
            return _nameFromAlt;
          var nameFromTitle = useAttribute(node, "title");
          return nameFromTitle !== null ? nameFromTitle : "Submit Query";
        }
        if (hasAnyConcreteRoles(node, ["button"])) {
          var nameFromSubTree = computeMiscTextAlternative(node, { isEmbeddedInLabel: false, isReferenced: false });
          if (nameFromSubTree !== "")
            return nameFromSubTree;
        }
        return null;
      }
      function computeTextAlternative3(current, context) {
        if (consultedNodes.has(current))
          return "";
        if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced)
          return consultedNodes.add(current), "";
        var labelAttributeNode = isElement(current) ? current.getAttributeNode("aria-labelledby") : null, labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs(current, "aria-labelledby") : [];
        if (compute === "name" && !context.isReferenced && labelElements.length > 0)
          return consultedNodes.add(labelAttributeNode), labelElements.map(function(element) {
            return computeTextAlternative3(element, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: true, recursion: false });
          }).join(" ");
        var skipToStep2E = context.recursion && isControl(current) && compute === "name";
        if (!skipToStep2E) {
          var ariaLabel = (isElement(current) && current.getAttribute("aria-label") || "").trim();
          if (ariaLabel !== "" && compute === "name")
            return consultedNodes.add(current), ariaLabel;
          if (!isMarkedPresentational(current)) {
            var elementTextAlternative = computeElementTextAlternative(current);
            if (elementTextAlternative !== null)
              return consultedNodes.add(current), elementTextAlternative;
          }
        }
        if (hasAnyConcreteRoles(current, ["menu"]))
          return consultedNodes.add(current), "";
        if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
          if (hasAnyConcreteRoles(current, ["combobox", "listbox"])) {
            consultedNodes.add(current);
            var selectedOptions = querySelectedOptions(current);
            return selectedOptions.length === 0 ? isHTMLInputElement(current) ? current.value : "" : arrayFrom(selectedOptions).map(function(selectedOption) {
              return computeTextAlternative3(selectedOption, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true });
            }).join(" ");
          }
          if (hasAbstractRole(current, "range"))
            return consultedNodes.add(current), current.hasAttribute("aria-valuetext") ? current.getAttribute("aria-valuetext") : current.hasAttribute("aria-valuenow") ? current.getAttribute("aria-valuenow") : current.getAttribute("value") || "";
          if (hasAnyConcreteRoles(current, ["textbox"]))
            return consultedNodes.add(current), getValueOfTextbox(current);
        }
        if (allowsNameFromContent(current) || isElement(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement(current)) {
          var accumulatedText2F = computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
          if (accumulatedText2F !== "")
            return consultedNodes.add(current), accumulatedText2F;
        }
        if (current.nodeType === current.TEXT_NODE)
          return consultedNodes.add(current), current.textContent || "";
        if (context.recursion)
          return consultedNodes.add(current), computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
        var tooltipAttributeValue = computeTooltipAttributeValue(current);
        return tooltipAttributeValue !== null ? (consultedNodes.add(current), tooltipAttributeValue) : (consultedNodes.add(current), "");
      }
      return asFlatString(computeTextAlternative3(root3, { isEmbeddedInLabel: false, isReferenced: compute === "description", recursion: false }));
    }
    function _typeof2(o) {
      "@babel/helpers - typeof";
      return _typeof2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && typeof Symbol == "function" && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof2(o);
    }
    function ownKeys(e, r) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
          return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = arguments[r] != null ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
          _defineProperty2(e, r2, t[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
          Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
        });
      }
      return e;
    }
    function _defineProperty2(obj, key2, value2) {
      return key2 = _toPropertyKey2(key2), key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    function _toPropertyKey2(arg) {
      var key2 = _toPrimitive2(arg, "string");
      return _typeof2(key2) === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive2(input2, hint) {
      if (_typeof2(input2) !== "object" || input2 === null)
        return input2;
      var prim = input2[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input2, hint || "default");
        if (_typeof2(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input2);
    }
    function computeAccessibleDescription(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, description = queryIdRefs(root3, "aria-describedby").map(function(element) {
        return computeTextAlternative(element, _objectSpread(_objectSpread({}, options2), {}, { compute: "description" }));
      }).join(" ");
      if (description === "") {
        var ariaDescription = root3.getAttribute("aria-description");
        description = ariaDescription === null ? "" : ariaDescription;
      }
      if (description === "") {
        var title = root3.getAttribute("title");
        description = title === null ? "" : title;
      }
      return description;
    }
    function prohibitsNaming(node) {
      return hasAnyConcreteRoles(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "none", "paragraph", "presentation", "strong", "subscript", "superscript"]);
    }
    function computeAccessibleName(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return prohibitsNaming(root3) ? "" : computeTextAlternative(root3, options2);
    }
    var import_aria_query = __toESM3(require_lib2(), 1);
    var import_chalk = __toESM3(require_source(), 1);
    var import_isEqualWith = __toESM3(require_isEqualWith(), 1);
    var import_uniq = __toESM3(require_uniq(), 1);
    var import_css = __toESM3(require_css_escape(), 1);
    var GenericTypeError = class extends Error {
      constructor(expectedString, received, matcherFn, context) {
        super(), Error.captureStackTrace && Error.captureStackTrace(this, matcherFn);
        let withType = "";
        try {
          withType = context.utils.printWithType("Received", received, context.utils.printReceived);
        } catch {
        }
        this.message = [context.utils.matcherHint(`${context.isNot ? ".not" : ""}.${matcherFn.name}`, "received", ""), "", `${context.utils.RECEIVED_COLOR("received")} value must ${expectedString}.`, withType].join(`
`);
      }
    };
    var HtmlElementTypeError = class extends GenericTypeError {
      constructor(...args2) {
        super("be an HTMLElement or an SVGElement", ...args2);
      }
    };
    var NodeTypeError = class extends GenericTypeError {
      constructor(...args2) {
        super("be a Node", ...args2);
      }
    };
    function checkHasWindow(htmlElement, ErrorClass, ...args2) {
      if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView)
        throw new ErrorClass(htmlElement, ...args2);
    }
    function checkNode(node, ...args2) {
      checkHasWindow(node, NodeTypeError, ...args2);
      let window2 = node.ownerDocument.defaultView;
      if (!(node instanceof window2.Node))
        throw new NodeTypeError(node, ...args2);
    }
    function checkHtmlElement(htmlElement, ...args2) {
      checkHasWindow(htmlElement, HtmlElementTypeError, ...args2);
      let window2 = htmlElement.ownerDocument.defaultView;
      if (!(htmlElement instanceof window2.HTMLElement) && !(htmlElement instanceof window2.SVGElement))
        throw new HtmlElementTypeError(htmlElement, ...args2);
    }
    var InvalidCSSError = class extends Error {
      constructor(received, matcherFn, context) {
        super(), Error.captureStackTrace && Error.captureStackTrace(this, matcherFn), this.message = [received.message, "", context.utils.RECEIVED_COLOR("Failing css:"), context.utils.RECEIVED_COLOR(`${received.css}`)].join(`
`);
      }
    };
    function parseCSS(css, ...args2) {
      let ast = $149c1bd638913645$export$98e6a39c04603d36(`selector { ${css} }`, { silent: true }).stylesheet;
      if (ast.parsingErrors && ast.parsingErrors.length > 0) {
        let { reason, line } = ast.parsingErrors[0];
        throw new InvalidCSSError({ css, message: `Syntax error parsing expected css: ${reason} on line: ${line}` }, ...args2);
      }
      return ast.rules[0].declarations.filter((d2) => d2.type === "declaration").reduce((obj, { property, value: value2 }) => Object.assign(obj, { [property]: value2 }), {});
    }
    function display(context, value2) {
      return typeof value2 == "string" ? value2 : context.utils.stringify(value2);
    }
    function getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
      return [`${matcher}
`, `${expectedLabel}:
${context.utils.EXPECTED_COLOR((0, import_redent.default)(display(context, expectedValue), 2))}`, `${receivedLabel}:
${context.utils.RECEIVED_COLOR((0, import_redent.default)(display(context, receivedValue), 2))}`].join(`
`);
    }
    function matches(textToMatch, matcher) {
      return matcher instanceof RegExp ? matcher.test(textToMatch) : textToMatch.includes(String(matcher));
    }
    function deprecate(name2, replacementText) {
      console.warn(`Warning: ${name2} has been deprecated and will be removed in future updates.`, replacementText);
    }
    function normalize(text) {
      return text.replace(/\s+/g, " ").trim();
    }
    function getTag(element) {
      return element.tagName && element.tagName.toLowerCase();
    }
    function getSelectValue({ multiple, options: options2 }) {
      let selectedOptions = [...options2].filter((option) => option.selected);
      if (multiple)
        return [...selectedOptions].map((opt) => opt.value);
      if (selectedOptions.length !== 0)
        return selectedOptions[0].value;
    }
    function getInputValue(inputElement) {
      switch (inputElement.type) {
        case "number":
          return inputElement.value === "" ? null : Number(inputElement.value);
        case "checkbox":
          return inputElement.checked;
        default:
          return inputElement.value;
      }
    }
    function getSingleElementValue(element) {
      if (element)
        switch (element.tagName.toLowerCase()) {
          case "input":
            return getInputValue(element);
          case "select":
            return getSelectValue(element);
          default:
            return element.value;
        }
    }
    function compareArraysAsSet(a, b2) {
      if (Array.isArray(a) && Array.isArray(b2))
        return (0, import_isEqual.default)(new Set(a), new Set(b2));
    }
    function toSentence(array, { wordConnector = ", ", lastWordConnector = " and " } = {}) {
      return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(array.length > 1 ? lastWordConnector : "");
    }
    function toBeInTheDOM(element, container) {
      return deprecate("toBeInTheDOM", "Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container."), element && checkHtmlElement(element, toBeInTheDOM, this), container && checkHtmlElement(container, toBeInTheDOM, this), { pass: container ? container.contains(element) : !!element, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInTheDOM`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element && element.cloneNode(false))}`].join(`
`) };
    }
    function toBeInTheDocument(element) {
      (element !== null || !this.isNot) && checkHtmlElement(element, toBeInTheDocument, this);
      let pass = element === null ? false : element.ownerDocument === element.getRootNode({ composed: true }), errorFound = () => `expected document not to contain element, found ${this.utils.stringify(element.cloneNode(true))} instead`, errorNotFound = () => "element could not be found in the document";
      return { pass, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInTheDocument`, "element", ""), "", this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound())].join(`
`) };
    }
    function toBeEmpty(element) {
      return deprecate("toBeEmpty", "Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM."), checkHtmlElement(element, toBeEmpty, this), { pass: element.innerHTML === "", message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEmpty`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element.innerHTML)}`].join(`
`) };
    }
    function toBeEmptyDOMElement(element) {
      return checkHtmlElement(element, toBeEmptyDOMElement, this), { pass: isEmptyElement(element), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEmptyDOMElement`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element.innerHTML)}`].join(`
`) };
    }
    function isEmptyElement(element) {
      return [...element.childNodes].filter((node) => node.nodeType !== 8).length === 0;
    }
    function toContainElement(container, element) {
      return checkHtmlElement(container, toContainElement, this), element !== null && checkHtmlElement(element, toContainElement, this), { pass: container.contains(element), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toContainElement`, "element", "element"), "", this.utils.RECEIVED_COLOR(`${this.utils.stringify(container.cloneNode(false))} ${this.isNot ? "contains:" : "does not contain:"} ${this.utils.stringify(element && element.cloneNode(false))}
        `)].join(`
`) };
    }
    function getNormalizedHtml(container, htmlText) {
      let div = container.ownerDocument.createElement("div");
      return div.innerHTML = htmlText, div.innerHTML;
    }
    function toContainHTML(container, htmlText) {
      if (checkHtmlElement(container, toContainHTML, this), typeof htmlText != "string")
        throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);
      return { pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toContainHTML`, "element", ""), "Expected:", `  ${this.utils.EXPECTED_COLOR(htmlText)}`, "Received:", `  ${this.utils.printReceived(container.cloneNode(true))}`].join(`
`) };
    }
    function toHaveTextContent(node, checkWith, options2 = { normalizeWhitespace: true }) {
      checkNode(node, toHaveTextContent, this);
      let textContent = options2.normalizeWhitespace ? normalize(node.textContent) : node.textContent.replace(/\u00a0/g, " "), checkingWithEmptyString = textContent !== "" && checkWith === "";
      return { pass: !checkingWithEmptyString && matches(textContent, checkWith), message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveTextContent`, "element", ""), checkingWithEmptyString ? "Checking with empty string will always match, use .toBeEmptyDOMElement() instead" : `Expected element ${to} have text content`, checkWith, "Received", textContent);
      } };
    }
    function toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {
      checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);
      let actualAccessibleDescription = computeAccessibleDescription(htmlElement), missingExpectedValue = arguments.length === 1, pass = false;
      return missingExpectedValue ? pass = actualAccessibleDescription !== "" : pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(actualAccessibleDescription, expectedAccessibleDescription), { pass, message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveAccessibleDescription.name}`, "element", ""), `Expected element ${to} have accessible description`, expectedAccessibleDescription, "Received", actualAccessibleDescription);
      } };
    }
    var ariaInvalidName = "aria-invalid";
    var validStates = ["false"];
    function toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {
      var _a;
      checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);
      let to = this.isNot ? "not to" : "to", method = this.isNot ? ".not.toHaveAccessibleErrorMessage" : ".toHaveAccessibleErrorMessage", errormessageId = htmlElement.getAttribute("aria-errormessage");
      if (!!errormessageId && /\s+/.test(errormessageId))
        return { pass: false, message: () => getMessage(this, this.utils.matcherHint(method, "element"), "Expected element's `aria-errormessage` attribute to be empty or a single, valid ID", "", "Received", `aria-errormessage="${errormessageId}"`) };
      let ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);
      if (!htmlElement.hasAttribute(ariaInvalidName) || validStates.includes(ariaInvalidVal))
        return { pass: false, message: () => getMessage(this, this.utils.matcherHint(method, "element"), "Expected element to be marked as invalid with attribute", `${ariaInvalidName}="${String(true)}"`, "Received", htmlElement.hasAttribute("aria-invalid") ? `${ariaInvalidName}="${htmlElement.getAttribute(ariaInvalidName)}` : null) };
      let error = normalize(((_a = htmlElement.ownerDocument.getElementById(errormessageId)) == null ? void 0 : _a.textContent) ?? "");
      return { pass: expectedAccessibleErrorMessage === void 0 ? !!error : expectedAccessibleErrorMessage instanceof RegExp ? expectedAccessibleErrorMessage.test(error) : this.equals(error, expectedAccessibleErrorMessage), message: () => getMessage(this, this.utils.matcherHint(method, "element"), `Expected element ${to} have accessible error message`, expectedAccessibleErrorMessage ?? "", "Received", error) };
    }
    var elementRoleList = buildElementRoleList(import_aria_query.elementRoles);
    function toHaveRole(htmlElement, expectedRole) {
      checkHtmlElement(htmlElement, toHaveRole, this);
      let actualRoles = getExplicitOrImplicitRoles(htmlElement);
      return { pass: actualRoles.some((el) => el === expectedRole), message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveRole.name}`, "element", ""), `Expected element ${to} have role`, expectedRole, "Received", actualRoles.join(", "));
      } };
    }
    function getExplicitOrImplicitRoles(htmlElement) {
      return htmlElement.hasAttribute("role") ? htmlElement.getAttribute("role").split(" ").filter(Boolean) : getImplicitAriaRoles(htmlElement);
    }
    function getImplicitAriaRoles(currentNode) {
      for (let { match, roles: roles3 } of elementRoleList)
        if (match(currentNode))
          return [...roles3];
      return [];
    }
    function buildElementRoleList(elementRolesMap) {
      function makeElementSelector({ name: name2, attributes }) {
        return `${name2}${attributes.map(({ name: attributeName, value: value2, constraints = [] }) => constraints.indexOf("undefined") !== -1 ? `:not([${attributeName}])` : value2 ? `[${attributeName}="${value2}"]` : `[${attributeName}]`).join("")}`;
      }
      function getSelectorSpecificity({ attributes = [] }) {
        return attributes.length;
      }
      function bySelectorSpecificity({ specificity: leftSpecificity }, { specificity: rightSpecificity }) {
        return rightSpecificity - leftSpecificity;
      }
      function match(element) {
        let { attributes = [] } = element, typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
        typeTextIndex >= 0 && (attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)]);
        let selector = makeElementSelector({ ...element, attributes });
        return (node) => typeTextIndex >= 0 && node.type !== "text" ? false : node.matches(selector);
      }
      let result2 = [];
      for (let [element, roles3] of elementRolesMap.entries())
        result2 = [...result2, { match: match(element), roles: Array.from(roles3), specificity: getSelectorSpecificity(element) }];
      return result2.sort(bySelectorSpecificity);
    }
    function toHaveAccessibleName(htmlElement, expectedAccessibleName) {
      checkHtmlElement(htmlElement, toHaveAccessibleName, this);
      let actualAccessibleName = computeAccessibleName(htmlElement), missingExpectedValue = arguments.length === 1, pass = false;
      return missingExpectedValue ? pass = actualAccessibleName !== "" : pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName), { pass, message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveAccessibleName.name}`, "element", ""), `Expected element ${to} have accessible name`, expectedAccessibleName, "Received", actualAccessibleName);
      } };
    }
    function printAttribute(stringify22, name2, value2) {
      return value2 === void 0 ? name2 : `${name2}=${stringify22(value2)}`;
    }
    function getAttributeComment(stringify22, name2, value2) {
      return value2 === void 0 ? `element.hasAttribute(${stringify22(name2)})` : `element.getAttribute(${stringify22(name2)}) === ${stringify22(value2)}`;
    }
    function toHaveAttribute(htmlElement, name2, expectedValue) {
      checkHtmlElement(htmlElement, toHaveAttribute, this);
      let isExpectedValuePresent = expectedValue !== void 0, hasAttribute = htmlElement.hasAttribute(name2), receivedValue = htmlElement.getAttribute(name2);
      return { pass: isExpectedValuePresent ? hasAttribute && this.equals(receivedValue, expectedValue) : hasAttribute, message: () => {
        let to = this.isNot ? "not to" : "to", receivedAttribute = hasAttribute ? printAttribute(this.utils.stringify, name2, receivedValue) : null, matcher = this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveAttribute`, "element", this.utils.printExpected(name2), { secondArgument: isExpectedValuePresent ? this.utils.printExpected(expectedValue) : void 0, comment: getAttributeComment(this.utils.stringify, name2, expectedValue) });
        return getMessage(this, matcher, `Expected the element ${to} have attribute`, printAttribute(this.utils.stringify, name2, expectedValue), "Received", receivedAttribute);
      } };
    }
    function getExpectedClassNamesAndOptions(params) {
      let lastParam = params.pop(), expectedClassNames, options2;
      return typeof lastParam == "object" && !(lastParam instanceof RegExp) ? (expectedClassNames = params, options2 = lastParam) : (expectedClassNames = params.concat(lastParam), options2 = { exact: false }), { expectedClassNames, options: options2 };
    }
    function splitClassNames(str) {
      return str ? str.split(/\s+/).filter((s) => s.length > 0) : [];
    }
    function isSubset$1(subset, superset) {
      return subset.every((strOrRegexp) => typeof strOrRegexp == "string" ? superset.includes(strOrRegexp) : superset.some((className) => strOrRegexp.test(className)));
    }
    function toHaveClass(htmlElement, ...params) {
      checkHtmlElement(htmlElement, toHaveClass, this);
      let { expectedClassNames, options: options2 } = getExpectedClassNamesAndOptions(params), received = splitClassNames(htmlElement.getAttribute("class")), expected = expectedClassNames.reduce((acc, className) => acc.concat(typeof className == "string" || !className ? splitClassNames(className) : className), []), hasRegExp = expected.some((className) => className instanceof RegExp);
      if (options2.exact && hasRegExp)
        throw new Error("Exact option does not support RegExp expected class names");
      return options2.exact ? { pass: isSubset$1(expected, received) && expected.length === received.length, message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveClass`, "element", this.utils.printExpected(expected.join(" "))), `Expected the element ${to} have EXACTLY defined classes`, expected.join(" "), "Received", received.join(" "));
      } } : expected.length > 0 ? { pass: isSubset$1(expected, received), message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveClass`, "element", this.utils.printExpected(expected.join(" "))), `Expected the element ${to} have class`, expected.join(" "), "Received", received.join(" "));
      } } : { pass: this.isNot ? received.length > 0 : false, message: () => this.isNot ? getMessage(this, this.utils.matcherHint(".not.toHaveClass", "element", ""), "Expected the element to have classes", "(none)", "Received", received.join(" ")) : [this.utils.matcherHint(".toHaveClass", "element"), "At least one expected class must be provided."].join(`
`) };
    }
    function getStyleDeclaration(document2, css) {
      let styles2 = {}, copy3 = document2.createElement("div");
      return Object.keys(css).forEach((property) => {
        copy3.style[property] = css[property], styles2[property] = copy3.style[property];
      }), styles2;
    }
    function isSubset(styles2, computedStyle) {
      return !!Object.keys(styles2).length && Object.entries(styles2).every(([prop, value2]) => {
        let isCustomProperty = prop.startsWith("--"), spellingVariants = [prop];
        return isCustomProperty || spellingVariants.push(prop.toLowerCase()), spellingVariants.some((name2) => computedStyle[name2] === value2 || computedStyle.getPropertyValue(name2) === value2);
      });
    }
    function printoutStyles(styles2) {
      return Object.keys(styles2).sort().map((prop) => `${prop}: ${styles2[prop]};`).join(`
`);
    }
    function expectedDiff(diffFn, expected, computedStyles) {
      let received = Array.from(computedStyles).filter((prop) => expected[prop] !== void 0).reduce((obj, prop) => Object.assign(obj, { [prop]: computedStyles.getPropertyValue(prop) }), {});
      return diffFn(printoutStyles(expected), printoutStyles(received)).replace(`${import_chalk.default.red("+ Received")}
`, "");
    }
    function toHaveStyle(htmlElement, css) {
      checkHtmlElement(htmlElement, toHaveStyle, this);
      let parsedCSS = typeof css == "object" ? css : parseCSS(css, toHaveStyle, this), { getComputedStyle } = htmlElement.ownerDocument.defaultView, expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS), received = getComputedStyle(htmlElement);
      return { pass: isSubset(expected, received), message: () => {
        let matcher = `${this.isNot ? ".not" : ""}.toHaveStyle`;
        return [this.utils.matcherHint(matcher, "element", ""), expectedDiff(this.utils.diff, expected, received)].join(`

`);
      } };
    }
    function toHaveFocus(element) {
      return checkHtmlElement(element, toHaveFocus, this), { pass: element.ownerDocument.activeElement === element, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveFocus`, "element", ""), "", ...this.isNot ? ["Received element is focused:", `  ${this.utils.printReceived(element)}`] : ["Expected element with focus:", `  ${this.utils.printExpected(element)}`, "Received element with focus:", `  ${this.utils.printReceived(element.ownerDocument.activeElement)}`]].join(`
`) };
    }
    function getMultiElementValue(elements) {
      let types = (0, import_uniq.default)(elements.map((element) => element.type));
      if (types.length !== 1)
        throw new Error("Multiple form elements with the same name must be of the same type");
      switch (types[0]) {
        case "radio": {
          let theChosenOne = elements.find((radio) => radio.checked);
          return theChosenOne ? theChosenOne.value : void 0;
        }
        case "checkbox":
          return elements.filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);
        default:
          return elements.map((element) => element.value);
      }
    }
    function getFormValue(container, name2) {
      let elements = [...container.querySelectorAll(`[name="${(0, import_css.default)(name2)}"]`)];
      if (elements.length !== 0)
        switch (elements.length) {
          case 1:
            return getSingleElementValue(elements[0]);
          default:
            return getMultiElementValue(elements);
        }
    }
    function getPureName(name2) {
      return /\[\]$/.test(name2) ? name2.slice(0, -2) : name2;
    }
    function getAllFormValues(container) {
      return Array.from(container.elements).map((element) => element.name).reduce((obj, name2) => ({ ...obj, [getPureName(name2)]: getFormValue(container, name2) }), {});
    }
    function toHaveFormValues(formElement, expectedValues) {
      if (checkHtmlElement(formElement, toHaveFormValues, this), !formElement.elements)
        throw new Error("toHaveFormValues must be called on a form or a fieldset");
      let formValues = getAllFormValues(formElement);
      return { pass: Object.entries(expectedValues).every(([name2, expectedValue]) => (0, import_isEqualWith.default)(formValues[name2], expectedValue, compareArraysAsSet)), message: () => {
        let to = this.isNot ? "not to" : "to", matcher = `${this.isNot ? ".not" : ""}.toHaveFormValues`, commonKeyValues = Object.keys(formValues).filter((key2) => expectedValues.hasOwnProperty(key2)).reduce((obj, key2) => ({ ...obj, [key2]: formValues[key2] }), {});
        return [this.utils.matcherHint(matcher, "element", ""), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join(`

`);
      } };
    }
    function isStyleVisible(element) {
      let { getComputedStyle } = element.ownerDocument.defaultView, { display: display2, visibility, opacity } = getComputedStyle(element);
      return display2 !== "none" && visibility !== "hidden" && visibility !== "collapse" && opacity !== "0" && opacity !== 0;
    }
    function isAttributeVisible(element, previousElement) {
      let detailsVisibility;
      return previousElement ? detailsVisibility = element.nodeName === "DETAILS" && previousElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true : detailsVisibility = element.nodeName === "DETAILS" ? element.hasAttribute("open") : true, !element.hasAttribute("hidden") && detailsVisibility;
    }
    function isElementVisible(element, previousElement) {
      return isStyleVisible(element) && isAttributeVisible(element, previousElement) && (!element.parentElement || isElementVisible(element.parentElement, element));
    }
    function toBeVisible(element) {
      checkHtmlElement(element, toBeVisible, this);
      let isInDocument = element.ownerDocument === element.getRootNode({ composed: true }), isVisible2 = isInDocument && isElementVisible(element);
      return { pass: isVisible2, message: () => {
        let is = isVisible2 ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeVisible`, "element", ""), "", `Received element ${is} visible${isInDocument ? "" : " (element is not in the document)"}:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    var FORM_TAGS$2 = ["fieldset", "input", "select", "optgroup", "option", "button", "textarea"];
    function isFirstLegendChildOfFieldset(element, parent) {
      return getTag(element) === "legend" && getTag(parent) === "fieldset" && element.isSameNode(Array.from(parent.children).find((child) => getTag(child) === "legend"));
    }
    function isElementDisabledByParent(element, parent) {
      return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);
    }
    function isCustomElement(tag) {
      return tag.includes("-");
    }
    function canElementBeDisabled(element) {
      let tag = getTag(element);
      return FORM_TAGS$2.includes(tag) || isCustomElement(tag);
    }
    function isElementDisabled(element) {
      return canElementBeDisabled(element) && element.hasAttribute("disabled");
    }
    function isAncestorDisabled(element) {
      let parent = element.parentElement;
      return !!parent && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));
    }
    function isElementOrAncestorDisabled(element) {
      return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));
    }
    function toBeDisabled(element) {
      checkHtmlElement(element, toBeDisabled, this);
      let isDisabled3 = isElementOrAncestorDisabled(element);
      return { pass: isDisabled3, message: () => {
        let is = isDisabled3 ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeDisabled`, "element", ""), "", `Received element ${is} disabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    function toBeEnabled(element) {
      checkHtmlElement(element, toBeEnabled, this);
      let isEnabled = !isElementOrAncestorDisabled(element);
      return { pass: isEnabled, message: () => {
        let is = isEnabled ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEnabled`, "element", ""), "", `Received element ${is} enabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    var FORM_TAGS$1 = ["select", "textarea"];
    var ARIA_FORM_TAGS = ["input", "select", "textarea"];
    var UNSUPPORTED_INPUT_TYPES = ["color", "hidden", "range", "submit", "image", "reset"];
    var SUPPORTED_ARIA_ROLES = ["combobox", "gridcell", "radiogroup", "spinbutton", "tree"];
    function isRequiredOnFormTagsExceptInput(element) {
      return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute("required");
    }
    function isRequiredOnSupportedInput(element) {
      return getTag(element) === "input" && element.hasAttribute("required") && (element.hasAttribute("type") && !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute("type")) || !element.hasAttribute("type"));
    }
    function isElementRequiredByARIA(element) {
      return element.hasAttribute("aria-required") && element.getAttribute("aria-required") === "true" && (ARIA_FORM_TAGS.includes(getTag(element)) || element.hasAttribute("role") && SUPPORTED_ARIA_ROLES.includes(element.getAttribute("role")));
    }
    function toBeRequired(element) {
      checkHtmlElement(element, toBeRequired, this);
      let isRequired = isRequiredOnFormTagsExceptInput(element) || isRequiredOnSupportedInput(element) || isElementRequiredByARIA(element);
      return { pass: isRequired, message: () => {
        let is = isRequired ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeRequired`, "element", ""), "", `Received element ${is} required:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    var FORM_TAGS = ["form", "input", "select", "textarea"];
    function isElementHavingAriaInvalid(element) {
      return element.hasAttribute("aria-invalid") && element.getAttribute("aria-invalid") !== "false";
    }
    function isSupportsValidityMethod(element) {
      return FORM_TAGS.includes(getTag(element));
    }
    function isElementInvalid(element) {
      let isHaveAriaInvalid = isElementHavingAriaInvalid(element);
      return isSupportsValidityMethod(element) ? isHaveAriaInvalid || !element.checkValidity() : isHaveAriaInvalid;
    }
    function toBeInvalid(element) {
      checkHtmlElement(element, toBeInvalid, this);
      let isInvalid = isElementInvalid(element);
      return { pass: isInvalid, message: () => {
        let is = isInvalid ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInvalid`, "element", ""), "", `Received element ${is} currently invalid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    function toBeValid(element) {
      checkHtmlElement(element, toBeValid, this);
      let isValid = !isElementInvalid(element);
      return { pass: isValid, message: () => {
        let is = isValid ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeValid`, "element", ""), "", `Received element ${is} currently valid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    function toHaveValue(htmlElement, expectedValue) {
      if (checkHtmlElement(htmlElement, toHaveValue, this), htmlElement.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(htmlElement.type))
        throw new Error("input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead");
      let receivedValue = getSingleElementValue(htmlElement), expectsValue = expectedValue !== void 0, expectedTypedValue = expectedValue, receivedTypedValue = receivedValue;
      return expectedValue == receivedValue && expectedValue !== receivedValue && (expectedTypedValue = `${expectedValue} (${typeof expectedValue})`, receivedTypedValue = `${receivedValue} (${typeof receivedValue})`), { pass: expectsValue ? (0, import_isEqualWith.default)(receivedValue, expectedValue, compareArraysAsSet) : !!receivedValue, message: () => {
        let to = this.isNot ? "not to" : "to", matcher = this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveValue`, "element", expectedValue);
        return getMessage(this, matcher, `Expected the element ${to} have value`, expectsValue ? expectedTypedValue : "(any)", "Received", receivedTypedValue);
      } };
    }
    function toHaveDisplayValue(htmlElement, expectedValue) {
      checkHtmlElement(htmlElement, toHaveDisplayValue, this);
      let tagName = htmlElement.tagName.toLowerCase();
      if (!["select", "input", "textarea"].includes(tagName))
        throw new Error(".toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.");
      if (tagName === "input" && ["radio", "checkbox"].includes(htmlElement.type))
        throw new Error(`.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`);
      let values = getValues(tagName, htmlElement), expectedValues = getExpectedValues(expectedValue), numberOfMatchesWithValues = expectedValues.filter((expected) => values.some((value2) => expected instanceof RegExp ? expected.test(value2) : this.equals(value2, String(expected)))).length, matchedWithAllValues = numberOfMatchesWithValues === values.length, matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;
      return { pass: matchedWithAllValues && matchedWithAllExpectedValues, message: () => getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveDisplayValue`, "element", ""), `Expected element ${this.isNot ? "not " : ""}to have display value`, expectedValue, "Received", values) };
    }
    function getValues(tagName, htmlElement) {
      return tagName === "select" ? Array.from(htmlElement).filter((option) => option.selected).map((option) => option.textContent) : [htmlElement.value];
    }
    function getExpectedValues(expectedValue) {
      return expectedValue instanceof Array ? expectedValue : [expectedValue];
    }
    function toBeChecked(element) {
      checkHtmlElement(element, toBeChecked, this);
      let isValidInput = () => element.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(element.type), isValidAriaElement = () => roleSupportsChecked(element.getAttribute("role")) && ["true", "false"].includes(element.getAttribute("aria-checked"));
      if (!isValidInput() && !isValidAriaElement())
        return { pass: false, message: () => `only inputs with type="checkbox" or type="radio" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead` };
      let isChecked = () => isValidInput() ? element.checked : element.getAttribute("aria-checked") === "true";
      return { pass: isChecked(), message: () => {
        let is = isChecked() ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeChecked`, "element", ""), "", `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    function supportedRolesSentence() {
      return toSentence(supportedRoles().map((role) => `role="${role}"`), { lastWordConnector: " or " });
    }
    function supportedRoles() {
      return import_aria_query.roles.keys().filter(roleSupportsChecked);
    }
    function roleSupportsChecked(role) {
      var _a;
      return ((_a = import_aria_query.roles.get(role)) == null ? void 0 : _a.props["aria-checked"]) !== void 0;
    }
    function toBePartiallyChecked(element) {
      checkHtmlElement(element, toBePartiallyChecked, this);
      let isValidInput = () => element.tagName.toLowerCase() === "input" && element.type === "checkbox", isValidAriaElement = () => element.getAttribute("role") === "checkbox";
      if (!isValidInput() && !isValidAriaElement())
        return { pass: false, message: () => 'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead' };
      let isPartiallyChecked = () => {
        let isAriaMixed = element.getAttribute("aria-checked") === "mixed";
        return isValidInput() && element.indeterminate || isAriaMixed;
      };
      return { pass: isPartiallyChecked(), message: () => {
        let is = isPartiallyChecked() ? "is" : "is not";
        return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBePartiallyChecked`, "element", ""), "", `Received element ${is} partially checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
      } };
    }
    function toHaveDescription(htmlElement, checkWith) {
      deprecate("toHaveDescription", "Please use toHaveAccessibleDescription."), checkHtmlElement(htmlElement, toHaveDescription, this);
      let expectsDescription = checkWith !== void 0, descriptionIDs = (htmlElement.getAttribute("aria-describedby") || "").split(/\s+/).filter(Boolean), description = "";
      if (descriptionIDs.length > 0) {
        let document2 = htmlElement.ownerDocument, descriptionEls = descriptionIDs.map((descriptionID) => document2.getElementById(descriptionID)).filter(Boolean);
        description = normalize(descriptionEls.map((el) => el.textContent).join(" "));
      }
      return { pass: expectsDescription ? checkWith instanceof RegExp ? checkWith.test(description) : this.equals(description, checkWith) : !!description, message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveDescription`, "element", ""), `Expected the element ${to} have description`, this.utils.printExpected(checkWith), "Received", this.utils.printReceived(description));
      } };
    }
    function toHaveErrorMessage(htmlElement, checkWith) {
      if (deprecate("toHaveErrorMessage", "Please use toHaveAccessibleErrorMessage."), checkHtmlElement(htmlElement, toHaveErrorMessage, this), !htmlElement.hasAttribute("aria-invalid") || htmlElement.getAttribute("aria-invalid") === "false") {
        let not = this.isNot ? ".not" : "";
        return { pass: false, message: () => getMessage(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, "element", ""), "Expected the element to have invalid state indicated by", 'aria-invalid="true"', "Received", htmlElement.hasAttribute("aria-invalid") ? `aria-invalid="${htmlElement.getAttribute("aria-invalid")}"` : this.utils.printReceived("")) };
      }
      let expectsErrorMessage = checkWith !== void 0, errormessageIDs = (htmlElement.getAttribute("aria-errormessage") || "").split(/\s+/).filter(Boolean), errormessage = "";
      if (errormessageIDs.length > 0) {
        let document2 = htmlElement.ownerDocument, errormessageEls = errormessageIDs.map((errormessageID) => document2.getElementById(errormessageID)).filter(Boolean);
        errormessage = normalize(errormessageEls.map((el) => el.textContent).join(" "));
      }
      return { pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : !!errormessage, message: () => {
        let to = this.isNot ? "not to" : "to";
        return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveErrorMessage`, "element", ""), `Expected the element ${to} have error message`, this.utils.printExpected(checkWith), "Received", this.utils.printReceived(errormessage));
      } };
    }
    var import_redent2 = __toESM3(require_redent(), 1);
    var import_isEqual2 = __toESM3(require_isEqual(), 1);
    var import_aria_query2 = __toESM3(require_lib2(), 1);
    var import_chalk2 = __toESM3(require_source(), 1);
    var import_isEqualWith2 = __toESM3(require_isEqualWith(), 1);
    var import_uniq2 = __toESM3(require_uniq(), 1);
    var import_css2 = __toESM3(require_css_escape(), 1);
    function createExpect() {
      use(JestExtend), use(JestChaiExpect), use(JestAsymmetricMatchers);
      let expect4 = (value2, message) => {
        let { assertionCalls } = getState(expect4);
        return setState({ assertionCalls: assertionCalls + 1, soft: false }, expect4), expect(value2, message);
      };
      Object.assign(expect4, expect), expect4.getState = () => getState(expect4), expect4.setState = (state) => setState(state, expect4), expect4.extend = (expects) => expect.extend(expect4, expects), expect4.soft = (...args2) => {
        let assert2 = expect4(...args2);
        return expect4.setState({ soft: true }), assert2;
      }, expect4.unreachable = (message) => {
        assert.fail(`expected${message ? ` "${message}" ` : " "}not to be reached`);
      };
      function assertions(expected) {
        let errorGen = () => new Error(`expected number of assertions to be ${expected}, but got ${expect4.getState().assertionCalls}`);
        "captureStackTrace" in Error && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(errorGen(), assertions), expect4.setState({ expectedAssertionsNumber: expected, expectedAssertionsNumberErrorGen: errorGen });
      }
      function hasAssertions() {
        let error = new Error("expected any number of assertion, but got none");
        "captureStackTrace" in Error && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(error, hasAssertions), expect4.setState({ isExpectingAssertions: true, isExpectingAssertionsError: error });
      }
      return setState({ assertionCalls: 0, isExpectingAssertions: false, isExpectingAssertionsError: null, expectedAssertionsNumber: null, expectedAssertionsNumberErrorGen: null }, expect4), util.addMethod(expect4, "assertions", assertions), util.addMethod(expect4, "hasAssertions", hasAssertions), expect4.extend(matchers_exports), expect4;
    }
    var expect2 = createExpect();
    Object.defineProperty(globalThis, GLOBAL_EXPECT, { value: expect2, writable: true, configurable: true });
    var listeners = /* @__PURE__ */ new Set();
    function onMockCall(callback) {
      return listeners.add(callback), () => void listeners.delete(callback);
    }
    var spyOn2 = (...args2) => {
      let mock = spyOn(...args2);
      return reactiveMock(mock);
    };
    var fn22 = (implementation) => {
      let mock = implementation ? fn2(implementation) : fn2();
      return reactiveMock(mock);
    };
    function reactiveMock(mock) {
      let reactive = listenWhenCalled(mock), originalMockImplementation = reactive.mockImplementation.bind(null);
      return reactive.mockImplementation = (fn3) => listenWhenCalled(originalMockImplementation(fn3)), reactive;
    }
    function listenWhenCalled(mock) {
      var _a;
      let state = v(mock), impl = (_a = state.impl) == null ? void 0 : _a.bind(null);
      return state.willCall((...args2) => (listeners.forEach((listener) => listener(mock, args2)), impl == null ? void 0 : impl(...args2))), mock;
    }
    function clearAllMocks() {
      mocks.forEach((spy) => spy.mockClear());
    }
    function resetAllMocks() {
      mocks.forEach((spy) => spy.mockReset());
    }
    function restoreAllMocks() {
      mocks.forEach((spy) => spy.mockRestore());
    }
    function mocked(item, _options = {}) {
      return item;
    }
    var import_client_logger = require_dist3();
    var import_instrumenter = require_dist8();
    var dom_esm_exports = {};
    __export2(dom_esm_exports, { buildQueries: () => buildQueries, configure: () => configure, createEvent: () => createEvent, findAllByAltText: () => findAllByAltText, findAllByDisplayValue: () => findAllByDisplayValue, findAllByLabelText: () => findAllByLabelText, findAllByPlaceholderText: () => findAllByPlaceholderText, findAllByRole: () => findAllByRole, findAllByTestId: () => findAllByTestId, findAllByText: () => findAllByText, findAllByTitle: () => findAllByTitle, findByAltText: () => findByAltText, findByDisplayValue: () => findByDisplayValue, findByLabelText: () => findByLabelText, findByPlaceholderText: () => findByPlaceholderText, findByRole: () => findByRole, findByTestId: () => findByTestId, findByText: () => findByText, findByTitle: () => findByTitle, fireEvent: () => fireEvent, getAllByAltText: () => getAllByAltText, getAllByDisplayValue: () => getAllByDisplayValue, getAllByLabelText: () => getAllByLabelTextWithSuggestions, getAllByPlaceholderText: () => getAllByPlaceholderText, getAllByRole: () => getAllByRole, getAllByTestId: () => getAllByTestId, getAllByText: () => getAllByText, getAllByTitle: () => getAllByTitle, getByAltText: () => getByAltText, getByDisplayValue: () => getByDisplayValue, getByLabelText: () => getByLabelTextWithSuggestions, getByPlaceholderText: () => getByPlaceholderText, getByRole: () => getByRole, getByTestId: () => getByTestId, getByText: () => getByText, getByTitle: () => getByTitle, getConfig: () => getConfig, getDefaultNormalizer: () => getDefaultNormalizer, getElementError: () => getElementError, getMultipleElementsFoundError: () => getMultipleElementsFoundError, getNodeText: () => getNodeText, getQueriesForElement: () => getQueriesForElement, getRoles: () => getRoles, getSuggestedQuery: () => getSuggestedQuery, isInaccessible: () => isInaccessible, logDOM: () => logDOM, logRoles: () => logRoles, makeFindQuery: () => makeFindQuery, makeGetAllQuery: () => makeGetAllQuery, makeSingleQuery: () => makeSingleQuery, prettyDOM: () => prettyDOM, prettyFormat: () => prettyFormat, queries: () => queries, queryAllByAltText: () => queryAllByAltTextWithSuggestions, queryAllByAttribute: () => queryAllByAttribute, queryAllByDisplayValue: () => queryAllByDisplayValueWithSuggestions, queryAllByLabelText: () => queryAllByLabelTextWithSuggestions, queryAllByPlaceholderText: () => queryAllByPlaceholderTextWithSuggestions, queryAllByRole: () => queryAllByRoleWithSuggestions, queryAllByTestId: () => queryAllByTestIdWithSuggestions, queryAllByText: () => queryAllByTextWithSuggestions, queryAllByTitle: () => queryAllByTitleWithSuggestions, queryByAltText: () => queryByAltText, queryByAttribute: () => queryByAttribute, queryByDisplayValue: () => queryByDisplayValue, queryByLabelText: () => queryByLabelText, queryByPlaceholderText: () => queryByPlaceholderText, queryByRole: () => queryByRole, queryByTestId: () => queryByTestId, queryByText: () => queryByText, queryByTitle: () => queryByTitle, queryHelpers: () => queryHelpers, screen: () => screen, waitFor: () => waitForWrapper, waitForElementToBeRemoved: () => waitForElementToBeRemoved, within: () => getQueriesForElement, wrapAllByQueryWithSuggestion: () => wrapAllByQueryWithSuggestion, wrapSingleQueryWithSuggestion: () => wrapSingleQueryWithSuggestion });
    var prettyFormat = __toESM3(require_build3());
    var toStr2 = Object.prototype.toString;
    function isCallable2(fn3) {
      return typeof fn3 == "function" || toStr2.call(fn3) === "[object Function]";
    }
    function toInteger2(value2) {
      var number = Number(value2);
      return isNaN(number) ? 0 : number === 0 || !isFinite(number) ? number : (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    }
    var maxSafeInteger2 = Math.pow(2, 53) - 1;
    function toLength2(value2) {
      var len = toInteger2(value2);
      return Math.min(Math.max(len, 0), maxSafeInteger2);
    }
    function arrayFrom2(arrayLike, mapFn) {
      var C2 = Array, items = Object(arrayLike);
      if (arrayLike == null)
        throw new TypeError("Array.from requires an array-like object - not null or undefined");
      if (typeof mapFn < "u" && !isCallable2(mapFn))
        throw new TypeError("Array.from: when provided, the second argument must be a function");
      for (var len = toLength2(items.length), A = isCallable2(C2) ? Object(new C2(len)) : new Array(len), k = 0, kValue; k < len; )
        kValue = items[k], mapFn ? A[k] = mapFn(kValue, k) : A[k] = kValue, k += 1;
      return A.length = len, A;
    }
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      return _typeof3 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof3(obj);
    }
    function _classCallCheck2(instance, Constructor) {
      if (!(instance instanceof Constructor))
        throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties2(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey3(descriptor.key), descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      return protoProps && _defineProperties2(Constructor.prototype, protoProps), staticProps && _defineProperties2(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: false }), Constructor;
    }
    function _defineProperty3(obj, key2, value2) {
      return key2 = _toPropertyKey3(key2), key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    function _toPropertyKey3(arg) {
      var key2 = _toPrimitive3(arg, "string");
      return _typeof3(key2) === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive3(input2, hint) {
      if (_typeof3(input2) !== "object" || input2 === null)
        return input2;
      var prim = input2[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input2, hint || "default");
        if (_typeof3(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input2);
    }
    var SetLike2 = function() {
      function SetLike3() {
        var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        _classCallCheck2(this, SetLike3), _defineProperty3(this, "items", void 0), this.items = items;
      }
      return _createClass2(SetLike3, [{ key: "add", value: function(value2) {
        return this.has(value2) === false && this.items.push(value2), this;
      } }, { key: "clear", value: function() {
        this.items = [];
      } }, { key: "delete", value: function(value2) {
        var previousLength = this.items.length;
        return this.items = this.items.filter(function(item) {
          return item !== value2;
        }), previousLength !== this.items.length;
      } }, { key: "forEach", value: function(callbackfn) {
        var _this = this;
        this.items.forEach(function(item) {
          callbackfn(item, item, _this);
        });
      } }, { key: "has", value: function(value2) {
        return this.items.indexOf(value2) !== -1;
      } }, { key: "size", get: function() {
        return this.items.length;
      } }]), SetLike3;
    }();
    var SetLike_default2 = typeof Set > "u" ? Set : SetLike2;
    function getLocalName2(element) {
      var _element$localName;
      return (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : element.tagName.toLowerCase();
    }
    var localNameToRoleMappings2 = { article: "article", aside: "complementary", button: "button", datalist: "listbox", dd: "definition", details: "group", dialog: "dialog", dt: "term", fieldset: "group", figure: "figure", form: "form", footer: "contentinfo", h1: "heading", h2: "heading", h3: "heading", h4: "heading", h5: "heading", h6: "heading", header: "banner", hr: "separator", html: "document", legend: "legend", li: "listitem", math: "math", main: "main", menu: "list", nav: "navigation", ol: "list", optgroup: "group", option: "option", output: "status", progress: "progressbar", section: "region", summary: "button", table: "table", tbody: "rowgroup", textarea: "textbox", tfoot: "rowgroup", td: "cell", th: "columnheader", thead: "rowgroup", tr: "row", ul: "list" };
    var prohibitedAttributes2 = { caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]), insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]) };
    function hasGlobalAriaAttributes2(element, role) {
      return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-describedby", "aria-details", "aria-dropeffect", "aria-flowto", "aria-grabbed", "aria-hidden", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function(attributeName) {
        var _prohibitedAttributes;
        return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes2[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
      });
    }
    function ignorePresentationalRole2(element, implicitRole) {
      return hasGlobalAriaAttributes2(element, implicitRole);
    }
    function getRole2(element) {
      var explicitRole = getExplicitRole2(element);
      if (explicitRole === null || explicitRole === "presentation") {
        var implicitRole = getImplicitRole2(element);
        if (explicitRole !== "presentation" || ignorePresentationalRole2(element, implicitRole || ""))
          return implicitRole;
      }
      return explicitRole;
    }
    function getImplicitRole2(element) {
      var mappedByTag = localNameToRoleMappings2[getLocalName2(element)];
      if (mappedByTag !== void 0)
        return mappedByTag;
      switch (getLocalName2(element)) {
        case "a":
        case "area":
        case "link":
          if (element.hasAttribute("href"))
            return "link";
          break;
        case "img":
          return element.getAttribute("alt") === "" && !ignorePresentationalRole2(element, "img") ? "presentation" : "img";
        case "input": {
          var _ref = element, type3 = _ref.type;
          switch (type3) {
            case "button":
            case "image":
            case "reset":
            case "submit":
              return "button";
            case "checkbox":
            case "radio":
              return type3;
            case "range":
              return "slider";
            case "email":
            case "tel":
            case "text":
            case "url":
              return element.hasAttribute("list") ? "combobox" : "textbox";
            case "search":
              return element.hasAttribute("list") ? "combobox" : "searchbox";
            case "number":
              return "spinbutton";
            default:
              return null;
          }
        }
        case "select":
          return element.hasAttribute("multiple") || element.size > 1 ? "listbox" : "combobox";
      }
      return null;
    }
    function getExplicitRole2(element) {
      var role = element.getAttribute("role");
      if (role !== null) {
        var explicitRole = role.trim().split(" ")[0];
        if (explicitRole.length > 0)
          return explicitRole;
      }
      return null;
    }
    function isElement2(node) {
      return node !== null && node.nodeType === node.ELEMENT_NODE;
    }
    function isHTMLTableCaptionElement2(node) {
      return isElement2(node) && getLocalName2(node) === "caption";
    }
    function isHTMLInputElement2(node) {
      return isElement2(node) && getLocalName2(node) === "input";
    }
    function isHTMLOptGroupElement2(node) {
      return isElement2(node) && getLocalName2(node) === "optgroup";
    }
    function isHTMLSelectElement2(node) {
      return isElement2(node) && getLocalName2(node) === "select";
    }
    function isHTMLTableElement2(node) {
      return isElement2(node) && getLocalName2(node) === "table";
    }
    function isHTMLTextAreaElement2(node) {
      return isElement2(node) && getLocalName2(node) === "textarea";
    }
    function safeWindow2(node) {
      var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
      if (defaultView === null)
        throw new TypeError("no window available");
      return defaultView;
    }
    function isHTMLFieldSetElement2(node) {
      return isElement2(node) && getLocalName2(node) === "fieldset";
    }
    function isHTMLLegendElement2(node) {
      return isElement2(node) && getLocalName2(node) === "legend";
    }
    function isHTMLSlotElement2(node) {
      return isElement2(node) && getLocalName2(node) === "slot";
    }
    function isSVGElement2(node) {
      return isElement2(node) && node.ownerSVGElement !== void 0;
    }
    function isSVGSVGElement2(node) {
      return isElement2(node) && getLocalName2(node) === "svg";
    }
    function isSVGTitleElement2(node) {
      return isSVGElement2(node) && getLocalName2(node) === "title";
    }
    function queryIdRefs2(node, attributeName) {
      if (isElement2(node) && node.hasAttribute(attributeName)) {
        var ids = node.getAttribute(attributeName).split(" "), root3 = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        return ids.map(function(id) {
          return root3.getElementById(id);
        }).filter(function(element) {
          return element !== null;
        });
      }
      return [];
    }
    function hasAnyConcreteRoles2(node, roles3) {
      return isElement2(node) ? roles3.indexOf(getRole2(node)) !== -1 : false;
    }
    function asFlatString2(s) {
      return s.trim().replace(/\s\s+/g, " ");
    }
    function isHidden2(node, getComputedStyleImplementation) {
      if (!isElement2(node))
        return false;
      if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true")
        return true;
      var style = getComputedStyleImplementation(node);
      return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
    }
    function isControl2(node) {
      return hasAnyConcreteRoles2(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole2(node, "range");
    }
    function hasAbstractRole2(node, role) {
      if (!isElement2(node))
        return false;
      switch (role) {
        case "range":
          return hasAnyConcreteRoles2(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
        default:
          throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
      }
    }
    function querySelectorAllSubtree2(element, selectors) {
      var elements = arrayFrom2(element.querySelectorAll(selectors));
      return queryIdRefs2(element, "aria-owns").forEach(function(root3) {
        elements.push.apply(elements, arrayFrom2(root3.querySelectorAll(selectors)));
      }), elements;
    }
    function querySelectedOptions2(listbox) {
      return isHTMLSelectElement2(listbox) ? listbox.selectedOptions || querySelectorAllSubtree2(listbox, "[selected]") : querySelectorAllSubtree2(listbox, '[aria-selected="true"]');
    }
    function isMarkedPresentational2(node) {
      return hasAnyConcreteRoles2(node, ["none", "presentation"]);
    }
    function isNativeHostLanguageTextAlternativeElement2(node) {
      return isHTMLTableCaptionElement2(node);
    }
    function allowsNameFromContent2(node) {
      return hasAnyConcreteRoles2(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
    }
    function isDescendantOfNativeHostLanguageTextAlternativeElement2(node) {
      return false;
    }
    function getValueOfTextbox2(element) {
      return isHTMLInputElement2(element) || isHTMLTextAreaElement2(element) ? element.value : element.textContent || "";
    }
    function getTextualContent2(declaration) {
      var content = declaration.getPropertyValue("content");
      return /^["'].*["']$/.test(content) ? content.slice(1, -1) : "";
    }
    function isLabelableElement2(element) {
      var localName = getLocalName2(element);
      return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
    }
    function findLabelableElement2(element) {
      if (isLabelableElement2(element))
        return element;
      var labelableElement = null;
      return element.childNodes.forEach(function(childNode) {
        if (labelableElement === null && isElement2(childNode)) {
          var descendantLabelableElement = findLabelableElement2(childNode);
          descendantLabelableElement !== null && (labelableElement = descendantLabelableElement);
        }
      }), labelableElement;
    }
    function getControlOfLabel2(label) {
      if (label.control !== void 0)
        return label.control;
      var htmlFor = label.getAttribute("for");
      return htmlFor !== null ? label.ownerDocument.getElementById(htmlFor) : findLabelableElement2(label);
    }
    function getLabels2(element) {
      var labelsProperty = element.labels;
      if (labelsProperty === null)
        return labelsProperty;
      if (labelsProperty !== void 0)
        return arrayFrom2(labelsProperty);
      if (!isLabelableElement2(element))
        return null;
      var document2 = element.ownerDocument;
      return arrayFrom2(document2.querySelectorAll("label")).filter(function(label) {
        return getControlOfLabel2(label) === element;
      });
    }
    function getSlotContents2(slot) {
      var assignedNodes = slot.assignedNodes();
      return assignedNodes.length === 0 ? arrayFrom2(slot.childNodes) : assignedNodes;
    }
    function computeTextAlternative2(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, consultedNodes = new SetLike_default2(), window2 = safeWindow2(root3), _options$compute = options2.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options2.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options2.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options2.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options2.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
      function computeMiscTextAlternative(node, context) {
        var accumulatedText = "";
        if (isElement2(node) && computedStyleSupportsPseudoElements) {
          var pseudoBefore = getComputedStyle(node, "::before"), beforeContent = getTextualContent2(pseudoBefore);
          accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
        }
        var childNodes = isHTMLSlotElement2(node) ? getSlotContents2(node) : arrayFrom2(node.childNodes).concat(queryIdRefs2(node, "aria-owns"));
        if (childNodes.forEach(function(child) {
          var result2 = computeTextAlternative3(child, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true }), display2 = isElement2(child) ? getComputedStyle(child).getPropertyValue("display") : "inline", separator = display2 !== "inline" ? " " : "";
          accumulatedText += "".concat(separator).concat(result2).concat(separator);
        }), isElement2(node) && computedStyleSupportsPseudoElements) {
          var pseudoAfter = getComputedStyle(node, "::after"), afterContent = getTextualContent2(pseudoAfter);
          accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
        }
        return accumulatedText.trim();
      }
      function useAttribute(element, attributeName) {
        var attribute = element.getAttributeNode(attributeName);
        return attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "" ? (consultedNodes.add(attribute), attribute.value) : null;
      }
      function computeTooltipAttributeValue(node) {
        return isElement2(node) ? useAttribute(node, "title") : null;
      }
      function computeElementTextAlternative(node) {
        if (!isElement2(node))
          return null;
        if (isHTMLFieldSetElement2(node)) {
          consultedNodes.add(node);
          for (var children2 = arrayFrom2(node.childNodes), i = 0; i < children2.length; i += 1) {
            var child = children2[i];
            if (isHTMLLegendElement2(child))
              return computeTextAlternative3(child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
          }
        } else if (isHTMLTableElement2(node)) {
          consultedNodes.add(node);
          for (var _children = arrayFrom2(node.childNodes), _i = 0; _i < _children.length; _i += 1) {
            var _child = _children[_i];
            if (isHTMLTableCaptionElement2(_child))
              return computeTextAlternative3(_child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
          }
        } else if (isSVGSVGElement2(node)) {
          consultedNodes.add(node);
          for (var _children2 = arrayFrom2(node.childNodes), _i2 = 0; _i2 < _children2.length; _i2 += 1) {
            var _child2 = _children2[_i2];
            if (isSVGTitleElement2(_child2))
              return _child2.textContent;
          }
          return null;
        } else if (getLocalName2(node) === "img" || getLocalName2(node) === "area") {
          var nameFromAlt = useAttribute(node, "alt");
          if (nameFromAlt !== null)
            return nameFromAlt;
        } else if (isHTMLOptGroupElement2(node)) {
          var nameFromLabel = useAttribute(node, "label");
          if (nameFromLabel !== null)
            return nameFromLabel;
        }
        if (isHTMLInputElement2(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
          var nameFromValue = useAttribute(node, "value");
          if (nameFromValue !== null)
            return nameFromValue;
          if (node.type === "submit")
            return "Submit";
          if (node.type === "reset")
            return "Reset";
        }
        var labels = getLabels2(node);
        if (labels !== null && labels.length !== 0)
          return consultedNodes.add(node), arrayFrom2(labels).map(function(element) {
            return computeTextAlternative3(element, { isEmbeddedInLabel: true, isReferenced: false, recursion: true });
          }).filter(function(label) {
            return label.length > 0;
          }).join(" ");
        if (isHTMLInputElement2(node) && node.type === "image") {
          var _nameFromAlt = useAttribute(node, "alt");
          if (_nameFromAlt !== null)
            return _nameFromAlt;
          var nameFromTitle = useAttribute(node, "title");
          return nameFromTitle !== null ? nameFromTitle : "Submit Query";
        }
        if (hasAnyConcreteRoles2(node, ["button"])) {
          var nameFromSubTree = computeMiscTextAlternative(node, { isEmbeddedInLabel: false, isReferenced: false });
          if (nameFromSubTree !== "")
            return nameFromSubTree;
        }
        return null;
      }
      function computeTextAlternative3(current, context) {
        if (consultedNodes.has(current))
          return "";
        if (!hidden && isHidden2(current, getComputedStyle) && !context.isReferenced)
          return consultedNodes.add(current), "";
        var labelAttributeNode = isElement2(current) ? current.getAttributeNode("aria-labelledby") : null, labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs2(current, "aria-labelledby") : [];
        if (compute === "name" && !context.isReferenced && labelElements.length > 0)
          return consultedNodes.add(labelAttributeNode), labelElements.map(function(element) {
            return computeTextAlternative3(element, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: true, recursion: false });
          }).join(" ");
        var skipToStep2E = context.recursion && isControl2(current) && compute === "name";
        if (!skipToStep2E) {
          var ariaLabel = (isElement2(current) && current.getAttribute("aria-label") || "").trim();
          if (ariaLabel !== "" && compute === "name")
            return consultedNodes.add(current), ariaLabel;
          if (!isMarkedPresentational2(current)) {
            var elementTextAlternative = computeElementTextAlternative(current);
            if (elementTextAlternative !== null)
              return consultedNodes.add(current), elementTextAlternative;
          }
        }
        if (hasAnyConcreteRoles2(current, ["menu"]))
          return consultedNodes.add(current), "";
        if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
          if (hasAnyConcreteRoles2(current, ["combobox", "listbox"])) {
            consultedNodes.add(current);
            var selectedOptions = querySelectedOptions2(current);
            return selectedOptions.length === 0 ? isHTMLInputElement2(current) ? current.value : "" : arrayFrom2(selectedOptions).map(function(selectedOption) {
              return computeTextAlternative3(selectedOption, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true });
            }).join(" ");
          }
          if (hasAbstractRole2(current, "range"))
            return consultedNodes.add(current), current.hasAttribute("aria-valuetext") ? current.getAttribute("aria-valuetext") : current.hasAttribute("aria-valuenow") ? current.getAttribute("aria-valuenow") : current.getAttribute("value") || "";
          if (hasAnyConcreteRoles2(current, ["textbox"]))
            return consultedNodes.add(current), getValueOfTextbox2(current);
        }
        if (allowsNameFromContent2(current) || isElement2(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement2(current) || isDescendantOfNativeHostLanguageTextAlternativeElement2(current)) {
          var accumulatedText2F = computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
          if (accumulatedText2F !== "")
            return consultedNodes.add(current), accumulatedText2F;
        }
        if (current.nodeType === current.TEXT_NODE)
          return consultedNodes.add(current), current.textContent || "";
        if (context.recursion)
          return consultedNodes.add(current), computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
        var tooltipAttributeValue = computeTooltipAttributeValue(current);
        return tooltipAttributeValue !== null ? (consultedNodes.add(current), tooltipAttributeValue) : (consultedNodes.add(current), "");
      }
      return asFlatString2(computeTextAlternative3(root3, { isEmbeddedInLabel: false, isReferenced: compute === "description", recursion: false }));
    }
    function _typeof4(obj) {
      "@babel/helpers - typeof";
      return _typeof4 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof4(obj);
    }
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source2), true).forEach(function(key2) {
          _defineProperty4(target, key2, source2[key2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys2(Object(source2)).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
        });
      }
      return target;
    }
    function _defineProperty4(obj, key2, value2) {
      return key2 = _toPropertyKey4(key2), key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    function _toPropertyKey4(arg) {
      var key2 = _toPrimitive4(arg, "string");
      return _typeof4(key2) === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive4(input2, hint) {
      if (_typeof4(input2) !== "object" || input2 === null)
        return input2;
      var prim = input2[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input2, hint || "default");
        if (_typeof4(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input2);
    }
    function computeAccessibleDescription2(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, description = queryIdRefs2(root3, "aria-describedby").map(function(element) {
        return computeTextAlternative2(element, _objectSpread2(_objectSpread2({}, options2), {}, { compute: "description" }));
      }).join(" ");
      if (description === "") {
        var title = root3.getAttribute("title");
        description = title === null ? "" : title;
      }
      return description;
    }
    function prohibitsNaming2(node) {
      return hasAnyConcreteRoles2(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
    }
    function computeAccessibleName2(root3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return prohibitsNaming2(root3) ? "" : computeTextAlternative2(root3, options2);
    }
    var import_aria_query3 = __toESM3(require_lib2());
    var import_lz_string = __toESM3(require_lz_string());
    function escapeHTML(str) {
      return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    var printProps = (keys2, props, config3, indentation, depth, refs2, printer) => {
      let indentationNext = indentation + config3.indent, colors = config3.colors;
      return keys2.map((key2) => {
        let value2 = props[key2], printed = printer(value2, config3, indentationNext, depth, refs2);
        return typeof value2 != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = "{" + printed + "}"), config3.spacingInner + indentation + colors.prop.open + key2 + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
      }).join("");
    };
    var NodeTypeTextNode = 3;
    var printChildren = (children2, config3, indentation, depth, refs2, printer) => children2.map((child) => {
      let printedChild = typeof child == "string" ? printText(child, config3) : printer(child, config3, indentation, depth, refs2);
      return printedChild === "" && typeof child == "object" && child !== null && child.nodeType !== NodeTypeTextNode ? "" : config3.spacingOuter + indentation + printedChild;
    }).join("");
    var printText = (text, config3) => {
      let contentColor = config3.colors.content;
      return contentColor.open + escapeHTML(text) + contentColor.close;
    };
    var printComment = (comment, config3) => {
      let commentColor = config3.colors.comment;
      return commentColor.open + "<!--" + escapeHTML(comment) + "-->" + commentColor.close;
    };
    var printElement = (type3, printedProps, printedChildren, config3, indentation) => {
      let tagColor = config3.colors.tag;
      return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config3.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config3.min ? "" : " ") + "/") + ">" + tagColor.close;
    };
    var printElementAsLeaf = (type3, config3) => {
      let tagColor = config3.colors.tag;
      return tagColor.open + "<" + type3 + tagColor.close + " \u2026" + tagColor.open + " />" + tagColor.close;
    };
    var ELEMENT_NODE$1 = 1;
    var TEXT_NODE$1 = 3;
    var COMMENT_NODE$1 = 8;
    var FRAGMENT_NODE = 11;
    var ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
    var testNode = (val) => {
      let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || typeof val.hasAttribute == "function" && val.hasAttribute("is");
      return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
    };
    function nodeIsText(node) {
      return node.nodeType === TEXT_NODE$1;
    }
    function nodeIsComment(node) {
      return node.nodeType === COMMENT_NODE$1;
    }
    function nodeIsFragment(node) {
      return node.nodeType === FRAGMENT_NODE;
    }
    function createDOMElementFilter(filterNode) {
      return { test: (val) => {
        var _val$constructor2;
        return (val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode(val);
      }, serialize: (node, config3, indentation, depth, refs2, printer) => {
        if (nodeIsText(node))
          return printText(node.data, config3);
        if (nodeIsComment(node))
          return printComment(node.data, config3);
        let type3 = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
        return ++depth > config3.maxDepth ? printElementAsLeaf(type3, config3) : printElement(type3, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs2, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config3, indentation + config3.indent, depth, refs2, printer), config3, indentation);
      } };
    }
    var chalk2 = null;
    var readFileSync = null;
    var codeFrameColumns = null;
    try {
      let nodeRequire = module2 && module2.require;
      readFileSync = nodeRequire.call(module2, "fs").readFileSync, codeFrameColumns = nodeRequire.call(module2, "@babel/code-frame").codeFrameColumns, chalk2 = nodeRequire.call(module2, "chalk");
    } catch {
    }
    function getCodeFrame(frame) {
      let locationStart = frame.indexOf("(") + 1, locationEnd = frame.indexOf(")"), frameLocation = frame.slice(locationStart, locationEnd), frameLocationElements = frameLocation.split(":"), [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)], rawFileContents = "";
      try {
        rawFileContents = readFileSync(filename, "utf-8");
      } catch {
        return "";
      }
      let codeFrame = codeFrameColumns(rawFileContents, { start: { line, column } }, { highlightCode: true, linesBelow: 0 });
      return chalk2.dim(frameLocation) + `
` + codeFrame + `
`;
    }
    function getUserCodeFrame() {
      if (!readFileSync || !codeFrameColumns)
        return "";
      let firstClientCodeFrame = new Error().stack.split(`
`).slice(1).find((frame) => !frame.includes("node_modules/"));
      return getCodeFrame(firstClientCodeFrame);
    }
    var TEXT_NODE = 3;
    function jestFakeTimersAreEnabled() {
      return typeof jest < "u" && jest !== null ? setTimeout._isMockFunction === true || Object.prototype.hasOwnProperty.call(setTimeout, "clock") : false;
    }
    function getDocument() {
      if (typeof window > "u")
        throw new Error("Could not find default container");
      return window.document;
    }
    function getWindowFromNode(node) {
      if (node.defaultView)
        return node.defaultView;
      if (node.ownerDocument && node.ownerDocument.defaultView)
        return node.ownerDocument.defaultView;
      if (node.window)
        return node.window;
      throw node.ownerDocument && node.ownerDocument.defaultView === null ? new Error("It looks like the window object is not available for the provided node.") : node.then instanceof Function ? new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?") : Array.isArray(node) ? new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?") : typeof node.debug == "function" && typeof node.logTestingPlaygroundURL == "function" ? new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?") : new Error("The given node is not an Element, the node type is: " + typeof node + ".");
    }
    function checkContainerType(container) {
      if (!container || typeof container.querySelector != "function" || typeof container.querySelectorAll != "function")
        throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
      function getTypeName(object) {
        return typeof object == "object" ? object === null ? "null" : object.constructor.name : typeof object;
      }
    }
    var shouldHighlight = () => {
      let colors;
      try {
        var _process;
        colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
      } catch {
      }
      return typeof colors == "boolean" ? colors : typeof process < "u" && process.versions !== void 0 && process.versions.node !== void 0;
    };
    var { DOMCollection: DOMCollection3 } = prettyFormat.plugins;
    var ELEMENT_NODE = 1;
    var COMMENT_NODE = 8;
    function filterCommentsAndDefaultIgnoreTagsTags(value2) {
      return value2.nodeType !== COMMENT_NODE && (value2.nodeType !== ELEMENT_NODE || !value2.matches(getConfig().defaultIgnore));
    }
    function prettyDOM(dom, maxLength, options2) {
      if (options2 === void 0 && (options2 = {}), dom || (dom = getDocument().body), typeof maxLength != "number" && (maxLength = typeof process < "u" && process.env.DEBUG_PRINT_LIMIT || 7e3), maxLength === 0)
        return "";
      dom.documentElement && (dom = dom.documentElement);
      let domTypeName = typeof dom;
      if (domTypeName === "object" ? domTypeName = dom.constructor.name : dom = {}, !("outerHTML" in dom))
        throw new TypeError("Expected an element or document but got " + domTypeName);
      let { filterNode = filterCommentsAndDefaultIgnoreTagsTags, ...prettyFormatOptions } = options2, debugContent = prettyFormat.format(dom, { plugins: [createDOMElementFilter(filterNode), DOMCollection3], printFunctionName: false, highlight: shouldHighlight(), ...prettyFormatOptions });
      return maxLength !== void 0 && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
    }
    var logDOM = function() {
      let userCodeFrame = getUserCodeFrame();
      console.log(userCodeFrame ? prettyDOM(...arguments) + `

` + userCodeFrame : prettyDOM(...arguments));
    };
    var config2 = { testIdAttribute: "data-testid", asyncUtilTimeout: 1e3, asyncWrapper: (cb) => cb(), unstable_advanceTimersWrapper: (cb) => cb(), eventWrapper: (cb) => cb(), defaultHidden: false, defaultIgnore: "script, style", showOriginalStackTrace: false, throwSuggestions: false, getElementError(message, container) {
      let prettifiedDOM = prettyDOM(container), error = new Error([message, "Ignored nodes: comments, " + config2.defaultIgnore + `
` + prettifiedDOM].filter(Boolean).join(`

`));
      return error.name = "TestingLibraryElementError", error;
    }, _disableExpensiveErrorDiagnostics: false, computedStyleSupportsPseudoElements: false };
    function runWithExpensiveErrorDiagnosticsDisabled(callback) {
      try {
        return config2._disableExpensiveErrorDiagnostics = true, callback();
      } finally {
        config2._disableExpensiveErrorDiagnostics = false;
      }
    }
    function configure(newConfig) {
      typeof newConfig == "function" && (newConfig = newConfig(config2)), config2 = { ...config2, ...newConfig };
    }
    function getConfig() {
      return config2;
    }
    var labelledNodeNames = ["button", "meter", "output", "progress", "select", "textarea", "input"];
    function getTextContent(node) {
      return labelledNodeNames.includes(node.nodeName.toLowerCase()) ? "" : node.nodeType === TEXT_NODE ? node.textContent : Array.from(node.childNodes).map((childNode) => getTextContent(childNode)).join("");
    }
    function getLabelContent(element) {
      let textContent;
      return element.tagName.toLowerCase() === "label" ? textContent = getTextContent(element) : textContent = element.value || element.textContent, textContent;
    }
    function getRealLabels(element) {
      if (element.labels !== void 0) {
        var _labels;
        return (_labels = element.labels) != null ? _labels : [];
      }
      if (!isLabelable(element))
        return [];
      let labels = element.ownerDocument.querySelectorAll("label");
      return Array.from(labels).filter((label) => label.control === element);
    }
    function isLabelable(element) {
      return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
    }
    function getLabels3(container, element, _temp) {
      let { selector = "*" } = _temp === void 0 ? {} : _temp, ariaLabelledBy = element.getAttribute("aria-labelledby"), labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
      return labelsId.length ? labelsId.map((labelId) => {
        let labellingElement = container.querySelector('[id="' + labelId + '"]');
        return labellingElement ? { content: getLabelContent(labellingElement), formControl: null } : { content: "", formControl: null };
      }) : Array.from(getRealLabels(element)).map((label) => {
        let textToMatch = getLabelContent(label), labelledFormControl = Array.from(label.querySelectorAll("button, input, meter, output, progress, select, textarea")).filter((formControlElement) => formControlElement.matches(selector))[0];
        return { content: textToMatch, formControl: labelledFormControl };
      });
    }
    function assertNotNullOrUndefined(matcher) {
      if (matcher == null)
        throw new Error("It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?");
    }
    function fuzzyMatches(textToMatch, node, matcher, normalizer) {
      if (typeof textToMatch != "string")
        return false;
      assertNotNullOrUndefined(matcher);
      let normalizedText = normalizer(textToMatch);
      return typeof matcher == "string" || typeof matcher == "number" ? normalizedText.toLowerCase().includes(matcher.toString().toLowerCase()) : typeof matcher == "function" ? matcher(normalizedText, node) : matchRegExp(matcher, normalizedText);
    }
    function matches2(textToMatch, node, matcher, normalizer) {
      if (typeof textToMatch != "string")
        return false;
      assertNotNullOrUndefined(matcher);
      let normalizedText = normalizer(textToMatch);
      return matcher instanceof Function ? matcher(normalizedText, node) : matcher instanceof RegExp ? matchRegExp(matcher, normalizedText) : normalizedText === String(matcher);
    }
    function getDefaultNormalizer(_temp) {
      let { trim = true, collapseWhitespace = true } = _temp === void 0 ? {} : _temp;
      return (text) => {
        let normalizedText = text;
        return normalizedText = trim ? normalizedText.trim() : normalizedText, normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText, normalizedText;
      };
    }
    function makeNormalizer(_ref) {
      let { trim, collapseWhitespace, normalizer } = _ref;
      if (!normalizer)
        return getDefaultNormalizer({ trim, collapseWhitespace });
      if (typeof trim < "u" || typeof collapseWhitespace < "u")
        throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
      return normalizer;
    }
    function matchRegExp(matcher, text) {
      let match = matcher.test(text);
      return matcher.global && matcher.lastIndex !== 0 && (console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp."), matcher.lastIndex = 0), match;
    }
    function getNodeText(node) {
      return node.matches("input[type=submit], input[type=button], input[type=reset]") ? node.value : Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE && !!child.textContent).map((c) => c.textContent).join("");
    }
    var elementRoleList2 = buildElementRoleList2(import_aria_query3.elementRoles);
    function isSubtreeInaccessible(element) {
      return element.hidden === true || element.getAttribute("aria-hidden") === "true" || element.ownerDocument.defaultView.getComputedStyle(element).display === "none";
    }
    function isInaccessible(element, options2) {
      options2 === void 0 && (options2 = {});
      let { isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible } = options2;
      if (element.ownerDocument.defaultView.getComputedStyle(element).visibility === "hidden")
        return true;
      let currentElement = element;
      for (; currentElement; ) {
        if (isSubtreeInaccessibleImpl(currentElement))
          return true;
        currentElement = currentElement.parentElement;
      }
      return false;
    }
    function getImplicitAriaRoles2(currentNode) {
      for (let { match, roles: roles3 } of elementRoleList2)
        if (match(currentNode))
          return [...roles3];
      return [];
    }
    function buildElementRoleList2(elementRolesMap) {
      function makeElementSelector(_ref) {
        let { name: name2, attributes } = _ref;
        return "" + name2 + attributes.map((_ref2) => {
          let { name: attributeName, value: value2, constraints = [] } = _ref2;
          return constraints.indexOf("undefined") !== -1 ? ":not([" + attributeName + "])" : value2 ? "[" + attributeName + '="' + value2 + '"]' : "[" + attributeName + "]";
        }).join("");
      }
      function getSelectorSpecificity(_ref3) {
        let { attributes = [] } = _ref3;
        return attributes.length;
      }
      function bySelectorSpecificity(_ref4, _ref5) {
        let { specificity: leftSpecificity } = _ref4, { specificity: rightSpecificity } = _ref5;
        return rightSpecificity - leftSpecificity;
      }
      function match(element) {
        let { attributes = [] } = element, typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
        typeTextIndex >= 0 && (attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)]);
        let selector = makeElementSelector({ ...element, attributes });
        return (node) => typeTextIndex >= 0 && node.type !== "text" ? false : node.matches(selector);
      }
      let result2 = [];
      for (let [element, roles3] of elementRolesMap.entries())
        result2 = [...result2, { match: match(element), roles: Array.from(roles3), specificity: getSelectorSpecificity(element) }];
      return result2.sort(bySelectorSpecificity);
    }
    function getRoles(container, _temp) {
      let { hidden = false } = _temp === void 0 ? {} : _temp;
      function flattenDOM(node) {
        return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
      }
      return flattenDOM(container).filter((element) => hidden === false ? isInaccessible(element) === false : true).reduce((acc, node) => {
        let roles3 = [];
        return node.hasAttribute("role") ? roles3 = node.getAttribute("role").split(" ").slice(0, 1) : roles3 = getImplicitAriaRoles2(node), roles3.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? { ...rolesAcc, [role]: [...rolesAcc[role], node] } : { ...rolesAcc, [role]: [node] }, acc);
      }, {});
    }
    function prettyRoles(dom, _ref6) {
      let { hidden, includeDescription } = _ref6, roles3 = getRoles(dom, { hidden });
      return Object.entries(roles3).filter((_ref7) => {
        let [role] = _ref7;
        return role !== "generic";
      }).map((_ref8) => {
        let [role, elements] = _ref8, delimiterBar = "-".repeat(50), elementsString = elements.map((el) => {
          let nameString = 'Name "' + computeAccessibleName2(el, { computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements }) + `":
`, domString = prettyDOM(el.cloneNode(false));
          if (includeDescription) {
            let descriptionString = 'Description "' + computeAccessibleDescription2(el, { computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements }) + `":
`;
            return "" + nameString + descriptionString + domString;
          }
          return "" + nameString + domString;
        }).join(`

`);
        return role + `:

` + elementsString + `

` + delimiterBar;
      }).join(`
`);
    }
    var logRoles = function(dom, _temp2) {
      let { hidden = false } = _temp2 === void 0 ? {} : _temp2;
      return console.log(prettyRoles(dom, { hidden }));
    };
    function computeAriaSelected(element) {
      return element.tagName === "OPTION" ? element.selected : checkBooleanAttribute(element, "aria-selected");
    }
    function computeAriaBusy(element) {
      return element.getAttribute("aria-busy") === "true";
    }
    function computeAriaChecked(element) {
      if (!("indeterminate" in element && element.indeterminate))
        return "checked" in element ? element.checked : checkBooleanAttribute(element, "aria-checked");
    }
    function computeAriaPressed(element) {
      return checkBooleanAttribute(element, "aria-pressed");
    }
    function computeAriaCurrent(element) {
      var _ref9, _checkBooleanAttribut;
      return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
    }
    function computeAriaExpanded(element) {
      return checkBooleanAttribute(element, "aria-expanded");
    }
    function checkBooleanAttribute(element, attribute) {
      let attributeValue = element.getAttribute(attribute);
      if (attributeValue === "true")
        return true;
      if (attributeValue === "false")
        return false;
    }
    function computeHeadingLevel(element) {
      let implicitHeadingLevels = { H1: 1, H2: 2, H3: 3, H4: 4, H5: 5, H6: 6 };
      return element.getAttribute("aria-level") && Number(element.getAttribute("aria-level")) || implicitHeadingLevels[element.tagName];
    }
    function computeAriaValueNow(element) {
      let valueNow = element.getAttribute("aria-valuenow");
      return valueNow === null ? void 0 : +valueNow;
    }
    function computeAriaValueMax(element) {
      let valueMax = element.getAttribute("aria-valuemax");
      return valueMax === null ? void 0 : +valueMax;
    }
    function computeAriaValueMin(element) {
      let valueMin = element.getAttribute("aria-valuemin");
      return valueMin === null ? void 0 : +valueMin;
    }
    function computeAriaValueText(element) {
      let valueText = element.getAttribute("aria-valuetext");
      return valueText === null ? void 0 : valueText;
    }
    var normalize2 = getDefaultNormalizer();
    function escapeRegExp(string2) {
      return string2.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
    }
    function getRegExpMatcher(string2) {
      return new RegExp(escapeRegExp(string2.toLowerCase()), "i");
    }
    function makeSuggestion(queryName, element, content, _ref) {
      let { variant, name: name2 } = _ref, warning = "", queryOptions = {}, queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher(content)];
      name2 && (queryOptions.name = getRegExpMatcher(name2)), queryName === "Role" && isInaccessible(element) && (queryOptions.hidden = true, warning = `Element is inaccessible. This means that the element and all its children are invisible to screen readers.
    If you are using the aria-hidden prop, make sure this is the right choice for your case.
    `), Object.keys(queryOptions).length > 0 && queryArgs.push(queryOptions);
      let queryMethod = variant + "By" + queryName;
      return { queryName, queryMethod, queryArgs, variant, warning, toString() {
        warning && console.warn(warning);
        let [text, options2] = queryArgs;
        return text = typeof text == "string" ? "'" + text + "'" : text, options2 = options2 ? ", { " + Object.entries(options2).map((_ref2) => {
          let [k, v2] = _ref2;
          return k + ": " + v2;
        }).join(", ") + " }" : "", queryMethod + "(" + text + options2 + ")";
      } };
    }
    function canSuggest(currentMethod, requestedMethod, data) {
      return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());
    }
    function getSuggestedQuery(element, variant, method) {
      var _element$getAttribute, _getImplicitAriaRoles;
      if (variant === void 0 && (variant = "get"), element.matches(getConfig().defaultIgnore))
        return;
      let role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles2(element)) == null ? void 0 : _getImplicitAriaRoles[0];
      if (role !== "generic" && canSuggest("Role", method, role))
        return makeSuggestion("Role", element, role, { variant, name: computeAccessibleName2(element, { computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements }) });
      let labelText = getLabels3(document, element).map((label) => label.content).join(" ");
      if (canSuggest("LabelText", method, labelText))
        return makeSuggestion("LabelText", element, labelText, { variant });
      let placeholderText = element.getAttribute("placeholder");
      if (canSuggest("PlaceholderText", method, placeholderText))
        return makeSuggestion("PlaceholderText", element, placeholderText, { variant });
      let textContent = normalize2(getNodeText(element));
      if (canSuggest("Text", method, textContent))
        return makeSuggestion("Text", element, textContent, { variant });
      if (canSuggest("DisplayValue", method, element.value))
        return makeSuggestion("DisplayValue", element, normalize2(element.value), { variant });
      let alt = element.getAttribute("alt");
      if (canSuggest("AltText", method, alt))
        return makeSuggestion("AltText", element, alt, { variant });
      let title = element.getAttribute("title");
      if (canSuggest("Title", method, title))
        return makeSuggestion("Title", element, title, { variant });
      let testId = element.getAttribute(getConfig().testIdAttribute);
      if (canSuggest("TestId", method, testId))
        return makeSuggestion("TestId", element, testId, { variant });
    }
    function copyStackTrace(target, source2) {
      target.stack = source2.stack.replace(source2.message, target.message);
    }
    function waitFor(callback, _ref) {
      let { container = getDocument(), timeout = getConfig().asyncUtilTimeout, showOriginalStackTrace = getConfig().showOriginalStackTrace, stackTraceError, interval = 50, onTimeout = (error) => (Object.defineProperty(error, "message", { value: getConfig().getElementError(error.message, container).message }), error), mutationObserverOptions = { subtree: true, childList: true, attributes: true, characterData: true } } = _ref;
      if (typeof callback != "function")
        throw new TypeError("Received `callback` arg must be a function");
      return new Promise(async (resolve, reject) => {
        let lastError, intervalId, observer, finished = false, promiseStatus = "idle", overallTimeoutTimer = setTimeout(handleTimeout, timeout), usingJestFakeTimers = jestFakeTimersAreEnabled();
        if (usingJestFakeTimers) {
          let { unstable_advanceTimersWrapper: advanceTimersWrapper } = getConfig();
          for (checkCallback(); !finished; ) {
            if (!jestFakeTimersAreEnabled()) {
              let error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
              showOriginalStackTrace || copyStackTrace(error, stackTraceError), reject(error);
              return;
            }
            if (await advanceTimersWrapper(async () => {
              jest.advanceTimersByTime(interval);
            }), finished)
              break;
            checkCallback();
          }
        } else {
          try {
            checkContainerType(container);
          } catch (e) {
            reject(e);
            return;
          }
          intervalId = setInterval(checkRealTimersCallback, interval);
          let { MutationObserver } = getWindowFromNode(container);
          observer = new MutationObserver(checkRealTimersCallback), observer.observe(container, mutationObserverOptions), checkCallback();
        }
        function onDone(error, result2) {
          finished = true, clearTimeout(overallTimeoutTimer), usingJestFakeTimers || (clearInterval(intervalId), observer.disconnect()), error ? reject(error) : resolve(result2);
        }
        function checkRealTimersCallback() {
          if (jestFakeTimersAreEnabled()) {
            let error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
            return showOriginalStackTrace || copyStackTrace(error, stackTraceError), reject(error);
          } else
            return checkCallback();
        }
        function checkCallback() {
          if (promiseStatus !== "pending")
            try {
              let result2 = runWithExpensiveErrorDiagnosticsDisabled(callback);
              typeof (result2 == null ? void 0 : result2.then) == "function" ? (promiseStatus = "pending", result2.then((resolvedValue) => {
                promiseStatus = "resolved", onDone(null, resolvedValue);
              }, (rejectedValue) => {
                promiseStatus = "rejected", lastError = rejectedValue;
              })) : onDone(null, result2);
            } catch (error) {
              lastError = error;
            }
        }
        function handleTimeout() {
          let error;
          lastError ? (error = lastError, !showOriginalStackTrace && error.name === "TestingLibraryElementError" && copyStackTrace(error, stackTraceError)) : (error = new Error("Timed out in waitFor."), showOriginalStackTrace || copyStackTrace(error, stackTraceError)), onDone(onTimeout(error), null);
        }
      });
    }
    function waitForWrapper(callback, options2) {
      let stackTraceError = new Error("STACK_TRACE_MESSAGE");
      return getConfig().asyncWrapper(() => waitFor(callback, { stackTraceError, ...options2 }));
    }
    function getElementError(message, container) {
      return getConfig().getElementError(message, container);
    }
    function getMultipleElementsFoundError(message, container) {
      return getElementError(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
    }
    function queryAllByAttribute(attribute, container, text, _temp) {
      let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp, matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer });
      return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
    }
    function queryByAttribute(attribute, container, text, options2) {
      let els = queryAllByAttribute(attribute, container, text, options2);
      if (els.length > 1)
        throw getMultipleElementsFoundError("Found multiple elements by [" + attribute + "=" + text + "]", container);
      return els[0] || null;
    }
    function makeSingleQuery(allQuery, getMultipleError2) {
      return function(container) {
        for (var _len = arguments.length, args2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          args2[_key - 1] = arguments[_key];
        let els = allQuery(container, ...args2);
        if (els.length > 1) {
          let elementStrings = els.map((element) => getElementError(null, element).message).join(`

`);
          throw getMultipleElementsFoundError(getMultipleError2(container, ...args2) + `

Here are the matching elements:

` + elementStrings, container);
        }
        return els[0] || null;
      };
    }
    function getSuggestionError(suggestion, container) {
      return getConfig().getElementError(`A better query is available, try this:
` + suggestion.toString() + `
`, container);
    }
    function makeGetAllQuery(allQuery, getMissingError2) {
      return function(container) {
        for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
          args2[_key2 - 1] = arguments[_key2];
        let els = allQuery(container, ...args2);
        if (!els.length)
          throw getConfig().getElementError(getMissingError2(container, ...args2), container);
        return els;
      };
    }
    function makeFindQuery(getter) {
      return (container, text, options2, waitForOptions) => waitForWrapper(() => getter(container, text, options2), { container, ...waitForOptions });
    }
    var wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
      for (var _len3 = arguments.length, args2 = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)
        args2[_key3 - 1] = arguments[_key3];
      let element = query(container, ...args2), [{ suggest = getConfig().throwSuggestions } = {}] = args2.slice(-1);
      if (element && suggest) {
        let suggestion = getSuggestedQuery(element, variant);
        if (suggestion && !queryAllByName.endsWith(suggestion.queryName))
          throw getSuggestionError(suggestion.toString(), container);
      }
      return element;
    };
    var wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
      for (var _len4 = arguments.length, args2 = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)
        args2[_key4 - 1] = arguments[_key4];
      let els = query(container, ...args2), [{ suggest = getConfig().throwSuggestions } = {}] = args2.slice(-1);
      if (els.length && suggest) {
        let uniqueSuggestionMessages = [...new Set(els.map((element) => {
          var _getSuggestedQuery;
          return (_getSuggestedQuery = getSuggestedQuery(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
        }))];
        if (uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(getSuggestedQuery(els[0], variant).queryName))
          throw getSuggestionError(uniqueSuggestionMessages[0], container);
      }
      return els;
    };
    function buildQueries(queryAllBy, getMultipleError2, getMissingError2) {
      let queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError2), queryAllBy.name, "query"), getAllBy = makeGetAllQuery(queryAllBy, getMissingError2), getBy = makeSingleQuery(getAllBy, getMultipleError2), getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "get"), getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace("query", "get"), "getAll"), findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, "findAll")), findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "find"));
      return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
    }
    var queryHelpers = Object.freeze({ __proto__: null, getElementError, wrapAllByQueryWithSuggestion, wrapSingleQueryWithSuggestion, getMultipleElementsFoundError, queryAllByAttribute, queryByAttribute, makeSingleQuery, makeGetAllQuery, makeFindQuery, buildQueries });
    function queryAllLabels(container) {
      return Array.from(container.querySelectorAll("label,input")).map((node) => ({ node, textToMatch: getLabelContent(node) })).filter((_ref) => {
        let { textToMatch } = _ref;
        return textToMatch !== null;
      });
    }
    var queryAllLabelsByText = function(container, text, _temp) {
      let { exact = true, trim, collapseWhitespace, normalizer } = _temp === void 0 ? {} : _temp, matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer });
      return queryAllLabels(container).filter((_ref2) => {
        let { node, textToMatch } = _ref2;
        return matcher(textToMatch, node, text, matchNormalizer);
      }).map((_ref3) => {
        let { node } = _ref3;
        return node;
      });
    };
    var queryAllByLabelText = function(container, text, _temp2) {
      let { selector = "*", exact = true, collapseWhitespace, trim, normalizer } = _temp2 === void 0 ? {} : _temp2;
      checkContainerType(container);
      let matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer }), matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => getRealLabels(element).length || element.hasAttribute("aria-labelledby")).reduce((labelledElements, labelledElement) => {
        let labelList = getLabels3(container, labelledElement, { selector });
        labelList.filter((label) => !!label.formControl).forEach((label) => {
          matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl && labelledElements.push(label.formControl);
        });
        let labelsValue = labelList.filter((label) => !!label.content).map((label) => label.content);
        return matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement), labelsValue.length > 1 && labelsValue.forEach((labelValue, index) => {
          matcher(labelValue, labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement);
          let labelsFiltered = [...labelsValue];
          labelsFiltered.splice(index, 1), labelsFiltered.length > 1 && matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement);
        }), labelledElements;
      }, []).concat(queryAllByAttribute("aria-label", container, text, { exact, normalizer: matchNormalizer }));
      return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
    };
    var getAllByLabelText = function(container, text) {
      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
        rest[_key - 2] = arguments[_key];
      let els = queryAllByLabelText(container, text, ...rest);
      if (!els.length) {
        let labels = queryAllLabelsByText(container, text, ...rest);
        if (labels.length) {
          let tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter((tagName) => !!tagName);
          throw tagNames.length ? getConfig().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join(`

`), container) : getConfig().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
        } else
          throw getConfig().getElementError("Unable to find a label with the text of: " + text, container);
      }
      return els;
    };
    function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
      let htmlFor = label.getAttribute("for");
      if (!htmlFor)
        return null;
      let element = container.querySelector('[id="' + htmlFor + '"]');
      return element ? element.tagName.toLowerCase() : null;
    }
    var getMultipleError$7 = (c, text) => "Found multiple elements with the text of: " + text;
    var queryByLabelText = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText, getMultipleError$7), queryAllByLabelText.name, "query");
    var getByLabelText = makeSingleQuery(getAllByLabelText, getMultipleError$7);
    var findAllByLabelText = makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "findAll"));
    var findByLabelText = makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "find"));
    var getAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "getAll");
    var getByLabelTextWithSuggestions = wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "get");
    var queryAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByLabelText, queryAllByLabelText.name, "queryAll");
    var queryAllByPlaceholderText = function() {
      for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++)
        args2[_key] = arguments[_key];
      return checkContainerType(args2[0]), queryAllByAttribute("placeholder", ...args2);
    };
    var getMultipleError$6 = (c, text) => "Found multiple elements with the placeholder text of: " + text;
    var getMissingError$6 = (c, text) => "Unable to find an element with the placeholder text of: " + text;
    var queryAllByPlaceholderTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByPlaceholderText, queryAllByPlaceholderText.name, "queryAll");
    var [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = buildQueries(queryAllByPlaceholderText, getMultipleError$6, getMissingError$6);
    var queryAllByText = function(container, text, _temp) {
      let { selector = "*", exact = true, collapseWhitespace, trim, ignore = getConfig().defaultIgnore, normalizer } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      let matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer }), baseArray = [];
      return typeof container.matches == "function" && container.matches(selector) && (baseArray = [container]), [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText(node), node, text, matchNormalizer));
    };
    var getMultipleError$5 = (c, text) => "Found multiple elements with the text: " + text;
    var getMissingError$5 = function(c, text, options2) {
      options2 === void 0 && (options2 = {});
      let { collapseWhitespace, trim, normalizer, selector } = options2, normalizedText = makeNormalizer({ collapseWhitespace, trim, normalizer })(text.toString()), isNormalizedDifferent = normalizedText !== text.toString(), isCustomSelector = (selector ?? "*") !== "*";
      return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
    };
    var queryAllByTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByText, queryAllByText.name, "queryAll");
    var [queryByText, getAllByText, getByText, findAllByText, findByText] = buildQueries(queryAllByText, getMultipleError$5, getMissingError$5);
    var queryAllByDisplayValue = function(container, value2, _temp) {
      let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      let matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer });
      return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => node.tagName === "SELECT" ? Array.from(node.options).filter((option) => option.selected).some((optionNode) => matcher(getNodeText(optionNode), optionNode, value2, matchNormalizer)) : matcher(node.value, node, value2, matchNormalizer));
    };
    var getMultipleError$4 = (c, value2) => "Found multiple elements with the display value: " + value2 + ".";
    var getMissingError$4 = (c, value2) => "Unable to find an element with the display value: " + value2 + ".";
    var queryAllByDisplayValueWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByDisplayValue, queryAllByDisplayValue.name, "queryAll");
    var [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = buildQueries(queryAllByDisplayValue, getMultipleError$4, getMissingError$4);
    var VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
    var queryAllByAltText = function(container, alt, options2) {
      return options2 === void 0 && (options2 = {}), checkContainerType(container), queryAllByAttribute("alt", container, alt, options2).filter((node) => VALID_TAG_REGEXP.test(node.tagName));
    };
    var getMultipleError$3 = (c, alt) => "Found multiple elements with the alt text: " + alt;
    var getMissingError$3 = (c, alt) => "Unable to find an element with the alt text: " + alt;
    var queryAllByAltTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByAltText, queryAllByAltText.name, "queryAll");
    var [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = buildQueries(queryAllByAltText, getMultipleError$3, getMissingError$3);
    var isSvgTitle = (node) => {
      var _node$parentElement;
      return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
    };
    var queryAllByTitle = function(container, text, _temp) {
      let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      let matcher = exact ? matches2 : fuzzyMatches, matchNormalizer = makeNormalizer({ collapseWhitespace, trim, normalizer });
      return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle(node) && matcher(getNodeText(node), node, text, matchNormalizer));
    };
    var getMultipleError$2 = (c, title) => "Found multiple elements with the title: " + title + ".";
    var getMissingError$2 = (c, title) => "Unable to find an element with the title: " + title + ".";
    var queryAllByTitleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTitle, queryAllByTitle.name, "queryAll");
    var [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = buildQueries(queryAllByTitle, getMultipleError$2, getMissingError$2);
    var queryAllByRole = function(container, role, _temp) {
      let { hidden = getConfig().defaultHidden, name: name2, description, queryFallbacks = false, selected, busy, checked, pressed, current, level, expanded, value: { now: valueNow, min: valueMin, max: valueMax, text: valueText } = {} } = _temp === void 0 ? {} : _temp;
      if (checkContainerType(container), selected !== void 0) {
        var _allRoles$get;
        if (((_allRoles$get = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0)
          throw new Error('"aria-selected" is not supported on role "' + role + '".');
      }
      if (busy !== void 0) {
        var _allRoles$get2;
        if (((_allRoles$get2 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0)
          throw new Error('"aria-busy" is not supported on role "' + role + '".');
      }
      if (checked !== void 0) {
        var _allRoles$get3;
        if (((_allRoles$get3 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0)
          throw new Error('"aria-checked" is not supported on role "' + role + '".');
      }
      if (pressed !== void 0) {
        var _allRoles$get4;
        if (((_allRoles$get4 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0)
          throw new Error('"aria-pressed" is not supported on role "' + role + '".');
      }
      if (current !== void 0) {
        var _allRoles$get5;
        if (((_allRoles$get5 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0)
          throw new Error('"aria-current" is not supported on role "' + role + '".');
      }
      if (level !== void 0 && role !== "heading")
        throw new Error('Role "' + role + '" cannot have "level" property.');
      if (valueNow !== void 0) {
        var _allRoles$get6;
        if (((_allRoles$get6 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0)
          throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
      }
      if (valueMax !== void 0) {
        var _allRoles$get7;
        if (((_allRoles$get7 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0)
          throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
      }
      if (valueMin !== void 0) {
        var _allRoles$get8;
        if (((_allRoles$get8 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0)
          throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
      }
      if (valueText !== void 0) {
        var _allRoles$get9;
        if (((_allRoles$get9 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0)
          throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
      }
      if (expanded !== void 0) {
        var _allRoles$get10;
        if (((_allRoles$get10 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get10.props["aria-expanded"]) === void 0)
          throw new Error('"aria-expanded" is not supported on role "' + role + '".');
      }
      let subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
      function cachedIsSubtreeInaccessible(element) {
        return subtreeIsInaccessibleCache.has(element) || subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible(element)), subtreeIsInaccessibleCache.get(element);
      }
      return Array.from(container.querySelectorAll(makeRoleSelector(role))).filter((node) => {
        if (node.hasAttribute("role")) {
          let roleValue = node.getAttribute("role");
          if (queryFallbacks)
            return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
          let [firstRoleAttributeToken] = roleValue.split(" ");
          return firstRoleAttributeToken === role;
        }
        return getImplicitAriaRoles2(node).some((implicitRole) => implicitRole === role);
      }).filter((element) => {
        if (selected !== void 0)
          return selected === computeAriaSelected(element);
        if (busy !== void 0)
          return busy === computeAriaBusy(element);
        if (checked !== void 0)
          return checked === computeAriaChecked(element);
        if (pressed !== void 0)
          return pressed === computeAriaPressed(element);
        if (current !== void 0)
          return current === computeAriaCurrent(element);
        if (expanded !== void 0)
          return expanded === computeAriaExpanded(element);
        if (level !== void 0)
          return level === computeHeadingLevel(element);
        if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
          let valueMatches = true;
          if (valueNow !== void 0 && valueMatches && (valueMatches = valueNow === computeAriaValueNow(element)), valueMax !== void 0 && valueMatches && (valueMatches = valueMax === computeAriaValueMax(element)), valueMin !== void 0 && valueMatches && (valueMatches = valueMin === computeAriaValueMin(element)), valueText !== void 0) {
            var _computeAriaValueText;
            valueMatches && (valueMatches = matches2((_computeAriaValueText = computeAriaValueText(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
          }
          return valueMatches;
        }
        return true;
      }).filter((element) => name2 === void 0 ? true : matches2(computeAccessibleName2(element, { computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements }), element, name2, (text) => text)).filter((element) => description === void 0 ? true : matches2(computeAccessibleDescription2(element, { computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements }), element, description, (text) => text)).filter((element) => hidden === false ? isInaccessible(element, { isSubtreeInaccessible: cachedIsSubtreeInaccessible }) === false : true);
    };
    function makeRoleSelector(role) {
      var _roleElements$get;
      let explicitRoleSelector = '*[role~="' + role + '"]', roleRelations = (_roleElements$get = import_aria_query3.roleElements.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set(), implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
        let { name: name2 } = _ref;
        return name2;
      }));
      return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
    }
    var getNameHint = (name2) => {
      let nameHint = "";
      return name2 === void 0 ? nameHint = "" : typeof name2 == "string" ? nameHint = ' and name "' + name2 + '"' : nameHint = " and name `" + name2 + "`", nameHint;
    };
    var getMultipleError$1 = function(c, role, _temp2) {
      let { name: name2 } = _temp2 === void 0 ? {} : _temp2;
      return 'Found multiple elements with the role "' + role + '"' + getNameHint(name2);
    };
    var getMissingError$1 = function(container, role, _temp3) {
      let { hidden = getConfig().defaultHidden, name: name2, description } = _temp3 === void 0 ? {} : _temp3;
      if (getConfig()._disableExpensiveErrorDiagnostics)
        return 'Unable to find role="' + role + '"' + getNameHint(name2);
      let roles3 = "";
      Array.from(container.children).forEach((childElement) => {
        roles3 += prettyRoles(childElement, { hidden, includeDescription: description !== void 0 });
      });
      let roleMessage;
      roles3.length === 0 ? hidden === false ? roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole" : roleMessage = "There are no available roles." : roleMessage = (`
Here are the ` + (hidden === false ? "accessible" : "available") + ` roles:

  ` + roles3.replace(/\n/g, `
  `).replace(/\n\s\s\n/g, `

`) + `
`).trim();
      let nameHint = "";
      name2 === void 0 ? nameHint = "" : typeof name2 == "string" ? nameHint = ' and name "' + name2 + '"' : nameHint = " and name `" + name2 + "`";
      let descriptionHint = "";
      return description === void 0 ? descriptionHint = "" : typeof description == "string" ? descriptionHint = ' and description "' + description + '"' : descriptionHint = " and description `" + description + "`", (`
Unable to find an ` + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + `

` + roleMessage).trim();
    };
    var queryAllByRoleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByRole, queryAllByRole.name, "queryAll");
    var [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = buildQueries(queryAllByRole, getMultipleError$1, getMissingError$1);
    var getTestIdAttribute = () => getConfig().testIdAttribute;
    var queryAllByTestId = function() {
      for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++)
        args2[_key] = arguments[_key];
      return checkContainerType(args2[0]), queryAllByAttribute(getTestIdAttribute(), ...args2);
    };
    var getMultipleError = (c, id) => "Found multiple elements by: [" + getTestIdAttribute() + '="' + id + '"]';
    var getMissingError = (c, id) => "Unable to find an element by: [" + getTestIdAttribute() + '="' + id + '"]';
    var queryAllByTestIdWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTestId, queryAllByTestId.name, "queryAll");
    var [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = buildQueries(queryAllByTestId, getMultipleError, getMissingError);
    var queries = Object.freeze({ __proto__: null, queryAllByLabelText: queryAllByLabelTextWithSuggestions, queryByLabelText, getAllByLabelText: getAllByLabelTextWithSuggestions, getByLabelText: getByLabelTextWithSuggestions, findAllByLabelText, findByLabelText, queryByPlaceholderText, queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions, getByPlaceholderText, getAllByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText, queryByText, queryAllByText: queryAllByTextWithSuggestions, getByText, getAllByText, findAllByText, findByText, queryByDisplayValue, queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions, getByDisplayValue, getAllByDisplayValue, findAllByDisplayValue, findByDisplayValue, queryByAltText, queryAllByAltText: queryAllByAltTextWithSuggestions, getByAltText, getAllByAltText, findAllByAltText, findByAltText, queryByTitle, queryAllByTitle: queryAllByTitleWithSuggestions, getByTitle, getAllByTitle, findAllByTitle, findByTitle, queryByRole, queryAllByRole: queryAllByRoleWithSuggestions, getAllByRole, getByRole, findAllByRole, findByRole, queryByTestId, queryAllByTestId: queryAllByTestIdWithSuggestions, getByTestId, getAllByTestId, findAllByTestId, findByTestId });
    function getQueriesForElement(element, queries$1, initialValue2) {
      return queries$1 === void 0 && (queries$1 = queries), initialValue2 === void 0 && (initialValue2 = {}), Object.keys(queries$1).reduce((helpers, key2) => {
        let fn3 = queries$1[key2];
        return helpers[key2] = fn3.bind(null, element), helpers;
      }, initialValue2);
    }
    var isRemoved = (result2) => !result2 || Array.isArray(result2) && !result2.length;
    function initialCheck(elements) {
      if (isRemoved(elements))
        throw new Error("The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.");
    }
    async function waitForElementToBeRemoved(callback, options2) {
      let timeoutError = new Error("Timed out in waitForElementToBeRemoved.");
      if (typeof callback != "function") {
        initialCheck(callback);
        let getRemainingElements = (Array.isArray(callback) ? callback : [callback]).map((element) => {
          let parent = element.parentElement;
          if (parent === null)
            return () => null;
          for (; parent.parentElement; )
            parent = parent.parentElement;
          return () => parent.contains(element) ? element : null;
        });
        callback = () => getRemainingElements.map((c) => c()).filter(Boolean);
      }
      return initialCheck(callback()), waitForWrapper(() => {
        let result2;
        try {
          result2 = callback();
        } catch (error) {
          if (error.name === "TestingLibraryElementError")
            return;
          throw error;
        }
        if (!isRemoved(result2))
          throw timeoutError;
      }, options2);
    }
    var eventMap = { copy: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, cut: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, paste: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionEnd: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionStart: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionUpdate: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keyDown: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, keyPress: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, keyUp: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, focus: { EventType: "FocusEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, blur: { EventType: "FocusEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, focusIn: { EventType: "FocusEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, focusOut: { EventType: "FocusEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, change: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, input: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, invalid: { EventType: "Event", defaultInit: { bubbles: false, cancelable: true } }, submit: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } }, reset: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } }, click: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, button: 0, composed: true } }, contextMenu: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dblClick: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, drag: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragEnd: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragEnter: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragExit: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragLeave: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragOver: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragStart: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, drop: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseDown: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseEnter: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseLeave: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseMove: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseOut: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseOver: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseUp: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, select: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, touchCancel: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, touchEnd: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, touchMove: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, touchStart: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, resize: { EventType: "UIEvent", defaultInit: { bubbles: false, cancelable: false } }, scroll: { EventType: "UIEvent", defaultInit: { bubbles: false, cancelable: false } }, wheel: { EventType: "WheelEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, abort: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, canPlay: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, canPlayThrough: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, durationChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, emptied: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, encrypted: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, ended: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadedData: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadedMetadata: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadStart: { EventType: "ProgressEvent", defaultInit: { bubbles: false, cancelable: false } }, pause: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, play: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, playing: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, progress: { EventType: "ProgressEvent", defaultInit: { bubbles: false, cancelable: false } }, rateChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, seeked: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, seeking: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, stalled: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, suspend: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, timeUpdate: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, volumeChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, waiting: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, load: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, error: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, animationStart: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, animationEnd: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, animationIteration: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionCancel: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionEnd: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: true } }, transitionRun: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionStart: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, pointerOver: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerEnter: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, pointerDown: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerMove: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerUp: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerCancel: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, pointerOut: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerLeave: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, gotPointerCapture: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, lostPointerCapture: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, popState: { EventType: "PopStateEvent", defaultInit: { bubbles: true, cancelable: false } }, offline: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, online: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } } };
    var eventAliasMap = { doubleClick: "dblClick" };
    function fireEvent(element, event) {
      return getConfig().eventWrapper(() => {
        if (!event)
          throw new Error("Unable to fire an event - please provide an event object.");
        if (!element)
          throw new Error('Unable to fire a "' + event.type + '" event - please provide a DOM element.');
        return element.dispatchEvent(event);
      });
    }
    function createEvent(eventName, node, init, _temp) {
      let { EventType = "Event", defaultInit = {} } = _temp === void 0 ? {} : _temp;
      if (!node)
        throw new Error('Unable to fire a "' + eventName + '" event - please provide a DOM element.');
      let eventInit = { ...defaultInit, ...init }, { target: { value: value2, files, ...targetProperties } = {} } = eventInit;
      value2 !== void 0 && setNativeValue(node, value2), files !== void 0 && Object.defineProperty(node, "files", { configurable: true, enumerable: true, writable: true, value: files }), Object.assign(node, targetProperties);
      let window2 = getWindowFromNode(node), EventConstructor = window2[EventType] || window2.Event, event;
      if (typeof EventConstructor == "function")
        event = new EventConstructor(eventName, eventInit);
      else {
        event = window2.document.createEvent(EventType);
        let { bubbles, cancelable, detail, ...otherInit } = eventInit;
        event.initEvent(eventName, bubbles, cancelable, detail), Object.keys(otherInit).forEach((eventKey) => {
          event[eventKey] = otherInit[eventKey];
        });
      }
      return ["dataTransfer", "clipboardData"].forEach((dataTransferKey) => {
        let dataTransferValue = eventInit[dataTransferKey];
        typeof dataTransferValue == "object" && (typeof window2.DataTransfer == "function" ? Object.defineProperty(event, dataTransferKey, { value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => (Object.defineProperty(acc, propName, { value: dataTransferValue[propName] }), acc), new window2.DataTransfer()) }) : Object.defineProperty(event, dataTransferKey, { value: dataTransferValue }));
      }), event;
    }
    Object.keys(eventMap).forEach((key2) => {
      let { EventType, defaultInit } = eventMap[key2], eventName = key2.toLowerCase();
      createEvent[key2] = (node, init) => createEvent(eventName, node, init, { EventType, defaultInit }), fireEvent[key2] = (node, init) => fireEvent(node, createEvent[key2](node, init));
    });
    function setNativeValue(element, value2) {
      let { set: valueSetter } = Object.getOwnPropertyDescriptor(element, "value") || {}, prototype = Object.getPrototypeOf(element), { set: prototypeValueSetter } = Object.getOwnPropertyDescriptor(prototype, "value") || {};
      if (prototypeValueSetter && valueSetter !== prototypeValueSetter)
        prototypeValueSetter.call(element, value2);
      else if (valueSetter)
        valueSetter.call(element, value2);
      else
        throw new Error("The given element does not have a value setter");
    }
    Object.keys(eventAliasMap).forEach((aliasKey) => {
      let key2 = eventAliasMap[aliasKey];
      fireEvent[aliasKey] = function() {
        return fireEvent[key2](...arguments);
      };
    });
    function unindent(string2) {
      return string2.replace(/[ \t]*[\n][ \t]*/g, `
`);
    }
    function encode(value2) {
      return import_lz_string.default.compressToEncodedURIComponent(unindent(value2));
    }
    function getPlaygroundUrl(markup) {
      return "https://testing-playground.com/#markup=" + encode(markup);
    }
    var debug = (element, maxLength, options2) => Array.isArray(element) ? element.forEach((el) => logDOM(el, maxLength, options2)) : logDOM(element, maxLength, options2);
    var logTestingPlaygroundURL = function(element) {
      if (element === void 0 && (element = getDocument().body), !element || !("innerHTML" in element)) {
        console.log("The element you're providing isn't a valid DOM element.");
        return;
      }
      if (!element.innerHTML) {
        console.log("The provided element doesn't have any children.");
        return;
      }
      let playgroundUrl = getPlaygroundUrl(element.innerHTML);
      return console.log(`Open this URL in your browser

` + playgroundUrl), playgroundUrl;
    };
    var initialValue = { debug, logTestingPlaygroundURL };
    var screen = typeof document < "u" && document.body ? getQueriesForElement(document.body, queries, initialValue) : Object.keys(queries).reduce((helpers, key2) => (helpers[key2] = () => {
      throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
    }, helpers), initialValue);
    function isElementType(element, tag, props) {
      return element.namespaceURI && element.namespaceURI !== "http://www.w3.org/1999/xhtml" || (tag = Array.isArray(tag) ? tag : [tag], !tag.includes(element.tagName.toLowerCase())) ? false : props ? Object.entries(props).every(([k, v2]) => element[k] === v2) : true;
    }
    var clickableInputTypes;
    (function(clickableInputTypes2) {
      clickableInputTypes2.button = "button", clickableInputTypes2.color = "color", clickableInputTypes2.file = "file", clickableInputTypes2.image = "image", clickableInputTypes2.reset = "reset", clickableInputTypes2.submit = "submit", clickableInputTypes2.checkbox = "checkbox", clickableInputTypes2.radio = "radio";
    })(clickableInputTypes || (clickableInputTypes = {}));
    function isClickableInput(element) {
      return isElementType(element, "button") || isElementType(element, "input") && element.type in clickableInputTypes;
    }
    function getWindow(node) {
      var _node_ownerDocument;
      if (isDocument(node) && node.defaultView)
        return node.defaultView;
      if (!((_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === void 0) && _node_ownerDocument.defaultView)
        return node.ownerDocument.defaultView;
      throw new Error(`Could not determine window of node. Node was ${describe(node)}`);
    }
    function isDocument(node) {
      return node.nodeType === 9;
    }
    function describe(val) {
      return typeof val == "function" ? `function ${val.name}` : val === null ? "null" : String(val);
    }
    function readBlobText(blob, FileReader) {
      return new Promise((res, rej) => {
        let fr = new FileReader();
        fr.onerror = rej, fr.onabort = rej, fr.onload = () => {
          res(String(fr.result));
        }, fr.readAsText(blob);
      });
    }
    function createFileList(window2, files) {
      let list = { ...files, length: files.length, item: (index) => list[index], [Symbol.iterator]: function* () {
        for (let i = 0; i < list.length; i++)
          yield list[i];
      } };
      return list.constructor = window2.FileList, window2.FileList && Object.setPrototypeOf(list, window2.FileList.prototype), Object.freeze(list), list;
    }
    function _define_property(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var DataTransferItemStub = class {
      getAsFile() {
        return this.file;
      }
      getAsString(callback) {
        typeof this.data == "string" && callback(this.data);
      }
      webkitGetAsEntry() {
        throw new Error("not implemented");
      }
      constructor(dataOrFile, type3) {
        _define_property(this, "kind", void 0), _define_property(this, "type", void 0), _define_property(this, "file", null), _define_property(this, "data", void 0), typeof dataOrFile == "string" ? (this.kind = "string", this.type = String(type3), this.data = dataOrFile) : (this.kind = "file", this.type = dataOrFile.type, this.file = dataOrFile);
      }
    };
    var DataTransferItemListStub = class extends Array {
      add(...args2) {
        let item = new DataTransferItemStub(args2[0], args2[1]);
        return this.push(item), item;
      }
      clear() {
        this.splice(0, this.length);
      }
      remove(index) {
        this.splice(index, 1);
      }
    };
    function getTypeMatcher(type3, exact) {
      let [group, sub] = type3.split("/"), isGroup = !sub || sub === "*";
      return (item) => exact ? item.type === (isGroup ? group : type3) : isGroup ? item.type.startsWith(`${group}/`) : item.type === group;
    }
    function createDataTransferStub(window2) {
      return new class {
        getData(format4) {
          var _this_items_find;
          let match = (_this_items_find = this.items.find(getTypeMatcher(format4, true))) !== null && _this_items_find !== void 0 ? _this_items_find : this.items.find(getTypeMatcher(format4, false)), text = "";
          return match == null ? void 0 : match.getAsString((t) => {
            text = t;
          }), text;
        }
        setData(format4, data) {
          let matchIndex = this.items.findIndex(getTypeMatcher(format4, true)), item = new DataTransferItemStub(data, format4);
          matchIndex >= 0 ? this.items.splice(matchIndex, 1, item) : this.items.push(item);
        }
        clearData(format4) {
          if (format4) {
            let matchIndex = this.items.findIndex(getTypeMatcher(format4, true));
            matchIndex >= 0 && this.items.remove(matchIndex);
          } else
            this.items.clear();
        }
        get types() {
          let t = [];
          return this.files.length && t.push("Files"), this.items.forEach((i) => t.push(i.type)), Object.freeze(t), t;
        }
        setDragImage() {
        }
        constructor() {
          _define_property(this, "dropEffect", "none"), _define_property(this, "effectAllowed", "uninitialized"), _define_property(this, "items", new DataTransferItemListStub()), _define_property(this, "files", createFileList(window2, []));
        }
      }();
    }
    function createDataTransfer(window2, files = []) {
      let dt = typeof window2.DataTransfer > "u" ? createDataTransferStub(window2) : new window2.DataTransfer();
      return Object.defineProperty(dt, "files", { get: () => createFileList(window2, files) }), dt;
    }
    function getBlobFromDataTransferItem(window2, item) {
      if (item.kind === "file")
        return item.getAsFile();
      let data = "";
      return item.getAsString((s) => {
        data = s;
      }), new window2.Blob([data], { type: item.type });
    }
    function _define_property2(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    function createClipboardItem(window2, ...blobs) {
      let dataMap = Object.fromEntries(blobs.map((b2) => [typeof b2 == "string" ? "text/plain" : b2.type, Promise.resolve(b2)]));
      return typeof window2.ClipboardItem < "u" ? new window2.ClipboardItem(dataMap) : new class {
        get types() {
          return Array.from(Object.keys(this.data));
        }
        async getType(type3) {
          let value2 = await this.data[type3];
          if (!value2)
            throw new Error(`${type3} is not one of the available MIME types on this item.`);
          return value2 instanceof window2.Blob ? value2 : new window2.Blob([value2], { type: type3 });
        }
        constructor(d2) {
          _define_property2(this, "data", void 0), this.data = d2;
        }
      }(dataMap);
    }
    var ClipboardStubControl = Symbol("Manage ClipboardSub");
    function createClipboardStub(window2, control) {
      return Object.assign(new class extends window2.EventTarget {
        async read() {
          return Array.from(this.items);
        }
        async readText() {
          let text = "";
          for (let item of this.items) {
            let type3 = item.types.includes("text/plain") ? "text/plain" : item.types.find((t) => t.startsWith("text/"));
            type3 && (text += await item.getType(type3).then((b2) => readBlobText(b2, window2.FileReader)));
          }
          return text;
        }
        async write(data) {
          this.items = data;
        }
        async writeText(text) {
          this.items = [createClipboardItem(window2, text)];
        }
        constructor(...args2) {
          super(...args2), _define_property2(this, "items", []);
        }
      }(), { [ClipboardStubControl]: control });
    }
    function isClipboardStub(clipboard) {
      return !!(clipboard == null ? void 0 : clipboard[ClipboardStubControl]);
    }
    function attachClipboardStubToView(window2) {
      if (isClipboardStub(window2.navigator.clipboard))
        return window2.navigator.clipboard[ClipboardStubControl];
      let realClipboard = Object.getOwnPropertyDescriptor(window2.navigator, "clipboard"), stub, control = { resetClipboardStub: () => {
        stub = createClipboardStub(window2, control);
      }, detachClipboardStub: () => {
        realClipboard ? Object.defineProperty(window2.navigator, "clipboard", realClipboard) : Object.defineProperty(window2.navigator, "clipboard", { value: void 0, configurable: true });
      } };
      return stub = createClipboardStub(window2, control), Object.defineProperty(window2.navigator, "clipboard", { get: () => stub, configurable: true }), stub[ClipboardStubControl];
    }
    function resetClipboardStubOnView(window2) {
      isClipboardStub(window2.navigator.clipboard) && window2.navigator.clipboard[ClipboardStubControl].resetClipboardStub();
    }
    function detachClipboardStubFromView(window2) {
      isClipboardStub(window2.navigator.clipboard) && window2.navigator.clipboard[ClipboardStubControl].detachClipboardStub();
    }
    async function readDataTransferFromClipboard(document2) {
      let window2 = document2.defaultView, clipboard = window2 == null ? void 0 : window2.navigator.clipboard, items = clipboard && await clipboard.read();
      if (!items)
        throw new Error("The Clipboard API is unavailable.");
      let dt = createDataTransfer(window2);
      for (let item of items)
        for (let type3 of item.types)
          dt.setData(type3, await item.getType(type3).then((b2) => readBlobText(b2, window2.FileReader)));
      return dt;
    }
    async function writeDataTransferToClipboard(document2, clipboardData) {
      let window2 = getWindow(document2), clipboard = window2.navigator.clipboard, items = [];
      for (let i = 0; i < clipboardData.items.length; i++) {
        let dtItem = clipboardData.items[i], blob = getBlobFromDataTransferItem(window2, dtItem);
        items.push(createClipboardItem(window2, blob));
      }
      if (!(clipboard && await clipboard.write(items).then(() => true, () => false)))
        throw new Error("The Clipboard API is unavailable.");
    }
    var g = globalThis;
    typeof g.afterEach == "function" && g.afterEach(() => resetClipboardStubOnView(globalThis.window));
    typeof g.afterAll == "function" && g.afterAll(() => detachClipboardStubFromView(globalThis.window));
    function isContentEditable(element) {
      return element.hasAttribute("contenteditable") && (element.getAttribute("contenteditable") == "true" || element.getAttribute("contenteditable") == "");
    }
    function getContentEditable(node) {
      let element = getElement(node);
      return element && (element.closest('[contenteditable=""]') || element.closest('[contenteditable="true"]'));
    }
    function getElement(node) {
      return node.nodeType === 1 ? node : node.parentElement;
    }
    function isEditable(element) {
      return isEditableInputOrTextArea(element) && !element.readOnly || isContentEditable(element);
    }
    var editableInputTypes;
    (function(editableInputTypes2) {
      editableInputTypes2.text = "text", editableInputTypes2.date = "date", editableInputTypes2["datetime-local"] = "datetime-local", editableInputTypes2.email = "email", editableInputTypes2.month = "month", editableInputTypes2.number = "number", editableInputTypes2.password = "password", editableInputTypes2.search = "search", editableInputTypes2.tel = "tel", editableInputTypes2.time = "time", editableInputTypes2.url = "url", editableInputTypes2.week = "week";
    })(editableInputTypes || (editableInputTypes = {}));
    function isEditableInputOrTextArea(element) {
      return isElementType(element, "textarea") || isElementType(element, "input") && element.type in editableInputTypes;
    }
    var maxLengthSupportedTypes;
    (function(maxLengthSupportedTypes2) {
      maxLengthSupportedTypes2.email = "email", maxLengthSupportedTypes2.password = "password", maxLengthSupportedTypes2.search = "search", maxLengthSupportedTypes2.telephone = "telephone", maxLengthSupportedTypes2.text = "text", maxLengthSupportedTypes2.url = "url";
    })(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));
    function getMaxLength(element) {
      var _element_getAttribute;
      let attr = (_element_getAttribute = element.getAttribute("maxlength")) !== null && _element_getAttribute !== void 0 ? _element_getAttribute : "";
      return /^\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : void 0;
    }
    function supportsMaxLength(element) {
      return isElementType(element, "textarea") || isElementType(element, "input") && element.type in maxLengthSupportedTypes;
    }
    var FOCUSABLE_SELECTOR = ["input:not([type=hidden]):not([disabled])", "button:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", '[contenteditable=""]', '[contenteditable="true"]', "a[href]", "[tabindex]:not([disabled])"].join(", ");
    function isFocusable(element) {
      return element.matches(FOCUSABLE_SELECTOR);
    }
    var bracketDict;
    (function(bracketDict2) {
      bracketDict2["{"] = "}", bracketDict2["["] = "]";
    })(bracketDict || (bracketDict = {}));
    function readNextDescriptor(text, context) {
      let pos = 0, startBracket = text[pos] in bracketDict ? text[pos] : "";
      pos += startBracket.length;
      let type3 = new RegExp(`^\\${startBracket}{2}`).test(text) ? "" : startBracket;
      return { type: type3, ...type3 === "" ? readPrintableChar(text, pos, context) : readTag(text, pos, type3, context) };
    }
    function readPrintableChar(text, pos, context) {
      let descriptor = text[pos];
      return assertDescriptor(descriptor, text, pos, context), pos += descriptor.length, { consumedLength: pos, descriptor, releasePrevious: false, releaseSelf: true, repeat: 1 };
    }
    function readTag(text, pos, startBracket, context) {
      var _text_slice_match, _text_slice_match1;
      let releasePreviousModifier = text[pos] === "/" ? "/" : "";
      pos += releasePreviousModifier.length;
      let escapedDescriptor = startBracket === "{" && text[pos] === "\\";
      pos += Number(escapedDescriptor);
      let descriptor = escapedDescriptor ? text[pos] : (_text_slice_match = text.slice(pos).match(startBracket === "{" ? /^\w+|^[^}>/]/ : /^\w+/)) === null || _text_slice_match === void 0 ? void 0 : _text_slice_match[0];
      assertDescriptor(descriptor, text, pos, context), pos += descriptor.length;
      var _text_slice_match_;
      let repeatModifier = (_text_slice_match_ = (_text_slice_match1 = text.slice(pos).match(/^>\d+/)) === null || _text_slice_match1 === void 0 ? void 0 : _text_slice_match1[0]) !== null && _text_slice_match_ !== void 0 ? _text_slice_match_ : "";
      pos += repeatModifier.length;
      let releaseSelfModifier = text[pos] === "/" || !repeatModifier && text[pos] === ">" ? text[pos] : "";
      pos += releaseSelfModifier.length;
      let expectedEndBracket = bracketDict[startBracket], endBracket = text[pos] === expectedEndBracket ? expectedEndBracket : "";
      if (!endBracket)
        throw new Error(getErrorMessage([!repeatModifier && "repeat modifier", !releaseSelfModifier && "release modifier", `"${expectedEndBracket}"`].filter(Boolean).join(" or "), text[pos], text, context));
      return pos += endBracket.length, { consumedLength: pos, descriptor, releasePrevious: !!releasePreviousModifier, repeat: repeatModifier ? Math.max(Number(repeatModifier.substr(1)), 1) : 1, releaseSelf: hasReleaseSelf(releaseSelfModifier, repeatModifier) };
    }
    function assertDescriptor(descriptor, text, pos, context) {
      if (!descriptor)
        throw new Error(getErrorMessage("key descriptor", text[pos], text, context));
    }
    function hasReleaseSelf(releaseSelfModifier, repeatModifier) {
      if (releaseSelfModifier)
        return releaseSelfModifier === "/";
      if (repeatModifier)
        return false;
    }
    function getErrorMessage(expected, found, text, context) {
      return `Expected ${expected} but found "${found ?? ""}" in "${text}"
    See ${context === "pointer" ? "https://testing-library.com/docs/user-event/pointer#pressing-a-button-or-touching-the-screen" : "https://testing-library.com/docs/user-event/keyboard"}
    for more information about how userEvent parses your input.`;
    }
    function cloneEvent(event) {
      return new event.constructor(event.type, event);
    }
    var ApiLevel;
    (function(ApiLevel2) {
      ApiLevel2[ApiLevel2.Trigger = 2] = "Trigger", ApiLevel2[ApiLevel2.Call = 1] = "Call";
    })(ApiLevel || (ApiLevel = {}));
    function setLevelRef(instance, level) {
      instance.levelRefs[level] = {};
    }
    function getLevelRef(instance, level) {
      return instance.levelRefs[level];
    }
    var PointerEventsCheckLevel;
    (function(PointerEventsCheckLevel2) {
      PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachTrigger = 4] = "EachTrigger", PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachApiCall = 2] = "EachApiCall", PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachTarget = 1] = "EachTarget", PointerEventsCheckLevel2[PointerEventsCheckLevel2.Never = 0] = "Never";
    })(PointerEventsCheckLevel || (PointerEventsCheckLevel = {}));
    function isDisabled2(element) {
      for (let el = element; el; el = el.parentElement)
        if (isElementType(el, ["button", "input", "select", "textarea", "optgroup", "option"])) {
          if (el.hasAttribute("disabled"))
            return true;
        } else if (isElementType(el, "fieldset")) {
          var _el_querySelector;
          if (el.hasAttribute("disabled") && !(!((_el_querySelector = el.querySelector(":scope > legend")) === null || _el_querySelector === void 0) && _el_querySelector.contains(element)))
            return true;
        } else if (el.tagName.includes("-") && el.constructor.formAssociated && el.hasAttribute("disabled"))
          return true;
      return false;
    }
    function getActiveElement(document2) {
      let activeElement = document2.activeElement;
      return (activeElement == null ? void 0 : activeElement.shadowRoot) ? getActiveElement(activeElement.shadowRoot) : isDisabled2(activeElement) ? document2.ownerDocument ? document2.ownerDocument.body : document2.body : activeElement;
    }
    function getActiveElementOrBody(document2) {
      var _getActiveElement;
      return (_getActiveElement = getActiveElement(document2)) !== null && _getActiveElement !== void 0 ? _getActiveElement : document2.body;
    }
    function findClosest(element, callback) {
      let el = element;
      do {
        if (callback(el))
          return el;
        el = el.parentElement;
      } while (el && el !== element.ownerDocument.body);
    }
    function hasOwnSelection(node) {
      return isElement3(node) && isEditableInputOrTextArea(node);
    }
    function hasNoSelection(node) {
      return isElement3(node) && isClickableInput(node);
    }
    function isElement3(node) {
      return node.nodeType === 1;
    }
    function updateSelectionOnFocus(element) {
      let selection = element.ownerDocument.getSelection();
      if ((selection == null ? void 0 : selection.focusNode) && hasOwnSelection(element)) {
        let contenteditable = getContentEditable(selection.focusNode);
        if (contenteditable) {
          if (!selection.isCollapsed) {
            var _contenteditable_firstChild;
            let focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === void 0 ? void 0 : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
            selection.setBaseAndExtent(focusNode, 0, focusNode, 0);
          }
        } else
          selection.setBaseAndExtent(element, 0, element, 0);
      }
    }
    function wrapEvent(cb, _element) {
      return getConfig().eventWrapper(cb);
    }
    function focusElement(element) {
      let target = findClosest(element, isFocusable), activeElement = getActiveElement(element.ownerDocument);
      (target ?? element.ownerDocument.body) !== activeElement && (target ? wrapEvent(() => target.focus()) : wrapEvent(() => activeElement == null ? void 0 : activeElement.blur()), updateSelectionOnFocus(target ?? element.ownerDocument.body));
    }
    function blurElement(element) {
      !isFocusable(element) || !(getActiveElement(element.ownerDocument) === element) || wrapEvent(() => element.blur());
    }
    var behavior = {};
    behavior.click = (event, target, instance) => {
      let context = target.closest("button,input,label,select,textarea"), control = context && isElementType(context, "label") && context.control;
      if (control)
        return () => {
          isFocusable(control) && focusElement(control), instance.dispatchEvent(control, cloneEvent(event));
        };
      if (isElementType(target, "input", { type: "file" }))
        return () => {
          blurElement(target), target.dispatchEvent(new (getWindow(target)).Event("fileDialog")), focusElement(target);
        };
    };
    var UIValue = Symbol("Displayed value in UI");
    var UISelection = Symbol("Displayed selection in UI");
    var InitialValue = Symbol("Initial value to compare on blur");
    function isUIValue(value2) {
      return typeof value2 == "object" && UIValue in value2;
    }
    function isUISelectionStart(start) {
      return !!start && typeof start == "object" && UISelection in start;
    }
    function setUIValue(element, value2) {
      element[InitialValue] === void 0 && (element[InitialValue] = element.value), element[UIValue] = value2, element.value = Object.assign(new String(value2), { [UIValue]: true });
    }
    function getUIValue(element) {
      return element[UIValue] === void 0 ? element.value : String(element[UIValue]);
    }
    function setUIValueClean(element) {
      element[UIValue] = void 0;
    }
    function clearInitialValue(element) {
      element[InitialValue] = void 0;
    }
    function getInitialValue(element) {
      return element[InitialValue];
    }
    function setUISelectionRaw(element, selection) {
      element[UISelection] = selection;
    }
    function setUISelection(element, { focusOffset: focusOffsetParam, anchorOffset: anchorOffsetParam = focusOffsetParam }, mode = "replace") {
      let valueLength = getUIValue(element).length, sanitizeOffset = (o) => Math.max(0, Math.min(valueLength, o)), anchorOffset = mode === "replace" || element[UISelection] === void 0 ? sanitizeOffset(anchorOffsetParam) : element[UISelection].anchorOffset, focusOffset = sanitizeOffset(focusOffsetParam), startOffset = Math.min(anchorOffset, focusOffset), endOffset = Math.max(anchorOffset, focusOffset);
      if (element[UISelection] = { anchorOffset, focusOffset }, element.selectionStart === startOffset && element.selectionEnd === endOffset)
        return;
      let startObj = Object.assign(new Number(startOffset), { [UISelection]: true });
      try {
        element.setSelectionRange(startObj, endOffset);
      } catch {
      }
    }
    function getUISelection(element) {
      var _element_selectionStart, _element_selectionEnd, _element_UISelection;
      let sel = (_element_UISelection = element[UISelection]) !== null && _element_UISelection !== void 0 ? _element_UISelection : { anchorOffset: (_element_selectionStart = element.selectionStart) !== null && _element_selectionStart !== void 0 ? _element_selectionStart : 0, focusOffset: (_element_selectionEnd = element.selectionEnd) !== null && _element_selectionEnd !== void 0 ? _element_selectionEnd : 0 };
      return { ...sel, startOffset: Math.min(sel.anchorOffset, sel.focusOffset), endOffset: Math.max(sel.anchorOffset, sel.focusOffset) };
    }
    function hasUISelection(element) {
      return !!element[UISelection];
    }
    function setUISelectionClean(element) {
      element[UISelection] = void 0;
    }
    var parseInt2 = globalThis.parseInt;
    function buildTimeValue(value2) {
      let onlyDigitsValue = value2.replace(/\D/g, "");
      if (onlyDigitsValue.length < 2)
        return value2;
      let firstDigit = parseInt2(onlyDigitsValue[0], 10), secondDigit = parseInt2(onlyDigitsValue[1], 10);
      if (firstDigit >= 3 || firstDigit === 2 && secondDigit >= 4) {
        let index;
        return firstDigit >= 3 ? index = 1 : index = 2, build(onlyDigitsValue, index);
      }
      return value2.length === 2 ? value2 : build(onlyDigitsValue, 2);
    }
    function build(onlyDigitsValue, index) {
      let hours = onlyDigitsValue.slice(0, index), validHours = Math.min(parseInt2(hours, 10), 23), minuteCharacters = onlyDigitsValue.slice(index), parsedMinutes = parseInt2(minuteCharacters, 10), validMinutes = Math.min(parsedMinutes, 59);
      return `${validHours.toString().padStart(2, "0")}:${validMinutes.toString().padStart(2, "0")}`;
    }
    function isValidDateOrTimeValue(element, value2) {
      let clone2 = element.cloneNode();
      return clone2.value = value2, clone2.value === value2;
    }
    function getNextCursorPosition(node, offset, direction, inputType) {
      if (isTextNode(node) && offset + direction >= 0 && offset + direction <= node.nodeValue.length)
        return { node, offset: offset + direction };
      let nextNode = getNextCharacterContentNode(node, offset, direction);
      if (nextNode) {
        if (isTextNode(nextNode))
          return { node: nextNode, offset: direction > 0 ? Math.min(1, nextNode.nodeValue.length) : Math.max(nextNode.nodeValue.length - 1, 0) };
        if (isElementType(nextNode, "br")) {
          let nextPlusOne = getNextCharacterContentNode(nextNode, void 0, direction);
          return nextPlusOne ? isTextNode(nextPlusOne) ? { node: nextPlusOne, offset: direction > 0 ? 0 : nextPlusOne.nodeValue.length } : direction < 0 && isElementType(nextPlusOne, "br") ? { node: nextNode.parentNode, offset: getOffset(nextNode) } : { node: nextPlusOne.parentNode, offset: getOffset(nextPlusOne) + (direction > 0 ? 0 : 1) } : direction < 0 && inputType === "deleteContentBackward" ? { node: nextNode.parentNode, offset: getOffset(nextNode) } : void 0;
        } else
          return { node: nextNode.parentNode, offset: getOffset(nextNode) + (direction > 0 ? 1 : 0) };
      }
    }
    function getNextCharacterContentNode(node, offset, direction) {
      let nextOffset = Number(offset) + (direction < 0 ? -1 : 0);
      return offset !== void 0 && isElement4(node) && nextOffset >= 0 && nextOffset < node.children.length && (node = node.children[nextOffset]), walkNodes(node, direction === 1 ? "next" : "previous", isTreatedAsCharacterContent);
    }
    function isTreatedAsCharacterContent(node) {
      if (isTextNode(node))
        return true;
      if (isElement4(node)) {
        if (isElementType(node, ["input", "textarea"]))
          return node.type !== "hidden";
        if (isElementType(node, "br"))
          return true;
      }
      return false;
    }
    function getOffset(node) {
      let i = 0;
      for (; node.previousSibling; )
        i++, node = node.previousSibling;
      return i;
    }
    function isElement4(node) {
      return node.nodeType === 1;
    }
    function isTextNode(node) {
      return node.nodeType === 3;
    }
    function walkNodes(node, direction, callback) {
      for (; ; ) {
        var _node_ownerDocument;
        let sibling = node[`${direction}Sibling`];
        if (sibling) {
          if (node = getDescendant(sibling, direction === "next" ? "first" : "last"), callback(node))
            return node;
        } else if (node.parentNode && (!isElement4(node.parentNode) || !isContentEditable(node.parentNode) && node.parentNode !== ((_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === void 0 ? void 0 : _node_ownerDocument.body)))
          node = node.parentNode;
        else
          break;
      }
    }
    function getDescendant(node, direction) {
      for (; node.hasChildNodes(); )
        node = node[`${direction}Child`];
      return node;
    }
    var TrackChanges = Symbol("Track programmatic changes for React workaround");
    function isReact17Element(element) {
      return Object.getOwnPropertyNames(element).some((k) => k.startsWith("__react")) && getWindow(element).REACT_VERSION === 17;
    }
    function startTrackValue(element) {
      isReact17Element(element) && (element[TrackChanges] = { previousValue: String(element.value), tracked: [] });
    }
    function trackOrSetValue(element, v2) {
      var _element_TrackChanges_tracked, _element_TrackChanges;
      (_element_TrackChanges = element[TrackChanges]) === null || _element_TrackChanges === void 0 || (_element_TrackChanges_tracked = _element_TrackChanges.tracked) === null || _element_TrackChanges_tracked === void 0 || _element_TrackChanges_tracked.push(v2), element[TrackChanges] || (setUIValueClean(element), setUISelection(element, { focusOffset: v2.length }));
    }
    function commitValueAfterInput(element, cursorOffset) {
      var _changes_tracked;
      let changes = element[TrackChanges];
      if (element[TrackChanges] = void 0, !(!(changes == null || (_changes_tracked = changes.tracked) === null || _changes_tracked === void 0) && _changes_tracked.length))
        return;
      let isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
      isJustReactStateUpdate || setUIValueClean(element), hasUISelection(element) && setUISelection(element, { focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length });
    }
    function getTargetTypeAndSelection(node) {
      let element = getElement2(node);
      if (element && hasOwnSelection(element))
        return { type: "input", selection: getUISelection(element) };
      let selection = element == null ? void 0 : element.ownerDocument.getSelection();
      return { type: getContentEditable(node) && (selection == null ? void 0 : selection.anchorNode) && getContentEditable(selection.anchorNode) ? "contenteditable" : "default", selection };
    }
    function getElement2(node) {
      return node.nodeType === 1 ? node : node.parentElement;
    }
    function getInputRange(focusNode) {
      let typeAndSelection = getTargetTypeAndSelection(focusNode);
      if (typeAndSelection.type === "input")
        return typeAndSelection.selection;
      if (typeAndSelection.type === "contenteditable") {
        var _typeAndSelection_selection;
        return (_typeAndSelection_selection = typeAndSelection.selection) === null || _typeAndSelection_selection === void 0 ? void 0 : _typeAndSelection_selection.getRangeAt(0);
      }
    }
    function setSelection({ focusNode, focusOffset, anchorNode = focusNode, anchorOffset = focusOffset }) {
      var _anchorNode_ownerDocument_getSelection, _anchorNode_ownerDocument;
      if (getTargetTypeAndSelection(focusNode).type === "input")
        return setUISelection(focusNode, { anchorOffset, focusOffset });
      (_anchorNode_ownerDocument = anchorNode.ownerDocument) === null || _anchorNode_ownerDocument === void 0 || (_anchorNode_ownerDocument_getSelection = _anchorNode_ownerDocument.getSelection()) === null || _anchorNode_ownerDocument_getSelection === void 0 || _anchorNode_ownerDocument_getSelection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function isDateOrTime(element) {
      return isElementType(element, "input") && ["date", "time"].includes(element.type);
    }
    function input(instance, element, data, inputType = "insertText") {
      let inputRange = getInputRange(element);
      inputRange && (!isDateOrTime(element) && !instance.dispatchUIEvent(element, "beforeinput", { inputType, data }) || ("startContainer" in inputRange ? editContenteditable(instance, element, inputRange, data, inputType) : editInputElement(instance, element, inputRange, data, inputType)));
    }
    function editContenteditable(instance, element, inputRange, data, inputType) {
      let del = false;
      if (!inputRange.collapsed)
        del = true, inputRange.deleteContents();
      else if (["deleteContentBackward", "deleteContentForward"].includes(inputType)) {
        let nextPosition = getNextCursorPosition(inputRange.startContainer, inputRange.startOffset, inputType === "deleteContentBackward" ? -1 : 1, inputType);
        if (nextPosition) {
          del = true;
          let delRange = inputRange.cloneRange();
          delRange.comparePoint(nextPosition.node, nextPosition.offset) < 0 ? delRange.setStart(nextPosition.node, nextPosition.offset) : delRange.setEnd(nextPosition.node, nextPosition.offset), delRange.deleteContents();
        }
      }
      if (data)
        if (inputRange.endContainer.nodeType === 3) {
          let offset = inputRange.endOffset;
          inputRange.endContainer.insertData(offset, data), inputRange.setStart(inputRange.endContainer, offset + data.length), inputRange.setEnd(inputRange.endContainer, offset + data.length);
        } else {
          let text = element.ownerDocument.createTextNode(data);
          inputRange.insertNode(text), inputRange.setStart(text, data.length), inputRange.setEnd(text, data.length);
        }
      (del || data) && instance.dispatchUIEvent(element, "input", { inputType });
    }
    function editInputElement(instance, element, inputRange, data, inputType) {
      let dataToInsert = data;
      if (supportsMaxLength(element)) {
        let maxLength = getMaxLength(element);
        if (maxLength !== void 0 && data.length > 0) {
          let spaceUntilMaxLength = maxLength - element.value.length;
          if (spaceUntilMaxLength > 0)
            dataToInsert = data.substring(0, spaceUntilMaxLength);
          else
            return;
        }
      }
      let { newValue, newOffset, oldValue } = calculateNewValue(dataToInsert, element, inputRange, inputType);
      newValue === oldValue && newOffset === inputRange.startOffset && newOffset === inputRange.endOffset || isElementType(element, "input", { type: "number" }) && !isValidNumberInput(newValue) || (setUIValue(element, newValue), setSelection({ focusNode: element, anchorOffset: newOffset, focusOffset: newOffset }), isDateOrTime(element) ? isValidDateOrTimeValue(element, newValue) && (commitInput(instance, element, newOffset, {}), instance.dispatchUIEvent(element, "change"), clearInitialValue(element)) : commitInput(instance, element, newOffset, { data, inputType }));
    }
    function calculateNewValue(inputData, node, { startOffset, endOffset }, inputType) {
      let value2 = getUIValue(node), prologEnd = Math.max(0, startOffset === endOffset && inputType === "deleteContentBackward" ? startOffset - 1 : startOffset), prolog = value2.substring(0, prologEnd), epilogStart = Math.min(value2.length, startOffset === endOffset && inputType === "deleteContentForward" ? startOffset + 1 : endOffset), epilog = value2.substring(epilogStart, value2.length), newValue = `${prolog}${inputData}${epilog}`, newOffset = prologEnd + inputData.length;
      if (isElementType(node, "input", { type: "time" })) {
        let builtValue = buildTimeValue(newValue);
        builtValue !== "" && isValidDateOrTimeValue(node, builtValue) && (newValue = builtValue, newOffset = builtValue.length);
      }
      return { oldValue: value2, newValue, newOffset };
    }
    function commitInput(instance, element, newOffset, inputInit) {
      instance.dispatchUIEvent(element, "input", inputInit), commitValueAfterInput(element, newOffset);
    }
    function isValidNumberInput(value2) {
      var _value_match, _value_match1;
      let valueParts = value2.split("e", 2);
      return !(/[^\d.\-e]/.test(value2) || Number((_value_match = value2.match(/-/g)) === null || _value_match === void 0 ? void 0 : _value_match.length) > 2 || Number((_value_match1 = value2.match(/\./g)) === null || _value_match1 === void 0 ? void 0 : _value_match1.length) > 1 || valueParts[1] && !/^-?\d*$/.test(valueParts[1]));
    }
    behavior.cut = (event, target, instance) => () => {
      isEditable(target) && input(instance, target, "", "deleteByCut");
    };
    function getValueOrTextContent(element) {
      return element ? isContentEditable(element) ? element.textContent : getUIValue(element) : null;
    }
    function isVisible(element) {
      let window2 = getWindow(element);
      for (let el = element; el == null ? void 0 : el.ownerDocument; el = el.parentElement) {
        let { display: display2, visibility } = window2.getComputedStyle(el);
        if (display2 === "none" || visibility === "hidden")
          return false;
      }
      return true;
    }
    function getTabDestination(activeElement, shift) {
      let document2 = activeElement.ownerDocument, focusableElements = document2.querySelectorAll(FOCUSABLE_SELECTOR), enabledElements = Array.from(focusableElements).filter((el) => el === activeElement || !(Number(el.getAttribute("tabindex")) < 0 || isDisabled2(el)));
      Number(activeElement.getAttribute("tabindex")) >= 0 && enabledElements.sort((a, b2) => {
        let i = Number(a.getAttribute("tabindex")), j = Number(b2.getAttribute("tabindex"));
        return i === j ? 0 : i === 0 ? 1 : j === 0 ? -1 : i - j;
      });
      let checkedRadio = {}, prunedElements = [document2.body], activeRadioGroup = isElementType(activeElement, "input", { type: "radio" }) ? activeElement.name : void 0;
      enabledElements.forEach((currentElement) => {
        let el = currentElement;
        if (isElementType(el, "input", { type: "radio" }) && el.name) {
          if (el === activeElement) {
            prunedElements.push(el);
            return;
          } else if (el.name === activeRadioGroup)
            return;
          if (el.checked) {
            prunedElements = prunedElements.filter((e) => !isElementType(e, "input", { type: "radio", name: el.name })), prunedElements.push(el), checkedRadio[el.name] = el;
            return;
          }
          if (typeof checkedRadio[el.name] < "u")
            return;
        }
        prunedElements.push(el);
      });
      for (let index = prunedElements.findIndex((el) => el === activeElement); ; )
        if (index += shift ? -1 : 1, index === prunedElements.length ? index = 0 : index === -1 && (index = prunedElements.length - 1), prunedElements[index] === activeElement || prunedElements[index] === document2.body || isVisible(prunedElements[index]))
          return prunedElements[index];
    }
    function moveSelection(node, direction) {
      if (hasOwnSelection(node)) {
        let selection = getUISelection(node);
        setSelection({ focusNode: node, focusOffset: selection.startOffset === selection.endOffset ? selection.focusOffset + direction : direction < 0 ? selection.startOffset : selection.endOffset });
      } else {
        let selection = node.ownerDocument.getSelection();
        if (!(selection == null ? void 0 : selection.focusNode))
          return;
        if (selection.isCollapsed) {
          let nextPosition = getNextCursorPosition(selection.focusNode, selection.focusOffset, direction);
          nextPosition && setSelection({ focusNode: nextPosition.node, focusOffset: nextPosition.offset });
        } else
          selection[direction < 0 ? "collapseToStart" : "collapseToEnd"]();
      }
    }
    function selectAll(target) {
      if (hasOwnSelection(target))
        return setSelection({ focusNode: target, anchorOffset: 0, focusOffset: getUIValue(target).length });
      var _getContentEditable;
      let focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;
      setSelection({ focusNode, anchorOffset: 0, focusOffset: focusNode.childNodes.length });
    }
    function isAllSelected(target) {
      if (hasOwnSelection(target))
        return getUISelection(target).startOffset === 0 && getUISelection(target).endOffset === getUIValue(target).length;
      var _getContentEditable;
      let focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body, selection = target.ownerDocument.getSelection();
      return (selection == null ? void 0 : selection.anchorNode) === focusNode && selection.focusNode === focusNode && selection.anchorOffset === 0 && selection.focusOffset === focusNode.childNodes.length;
    }
    function setSelectionRange(element, anchorOffset, focusOffset) {
      var _element_firstChild;
      if (hasOwnSelection(element))
        return setSelection({ focusNode: element, anchorOffset, focusOffset });
      if (isContentEditable(element) && ((_element_firstChild = element.firstChild) === null || _element_firstChild === void 0 ? void 0 : _element_firstChild.nodeType) === 3)
        return setSelection({ focusNode: element.firstChild, anchorOffset, focusOffset });
      throw new Error("Not implemented. The result of this interaction is unreliable.");
    }
    function walkRadio(instance, el, direction) {
      let window2 = getWindow(el), group = Array.from(el.ownerDocument.querySelectorAll(el.name ? `input[type="radio"][name="${window2.CSS.escape(el.name)}"]` : 'input[type="radio"][name=""], input[type="radio"]:not([name])'));
      for (let i = group.findIndex((e) => e === el) + direction; ; i += direction) {
        if (group[i] || (i = direction > 0 ? 0 : group.length - 1), group[i] === el)
          return;
        isDisabled2(group[i]) || (focusElement(group[i]), instance.dispatchUIEvent(group[i], "click"));
      }
    }
    behavior.keydown = (event, target, instance) => {
      var _keydownBehavior_event_key, _keydownBehavior_event_key1;
      return (_keydownBehavior_event_key1 = (_keydownBehavior_event_key = keydownBehavior[event.key]) === null || _keydownBehavior_event_key === void 0 ? void 0 : _keydownBehavior_event_key.call(keydownBehavior, event, target, instance)) !== null && _keydownBehavior_event_key1 !== void 0 ? _keydownBehavior_event_key1 : combinationBehavior(event, target, instance);
    };
    var keydownBehavior = { ArrowDown: (event, target, instance) => {
      if (isElementType(target, "input", { type: "radio" }))
        return () => walkRadio(instance, target, -1);
    }, ArrowLeft: (event, target, instance) => isElementType(target, "input", { type: "radio" }) ? () => walkRadio(instance, target, -1) : () => moveSelection(target, -1), ArrowRight: (event, target, instance) => isElementType(target, "input", { type: "radio" }) ? () => walkRadio(instance, target, 1) : () => moveSelection(target, 1), ArrowUp: (event, target, instance) => {
      if (isElementType(target, "input", { type: "radio" }))
        return () => walkRadio(instance, target, 1);
    }, Backspace: (event, target, instance) => {
      if (isEditable(target))
        return () => {
          input(instance, target, "", "deleteContentBackward");
        };
    }, Delete: (event, target, instance) => {
      if (isEditable(target))
        return () => {
          input(instance, target, "", "deleteContentForward");
        };
    }, End: (event, target) => {
      if (isElementType(target, ["input", "textarea"]) || isContentEditable(target))
        return () => {
          var _getValueOrTextContent, _getValueOrTextContent_length;
          let newPos = (_getValueOrTextContent_length = (_getValueOrTextContent = getValueOrTextContent(target)) === null || _getValueOrTextContent === void 0 ? void 0 : _getValueOrTextContent.length) !== null && _getValueOrTextContent_length !== void 0 ? _getValueOrTextContent_length : 0;
          setSelectionRange(target, newPos, newPos);
        };
    }, Home: (event, target) => {
      if (isElementType(target, ["input", "textarea"]) || isContentEditable(target))
        return () => {
          setSelectionRange(target, 0, 0);
        };
    }, PageDown: (event, target) => {
      if (isElementType(target, ["input"]))
        return () => {
          let newPos = getUIValue(target).length;
          setSelectionRange(target, newPos, newPos);
        };
    }, PageUp: (event, target) => {
      if (isElementType(target, ["input"]))
        return () => {
          setSelectionRange(target, 0, 0);
        };
    }, Tab: (event, target, instance) => () => {
      let dest = getTabDestination(target, instance.system.keyboard.modifiers.Shift);
      focusElement(dest), hasOwnSelection(dest) && setUISelection(dest, { anchorOffset: 0, focusOffset: dest.value.length });
    } };
    var combinationBehavior = (event, target, instance) => {
      if (event.code === "KeyA" && instance.system.keyboard.modifiers.Control)
        return () => selectAll(target);
    };
    behavior.keypress = (event, target, instance) => {
      if (event.key === "Enter") {
        if (isElementType(target, "button") || isElementType(target, "input") && ClickInputOnEnter.includes(target.type) || isElementType(target, "a") && target.href)
          return () => {
            instance.dispatchUIEvent(target, "click");
          };
        if (isElementType(target, "input")) {
          let form = target.form, submit = form == null ? void 0 : form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');
          return submit ? () => instance.dispatchUIEvent(submit, "click") : form && SubmitSingleInputOnEnter.includes(target.type) && form.querySelectorAll("input").length === 1 ? () => instance.dispatchUIEvent(form, "submit") : void 0;
        }
      }
      if (isEditable(target)) {
        let inputType = event.key === "Enter" ? isContentEditable(target) && !instance.system.keyboard.modifiers.Shift ? "insertParagraph" : "insertLineBreak" : "insertText", inputData = event.key === "Enter" ? `
` : event.key;
        return () => input(instance, target, inputData, inputType);
      }
    };
    var ClickInputOnEnter = ["button", "color", "file", "image", "reset", "submit"];
    var SubmitSingleInputOnEnter = ["email", "month", "password", "search", "tel", "text", "url", "week"];
    behavior.keyup = (event, target, instance) => {
      var _keyupBehavior_event_key;
      return (_keyupBehavior_event_key = keyupBehavior[event.key]) === null || _keyupBehavior_event_key === void 0 ? void 0 : _keyupBehavior_event_key.call(keyupBehavior, event, target, instance);
    };
    var keyupBehavior = { " ": (event, target, instance) => {
      if (isClickableInput(target))
        return () => instance.dispatchUIEvent(target, "click");
    } };
    behavior.paste = (event, target, instance) => {
      if (isEditable(target))
        return () => {
          var _event_clipboardData;
          let insertData = (_event_clipboardData = event.clipboardData) === null || _event_clipboardData === void 0 ? void 0 : _event_clipboardData.getData("text");
          insertData && input(instance, target, insertData, "insertFromPaste");
        };
    };
    var eventMap2 = { auxclick: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, beforeinput: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, click: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, contextmenu: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, copy: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, change: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, cut: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dblclick: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keydown: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keypress: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keyup: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, paste: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, input: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, mousedown: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseenter: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseleave: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mousemove: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseout: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseover: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseup: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerover: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerenter: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, pointerdown: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointermove: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerup: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointercancel: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, pointerout: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerleave: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, submit: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } } };
    function getEventClass(type3) {
      return eventMap2[type3].EventType;
    }
    var mouseEvents = ["MouseEvent", "PointerEvent"];
    function isMouseEvent(type3) {
      return mouseEvents.includes(getEventClass(type3));
    }
    function isKeyboardEvent(type3) {
      return getEventClass(type3) === "KeyboardEvent";
    }
    var eventInitializer = { ClipboardEvent: [initClipboardEvent], Event: [], InputEvent: [initUIEvent, initInputEvent], MouseEvent: [initUIEvent, initUIEventModififiers, initMouseEvent], PointerEvent: [initUIEvent, initUIEventModififiers, initMouseEvent, initPointerEvent], KeyboardEvent: [initUIEvent, initUIEventModififiers, initKeyboardEvent] };
    function createEvent2(type3, target, init) {
      let window2 = getWindow(target), { EventType, defaultInit } = eventMap2[type3], event = new (getEventConstructors(window2))[EventType](type3, defaultInit);
      return eventInitializer[EventType].forEach((f2) => f2(event, init ?? {})), event;
    }
    function getEventConstructors(window2) {
      var _window_Event;
      let Event2 = (_window_Event = window2.Event) !== null && _window_Event !== void 0 ? _window_Event : class {
      };
      var _window_AnimationEvent;
      let AnimationEvent = (_window_AnimationEvent = window2.AnimationEvent) !== null && _window_AnimationEvent !== void 0 ? _window_AnimationEvent : class extends Event2 {
      };
      var _window_ClipboardEvent;
      let ClipboardEvent = (_window_ClipboardEvent = window2.ClipboardEvent) !== null && _window_ClipboardEvent !== void 0 ? _window_ClipboardEvent : class extends Event2 {
      };
      var _window_PopStateEvent;
      let PopStateEvent = (_window_PopStateEvent = window2.PopStateEvent) !== null && _window_PopStateEvent !== void 0 ? _window_PopStateEvent : class extends Event2 {
      };
      var _window_ProgressEvent;
      let ProgressEvent = (_window_ProgressEvent = window2.ProgressEvent) !== null && _window_ProgressEvent !== void 0 ? _window_ProgressEvent : class extends Event2 {
      };
      var _window_TransitionEvent;
      let TransitionEvent = (_window_TransitionEvent = window2.TransitionEvent) !== null && _window_TransitionEvent !== void 0 ? _window_TransitionEvent : class extends Event2 {
      };
      var _window_UIEvent;
      let UIEvent = (_window_UIEvent = window2.UIEvent) !== null && _window_UIEvent !== void 0 ? _window_UIEvent : class extends Event2 {
      };
      var _window_CompositionEvent;
      let CompositionEvent = (_window_CompositionEvent = window2.CompositionEvent) !== null && _window_CompositionEvent !== void 0 ? _window_CompositionEvent : class extends UIEvent {
      };
      var _window_FocusEvent;
      let FocusEvent = (_window_FocusEvent = window2.FocusEvent) !== null && _window_FocusEvent !== void 0 ? _window_FocusEvent : class extends UIEvent {
      };
      var _window_InputEvent;
      let InputEvent = (_window_InputEvent = window2.InputEvent) !== null && _window_InputEvent !== void 0 ? _window_InputEvent : class extends UIEvent {
      };
      var _window_KeyboardEvent;
      let KeyboardEvent = (_window_KeyboardEvent = window2.KeyboardEvent) !== null && _window_KeyboardEvent !== void 0 ? _window_KeyboardEvent : class extends UIEvent {
      };
      var _window_MouseEvent;
      let MouseEvent = (_window_MouseEvent = window2.MouseEvent) !== null && _window_MouseEvent !== void 0 ? _window_MouseEvent : class extends UIEvent {
      };
      var _window_DragEvent;
      let DragEvent = (_window_DragEvent = window2.DragEvent) !== null && _window_DragEvent !== void 0 ? _window_DragEvent : class extends MouseEvent {
      };
      var _window_PointerEvent;
      let PointerEvent = (_window_PointerEvent = window2.PointerEvent) !== null && _window_PointerEvent !== void 0 ? _window_PointerEvent : class extends MouseEvent {
      };
      var _window_TouchEvent;
      let TouchEvent = (_window_TouchEvent = window2.TouchEvent) !== null && _window_TouchEvent !== void 0 ? _window_TouchEvent : class extends UIEvent {
      };
      return { Event: Event2, AnimationEvent, ClipboardEvent, PopStateEvent, ProgressEvent, TransitionEvent, UIEvent, CompositionEvent, FocusEvent, InputEvent, KeyboardEvent, MouseEvent, DragEvent, PointerEvent, TouchEvent };
    }
    function assignProps(obj, props) {
      for (let [key2, value2] of Object.entries(props))
        Object.defineProperty(obj, key2, { get: () => value2 ?? null });
    }
    function sanitizeNumber(n) {
      return Number(n ?? 0);
    }
    function initClipboardEvent(event, { clipboardData }) {
      assignProps(event, { clipboardData });
    }
    function initInputEvent(event, { data, inputType, isComposing }) {
      assignProps(event, { data, isComposing: !!isComposing, inputType: String(inputType) });
    }
    function initUIEvent(event, { view, detail }) {
      assignProps(event, { view, detail: sanitizeNumber(detail ?? 0) });
    }
    function initUIEventModififiers(event, { altKey, ctrlKey, metaKey, shiftKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierNumLock, modifierScrollLock, modifierSymbol, modifierSymbolLock }) {
      assignProps(event, { altKey: !!altKey, ctrlKey: !!ctrlKey, metaKey: !!metaKey, shiftKey: !!shiftKey, getModifierState(k) {
        return !!{ Alt: altKey, AltGraph: modifierAltGraph, CapsLock: modifierCapsLock, Control: ctrlKey, Fn: modifierFn, FnLock: modifierFnLock, Meta: metaKey, NumLock: modifierNumLock, ScrollLock: modifierScrollLock, Shift: shiftKey, Symbol: modifierSymbol, SymbolLock: modifierSymbolLock }[k];
      } });
    }
    function initKeyboardEvent(event, { key: key2, code, location, repeat, isComposing, charCode }) {
      assignProps(event, { key: String(key2), code: String(code), location: sanitizeNumber(location), repeat: !!repeat, isComposing: !!isComposing, charCode });
    }
    function initMouseEvent(event, { x, y: y2, screenX, screenY, clientX = x, clientY = y2, button, buttons, relatedTarget }) {
      assignProps(event, { screenX: sanitizeNumber(screenX), screenY: sanitizeNumber(screenY), clientX: sanitizeNumber(clientX), x: sanitizeNumber(clientX), clientY: sanitizeNumber(clientY), y: sanitizeNumber(clientY), button: sanitizeNumber(button), buttons: sanitizeNumber(buttons), relatedTarget });
    }
    function initPointerEvent(event, { pointerId, width, height, pressure, tangentialPressure, tiltX, tiltY, twist, pointerType, isPrimary }) {
      assignProps(event, { pointerId: sanitizeNumber(pointerId), width: sanitizeNumber(width), height: sanitizeNumber(height), pressure: sanitizeNumber(pressure), tangentialPressure: sanitizeNumber(tangentialPressure), tiltX: sanitizeNumber(tiltX), tiltY: sanitizeNumber(tiltY), twist: sanitizeNumber(twist), pointerType: String(pointerType), isPrimary: !!isPrimary });
    }
    function dispatchUIEvent(target, type3, init, preventDefault = false) {
      (isMouseEvent(type3) || isKeyboardEvent(type3)) && (init = { ...init, ...this.system.getUIEventModifiers() });
      let event = createEvent2(type3, target, init);
      return dispatchEvent.call(this, target, event, preventDefault);
    }
    function dispatchEvent(target, event, preventDefault = false) {
      var _behavior_type;
      let type3 = event.type, behaviorImplementation = preventDefault ? () => {
      } : (_behavior_type = behavior[type3]) === null || _behavior_type === void 0 ? void 0 : _behavior_type.call(behavior, event, target, this);
      if (behaviorImplementation) {
        event.preventDefault();
        let defaultPrevented = false;
        return Object.defineProperty(event, "defaultPrevented", { get: () => defaultPrevented }), Object.defineProperty(event, "preventDefault", { value: () => {
          defaultPrevented = event.cancelable;
        } }), wrapEvent(() => target.dispatchEvent(event)), defaultPrevented || behaviorImplementation(), !defaultPrevented;
      }
      return wrapEvent(() => target.dispatchEvent(event));
    }
    function dispatchDOMEvent(target, type3, init) {
      let event = createEvent2(type3, target, init);
      wrapEvent(() => target.dispatchEvent(event));
    }
    var Interceptor = Symbol("Interceptor for programmatical calls");
    function prepareInterceptor(element, propName, interceptorImpl) {
      let prototypeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName), objectDescriptor = Object.getOwnPropertyDescriptor(element, propName), target = (prototypeDescriptor == null ? void 0 : prototypeDescriptor.set) ? "set" : "value";
      if (typeof (prototypeDescriptor == null ? void 0 : prototypeDescriptor[target]) != "function" || prototypeDescriptor[target][Interceptor])
        throw new Error(`Element ${element.tagName} does not implement "${String(propName)}".`);
      function intercept(...args2) {
        let { applyNative = false, realArgs, then } = interceptorImpl.call(this, ...args2), realFunc = (!applyNative && objectDescriptor || prototypeDescriptor)[target];
        target === "set" ? realFunc.call(this, realArgs) : realFunc.call(this, ...realArgs), then == null ? void 0 : then();
      }
      intercept[Interceptor] = Interceptor, Object.defineProperty(element, propName, { ...objectDescriptor ?? prototypeDescriptor, [target]: intercept });
    }
    function prepareValueInterceptor(element) {
      prepareInterceptor(element, "value", function(v2) {
        let isUI = isUIValue(v2);
        return isUI && startTrackValue(this), { applyNative: !!isUI, realArgs: sanitizeValue(this, v2), then: isUI ? void 0 : () => trackOrSetValue(this, String(v2)) };
      });
    }
    function sanitizeValue(element, v2) {
      return isElementType(element, "input", { type: "number" }) && String(v2) !== "" && !Number.isNaN(Number(v2)) ? String(Number(v2)) : String(v2);
    }
    function prepareSelectionInterceptor(element) {
      prepareInterceptor(element, "setSelectionRange", function(start, ...others) {
        let isUI = isUISelectionStart(start);
        return { applyNative: !!isUI, realArgs: [Number(start), ...others], then: () => isUI ? void 0 : setUISelectionClean(element) };
      }), prepareInterceptor(element, "selectionStart", function(v2) {
        return { realArgs: v2, then: () => setUISelectionClean(element) };
      }), prepareInterceptor(element, "selectionEnd", function(v2) {
        return { realArgs: v2, then: () => setUISelectionClean(element) };
      }), prepareInterceptor(element, "select", function() {
        return { realArgs: [], then: () => setUISelectionRaw(element, { anchorOffset: 0, focusOffset: getUIValue(element).length }) };
      });
    }
    function prepareRangeTextInterceptor(element) {
      prepareInterceptor(element, "setRangeText", function(...realArgs) {
        return { realArgs, then: () => {
          setUIValueClean(element), setUISelectionClean(element);
        } };
      });
    }
    var isPrepared = Symbol("Node prepared with document state workarounds");
    function prepareDocument(document2) {
      document2[isPrepared] || (document2.addEventListener("focus", (e) => {
        let el = e.target;
        prepareElement(el);
      }, { capture: true, passive: true }), document2.activeElement && prepareElement(document2.activeElement), document2.addEventListener("blur", (e) => {
        let el = e.target, initialValue2 = getInitialValue(el);
        initialValue2 !== void 0 && (el.value !== initialValue2 && dispatchDOMEvent(el, "change"), clearInitialValue(el));
      }, { capture: true, passive: true }), document2[isPrepared] = isPrepared);
    }
    function prepareElement(el) {
      el[isPrepared] || (isElementType(el, ["input", "textarea"]) && (prepareValueInterceptor(el), prepareSelectionInterceptor(el), prepareRangeTextInterceptor(el)), el[isPrepared] = isPrepared);
    }
    function getDocumentFromNode(el) {
      return isDocument2(el) ? el : el.ownerDocument;
    }
    function isDocument2(node) {
      return node.nodeType === 9;
    }
    function wait(config3) {
      let delay = config3.delay;
      if (typeof delay == "number")
        return Promise.all([new Promise((resolve) => globalThis.setTimeout(() => resolve(), delay)), config3.advanceTimers(delay)]);
    }
    function _define_property3(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var DOM_KEY_LOCATION;
    (function(DOM_KEY_LOCATION2) {
      DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.STANDARD = 0] = "STANDARD", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.LEFT = 1] = "LEFT", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.RIGHT = 2] = "RIGHT", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.NUMPAD = 3] = "NUMPAD";
    })(DOM_KEY_LOCATION || (DOM_KEY_LOCATION = {}));
    var modifierKeys = ["Alt", "AltGraph", "Control", "Fn", "Meta", "Shift", "Symbol"];
    function isModifierKey(key2) {
      return modifierKeys.includes(key2);
    }
    var modifierLocks = ["CapsLock", "FnLock", "NumLock", "ScrollLock", "SymbolLock"];
    function isModifierLock(key2) {
      return modifierLocks.includes(key2);
    }
    var KeyboardHost = class {
      isKeyPressed(keyDef) {
        return !!this.pressed[String(keyDef.code)];
      }
      getPressedKeys() {
        return Object.values(this.pressed).map((p2) => p2.keyDef);
      }
      async keydown(instance, keyDef) {
        var _this_pressed, _code, _this_pressed_code;
        let key2 = String(keyDef.key), code = String(keyDef.code), target = getActiveElementOrBody(instance.config.document);
        this.setKeydownTarget(target);
        var _;
        (_ = (_this_pressed = this.pressed)[_code = code]) !== null && _ !== void 0 || (_this_pressed[_code] = { keyDef, unpreventedDefault: false }), isModifierKey(key2) && (this.modifiers[key2] = true);
        let unprevented = instance.dispatchUIEvent(target, "keydown", { key: key2, code });
        isModifierLock(key2) && !this.modifiers[key2] && (this.modifiers[key2] = true, this.modifierLockStart[key2] = true), (_this_pressed_code = this.pressed[code]).unpreventedDefault || (_this_pressed_code.unpreventedDefault = unprevented), unprevented && this.hasKeyPress(key2) && instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keypress", { key: key2, code, charCode: keyDef.key === "Enter" ? 13 : String(keyDef.key).charCodeAt(0) });
      }
      async keyup(instance, keyDef) {
        let key2 = String(keyDef.key), code = String(keyDef.code), unprevented = this.pressed[code].unpreventedDefault;
        delete this.pressed[code], isModifierKey(key2) && !Object.values(this.pressed).find((p2) => p2.keyDef.key === key2) && (this.modifiers[key2] = false), instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keyup", { key: key2, code }, !unprevented), isModifierLock(key2) && this.modifiers[key2] && (this.modifierLockStart[key2] ? this.modifierLockStart[key2] = false : this.modifiers[key2] = false);
      }
      setKeydownTarget(target) {
        target !== this.lastKeydownTarget && (this.carryChar = ""), this.lastKeydownTarget = target;
      }
      hasKeyPress(key2) {
        return (key2.length === 1 || key2 === "Enter") && !this.modifiers.Control && !this.modifiers.Alt;
      }
      constructor(system) {
        _define_property3(this, "system", void 0), _define_property3(this, "modifiers", { Alt: false, AltGraph: false, CapsLock: false, Control: false, Fn: false, FnLock: false, Meta: false, NumLock: false, ScrollLock: false, Shift: false, Symbol: false, SymbolLock: false }), _define_property3(this, "pressed", {}), _define_property3(this, "carryChar", ""), _define_property3(this, "lastKeydownTarget", void 0), _define_property3(this, "modifierLockStart", {}), this.system = system;
      }
    };
    var defaultKeyMap = [..."0123456789".split("").map((c) => ({ code: `Digit${c}`, key: c })), ...")!@#$%^&*(".split("").map((c, i) => ({ code: `Digit${i}`, key: c, shiftKey: true })), ..."abcdefghijklmnopqrstuvwxyz".split("").map((c) => ({ code: `Key${c.toUpperCase()}`, key: c })), ..."ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").map((c) => ({ code: `Key${c}`, key: c, shiftKey: true })), { code: "Space", key: " " }, { code: "AltLeft", key: "Alt", location: DOM_KEY_LOCATION.LEFT }, { code: "AltRight", key: "Alt", location: DOM_KEY_LOCATION.RIGHT }, { code: "ShiftLeft", key: "Shift", location: DOM_KEY_LOCATION.LEFT }, { code: "ShiftRight", key: "Shift", location: DOM_KEY_LOCATION.RIGHT }, { code: "ControlLeft", key: "Control", location: DOM_KEY_LOCATION.LEFT }, { code: "ControlRight", key: "Control", location: DOM_KEY_LOCATION.RIGHT }, { code: "MetaLeft", key: "Meta", location: DOM_KEY_LOCATION.LEFT }, { code: "MetaRight", key: "Meta", location: DOM_KEY_LOCATION.RIGHT }, { code: "OSLeft", key: "OS", location: DOM_KEY_LOCATION.LEFT }, { code: "OSRight", key: "OS", location: DOM_KEY_LOCATION.RIGHT }, { code: "Tab", key: "Tab" }, { code: "CapsLock", key: "CapsLock" }, { code: "Backspace", key: "Backspace" }, { code: "Enter", key: "Enter" }, { code: "Escape", key: "Escape" }, { code: "ArrowUp", key: "ArrowUp" }, { code: "ArrowDown", key: "ArrowDown" }, { code: "ArrowLeft", key: "ArrowLeft" }, { code: "ArrowRight", key: "ArrowRight" }, { code: "Home", key: "Home" }, { code: "End", key: "End" }, { code: "Delete", key: "Delete" }, { code: "PageUp", key: "PageUp" }, { code: "PageDown", key: "PageDown" }, { code: "Fn", key: "Fn" }, { code: "Symbol", key: "Symbol" }, { code: "AltRight", key: "AltGraph" }];
    var defaultKeyMap2 = [{ name: "MouseLeft", pointerType: "mouse", button: "primary" }, { name: "MouseRight", pointerType: "mouse", button: "secondary" }, { name: "MouseMiddle", pointerType: "mouse", button: "auxiliary" }, { name: "TouchA", pointerType: "touch" }, { name: "TouchB", pointerType: "touch" }, { name: "TouchC", pointerType: "touch" }];
    function _define_property4(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var Buttons = class {
      getButtons() {
        let v2 = 0;
        for (let button of Object.keys(this.pressed))
          v2 |= 2 ** Number(button);
        return v2;
      }
      down(keyDef) {
        let button = getMouseButtonId(keyDef.button);
        if (button in this.pressed) {
          this.pressed[button].push(keyDef);
          return;
        }
        return this.pressed[button] = [keyDef], button;
      }
      up(keyDef) {
        let button = getMouseButtonId(keyDef.button);
        if (button in this.pressed && (this.pressed[button] = this.pressed[button].filter((k) => k.name !== keyDef.name), this.pressed[button].length === 0))
          return delete this.pressed[button], button;
      }
      constructor() {
        _define_property4(this, "pressed", {});
      }
    };
    var MouseButton = { primary: 0, secondary: 1, auxiliary: 2, back: 3, X1: 3, forward: 4, X2: 4 };
    function getMouseButtonId(button = 0) {
      return button in MouseButton ? MouseButton[button] : Number(button);
    }
    var MouseButtonFlip = { 1: 2, 2: 1 };
    function getMouseEventButton(button) {
      return button = getMouseButtonId(button), button in MouseButtonFlip ? MouseButtonFlip[button] : button;
    }
    function _define_property5(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var Device = class {
      get countPressed() {
        return this.pressedKeys.size;
      }
      isPressed(keyDef) {
        return this.pressedKeys.has(keyDef.name);
      }
      addPressed(keyDef) {
        return this.pressedKeys.add(keyDef.name);
      }
      removePressed(keyDef) {
        return this.pressedKeys.delete(keyDef.name);
      }
      constructor() {
        _define_property5(this, "pressedKeys", /* @__PURE__ */ new Set());
      }
    };
    function getTreeDiff(a, b2) {
      let treeA = [];
      for (let el = a; el; el = el.parentElement)
        treeA.push(el);
      let treeB = [];
      for (let el = b2; el; el = el.parentElement)
        treeB.push(el);
      let i = 0;
      for (; !(i >= treeA.length || i >= treeB.length || treeA[treeA.length - 1 - i] !== treeB[treeB.length - 1 - i]); i++)
        ;
      return [treeA.slice(0, treeA.length - i), treeB.slice(0, treeB.length - i), treeB.slice(treeB.length - i)];
    }
    function resolveCaretPosition({ target, node, offset }) {
      return hasOwnSelection(target) ? { node: target, offset: offset ?? getUIValue(target).length } : node ? { node, offset: offset ?? (node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length) } : findNodeAtTextOffset(target, offset);
    }
    function findNodeAtTextOffset(node, offset, isRoot = true) {
      let i = offset === void 0 ? node.childNodes.length - 1 : 0, step = offset === void 0 ? -1 : 1;
      for (; offset === void 0 ? i >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i <= node.childNodes.length; ) {
        if (offset && i === node.childNodes.length)
          throw new Error("The given offset is out of bounds.");
        let c = node.childNodes.item(i), text = String(c.textContent);
        if (text.length)
          if (offset !== void 0 && text.length < offset)
            offset -= text.length;
          else {
            if (c.nodeType === 1)
              return findNodeAtTextOffset(c, offset, false);
            if (c.nodeType === 3)
              return { node: c, offset: offset ?? c.nodeValue.length };
          }
        i += step;
      }
      return { node, offset: node.childNodes.length };
    }
    function setSelectionPerMouseDown({ document: document2, target, clickCount, node, offset }) {
      if (hasNoSelection(target))
        return;
      let targetHasOwnSelection = hasOwnSelection(target), text = String(targetHasOwnSelection ? getUIValue(target) : target.textContent), [start, end] = node ? [offset, offset] : getTextRange(text, offset, clickCount);
      if (targetHasOwnSelection)
        return setUISelection(target, { anchorOffset: start ?? text.length, focusOffset: end ?? text.length }), { node: target, start: start ?? 0, end: end ?? text.length };
      {
        let { node: startNode, offset: startOffset } = resolveCaretPosition({ target, node, offset: start }), { node: endNode, offset: endOffset } = resolveCaretPosition({ target, node, offset: end }), range = target.ownerDocument.createRange();
        try {
          range.setStart(startNode, startOffset), range.setEnd(endNode, endOffset);
        } catch {
          throw new Error("The given offset is out of bounds.");
        }
        let selection = document2.getSelection();
        return selection == null ? void 0 : selection.removeAllRanges(), selection == null ? void 0 : selection.addRange(range.cloneRange()), range;
      }
    }
    function getTextRange(text, pos, clickCount) {
      if (clickCount % 3 === 1 || text.length === 0)
        return [pos, pos];
      let textPos = pos ?? text.length;
      return clickCount % 3 === 2 ? [textPos - text.substr(0, pos).match(/(\w+|\s+|\W)?$/)[0].length, pos === void 0 ? pos : pos + text.substr(pos).match(/^(\w+|\s+|\W)?/)[0].length] : [textPos - text.substr(0, pos).match(/[^\r\n]*$/)[0].length, pos === void 0 ? pos : pos + text.substr(pos).match(/^[^\r\n]*/)[0].length];
    }
    function modifySelectionPerMouseMove(selectionRange, { document: document2, target, node, offset }) {
      let selectionFocus = resolveCaretPosition({ target, node, offset });
      if ("node" in selectionRange) {
        if (selectionFocus.node === selectionRange.node) {
          let anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start, focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
          setUISelection(selectionRange.node, { anchorOffset, focusOffset });
        }
      } else {
        let range = selectionRange.cloneRange(), cmp = range.comparePoint(selectionFocus.node, selectionFocus.offset);
        cmp < 0 ? range.setStart(selectionFocus.node, selectionFocus.offset) : cmp > 0 && range.setEnd(selectionFocus.node, selectionFocus.offset);
        let selection = document2.getSelection();
        selection == null ? void 0 : selection.removeAllRanges(), selection == null ? void 0 : selection.addRange(range.cloneRange());
      }
    }
    function isDifferentPointerPosition(positionA, positionB) {
      var _positionA_coords, _positionB_coords, _positionA_coords1, _positionB_coords1, _positionA_caret, _positionB_caret, _positionA_caret1, _positionB_caret1;
      return positionA.target !== positionB.target || ((_positionA_coords = positionA.coords) === null || _positionA_coords === void 0 ? void 0 : _positionA_coords.x) !== ((_positionB_coords = positionB.coords) === null || _positionB_coords === void 0 ? void 0 : _positionB_coords.y) || ((_positionA_coords1 = positionA.coords) === null || _positionA_coords1 === void 0 ? void 0 : _positionA_coords1.y) !== ((_positionB_coords1 = positionB.coords) === null || _positionB_coords1 === void 0 ? void 0 : _positionB_coords1.y) || ((_positionA_caret = positionA.caret) === null || _positionA_caret === void 0 ? void 0 : _positionA_caret.node) !== ((_positionB_caret = positionB.caret) === null || _positionB_caret === void 0 ? void 0 : _positionB_caret.node) || ((_positionA_caret1 = positionA.caret) === null || _positionA_caret1 === void 0 ? void 0 : _positionA_caret1.offset) !== ((_positionB_caret1 = positionB.caret) === null || _positionB_caret1 === void 0 ? void 0 : _positionB_caret1.offset);
    }
    function _define_property6(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var Mouse = class {
      move(instance, position) {
        let prevPosition = this.position, prevTarget = this.getTarget(instance);
        if (this.position = position, !isDifferentPointerPosition(prevPosition, position))
          return;
        let nextTarget = this.getTarget(instance), init = this.getEventInit("mousemove"), [leave, enter] = getTreeDiff(prevTarget, nextTarget);
        return { leave: () => {
          prevTarget !== nextTarget && (instance.dispatchUIEvent(prevTarget, "mouseout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "mouseleave", init)));
        }, enter: () => {
          prevTarget !== nextTarget && (instance.dispatchUIEvent(nextTarget, "mouseover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "mouseenter", init)));
        }, move: () => {
          instance.dispatchUIEvent(nextTarget, "mousemove", init), this.modifySelecting(instance);
        } };
      }
      down(instance, keyDef, pointer3) {
        let button = this.buttons.down(keyDef);
        if (button === void 0)
          return;
        let target = this.getTarget(instance);
        this.buttonDownTarget[button] = target;
        let disabled = isDisabled2(target), init = this.getEventInit("mousedown", keyDef.button);
        (disabled || instance.dispatchUIEvent(target, "mousedown", init)) && (this.startSelecting(instance, init.detail), focusElement(target)), !disabled && getMouseEventButton(keyDef.button) === 2 && instance.dispatchUIEvent(target, "contextmenu", this.getEventInit("contextmenu", keyDef.button, pointer3));
      }
      up(instance, keyDef, pointer3) {
        let button = this.buttons.up(keyDef);
        if (button === void 0)
          return;
        let target = this.getTarget(instance);
        if (!isDisabled2(target)) {
          instance.dispatchUIEvent(target, "mouseup", this.getEventInit("mouseup", keyDef.button)), this.endSelecting();
          let clickTarget = getTreeDiff(this.buttonDownTarget[button], target)[2][0];
          if (clickTarget) {
            let init = this.getEventInit("click", keyDef.button, pointer3);
            init.detail && (instance.dispatchUIEvent(clickTarget, init.button === 0 ? "click" : "auxclick", init), init.button === 0 && init.detail === 2 && instance.dispatchUIEvent(clickTarget, "dblclick", { ...this.getEventInit("dblclick", keyDef.button), detail: init.detail }));
          }
        }
      }
      resetClickCount() {
        this.clickCount.reset();
      }
      getEventInit(type3, button, pointer3) {
        let init = { ...this.position.coords };
        return pointer3 && (init.pointerId = pointer3.pointerId, init.pointerType = pointer3.pointerType, init.isPrimary = pointer3.isPrimary), init.button = getMouseEventButton(button), init.buttons = this.buttons.getButtons(), type3 === "mousedown" ? init.detail = this.clickCount.getOnDown(init.button) : type3 === "mouseup" ? init.detail = this.clickCount.getOnUp(init.button) : (type3 === "click" || type3 === "auxclick") && (init.detail = this.clickCount.incOnClick(init.button)), init;
      }
      getTarget(instance) {
        var _this_position_target;
        return (_this_position_target = this.position.target) !== null && _this_position_target !== void 0 ? _this_position_target : instance.config.document.body;
      }
      startSelecting(instance, clickCount) {
        var _this_position_caret, _this_position_caret1;
        this.selecting = setSelectionPerMouseDown({ document: instance.config.document, target: this.getTarget(instance), node: (_this_position_caret = this.position.caret) === null || _this_position_caret === void 0 ? void 0 : _this_position_caret.node, offset: (_this_position_caret1 = this.position.caret) === null || _this_position_caret1 === void 0 ? void 0 : _this_position_caret1.offset, clickCount });
      }
      modifySelecting(instance) {
        var _this_position_caret, _this_position_caret1;
        this.selecting && modifySelectionPerMouseMove(this.selecting, { document: instance.config.document, target: this.getTarget(instance), node: (_this_position_caret = this.position.caret) === null || _this_position_caret === void 0 ? void 0 : _this_position_caret.node, offset: (_this_position_caret1 = this.position.caret) === null || _this_position_caret1 === void 0 ? void 0 : _this_position_caret1.offset });
      }
      endSelecting() {
        this.selecting = void 0;
      }
      constructor() {
        _define_property6(this, "position", {}), _define_property6(this, "buttons", new Buttons()), _define_property6(this, "selecting", void 0), _define_property6(this, "buttonDownTarget", {}), _define_property6(this, "clickCount", new class {
          incOnClick(button) {
            let current = this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
            return this.count = this.count[button] === void 0 ? {} : { [button]: Number(this.count[button]) + 1 }, current;
          }
          getOnDown(button) {
            var _this_count_button;
            this.down = { [button]: (_this_count_button = this.count[button]) !== null && _this_count_button !== void 0 ? _this_count_button : 0 };
            var _this_count_button1;
            return this.count = { [button]: (_this_count_button1 = this.count[button]) !== null && _this_count_button1 !== void 0 ? _this_count_button1 : 0 }, Number(this.count[button]) + 1;
          }
          getOnUp(button) {
            return this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
          }
          reset() {
            this.count = {};
          }
          constructor() {
            _define_property6(this, "down", {}), _define_property6(this, "count", {});
          }
        }());
      }
    };
    function hasPointerEvents(instance, element) {
      var _checkPointerEvents;
      return ((_checkPointerEvents = checkPointerEvents(instance, element)) === null || _checkPointerEvents === void 0 ? void 0 : _checkPointerEvents.pointerEvents) !== "none";
    }
    function closestPointerEventsDeclaration(element) {
      let window2 = getWindow(element);
      for (let el = element, tree = []; el == null ? void 0 : el.ownerDocument; el = el.parentElement) {
        tree.push(el);
        let pointerEvents = window2.getComputedStyle(el).pointerEvents;
        if (pointerEvents && !["inherit", "unset"].includes(pointerEvents))
          return { pointerEvents, tree };
      }
    }
    var PointerEventsCheck = Symbol("Last check for pointer-events");
    function checkPointerEvents(instance, element) {
      let lastCheck = element[PointerEventsCheck];
      if (!(instance.config.pointerEventsCheck !== PointerEventsCheckLevel.Never && (!lastCheck || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachApiCall) && lastCheck[ApiLevel.Call] !== getLevelRef(instance, ApiLevel.Call) || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachTrigger) && lastCheck[ApiLevel.Trigger] !== getLevelRef(instance, ApiLevel.Trigger))))
        return lastCheck == null ? void 0 : lastCheck.result;
      let declaration = closestPointerEventsDeclaration(element);
      return element[PointerEventsCheck] = { [ApiLevel.Call]: getLevelRef(instance, ApiLevel.Call), [ApiLevel.Trigger]: getLevelRef(instance, ApiLevel.Trigger), result: declaration }, declaration;
    }
    function assertPointerEvents(instance, element) {
      let declaration = checkPointerEvents(instance, element);
      if ((declaration == null ? void 0 : declaration.pointerEvents) === "none")
        throw new Error([`Unable to perform pointer interaction as the element ${declaration.tree.length > 1 ? "inherits" : "has"} \`pointer-events: none\`:`, "", printTree(declaration.tree)].join(`
`));
    }
    function printTree(tree) {
      return tree.reverse().map((el, i) => ["".padEnd(i), el.tagName, el.id && `#${el.id}`, el.hasAttribute("data-testid") && `(testId=${el.getAttribute("data-testid")})`, getLabelDescr(el), tree.length > 1 && i === 0 && "  <-- This element declared `pointer-events: none`", tree.length > 1 && i === tree.length - 1 && "  <-- Asserted pointer events here"].filter(Boolean).join("")).join(`
`);
    }
    function getLabelDescr(element) {
      var _element_labels;
      let label;
      if (element.hasAttribute("aria-label"))
        label = element.getAttribute("aria-label");
      else if (element.hasAttribute("aria-labelledby")) {
        var _element_ownerDocument_getElementById_textContent, _element_ownerDocument_getElementById;
        label = (_element_ownerDocument_getElementById = element.ownerDocument.getElementById(element.getAttribute("aria-labelledby"))) === null || _element_ownerDocument_getElementById === void 0 || (_element_ownerDocument_getElementById_textContent = _element_ownerDocument_getElementById.textContent) === null || _element_ownerDocument_getElementById_textContent === void 0 ? void 0 : _element_ownerDocument_getElementById_textContent.trim();
      } else if (isElementType(element, ["button", "input", "meter", "output", "progress", "select", "textarea"]) && (!((_element_labels = element.labels) === null || _element_labels === void 0) && _element_labels.length))
        label = Array.from(element.labels).map((el) => {
          var _el_textContent;
          return (_el_textContent = el.textContent) === null || _el_textContent === void 0 ? void 0 : _el_textContent.trim();
        }).join("|");
      else if (isElementType(element, "button")) {
        var _element_textContent;
        label = (_element_textContent = element.textContent) === null || _element_textContent === void 0 ? void 0 : _element_textContent.trim();
      }
      return label = label == null ? void 0 : label.replace(/\n/g, "  "), Number(label == null ? void 0 : label.length) > 30 && (label = `${label == null ? void 0 : label.substring(0, 29)}\u2026`), label ? `(label=${label})` : "";
    }
    function hasBitFlag(conf, flag) {
      return (conf & flag) > 0;
    }
    function _define_property7(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var Pointer = class {
      init(instance, position) {
        this.position = position;
        let target = this.getTarget(instance), [, enter] = getTreeDiff(null, target), init = this.getEventInit();
        return assertPointerEvents(instance, target), instance.dispatchUIEvent(target, "pointerover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init)), this;
      }
      move(instance, position) {
        let prevPosition = this.position, prevTarget = this.getTarget(instance);
        if (this.position = position, !isDifferentPointerPosition(prevPosition, position))
          return;
        let nextTarget = this.getTarget(instance), init = this.getEventInit(), [leave, enter] = getTreeDiff(prevTarget, nextTarget);
        return { leave: () => {
          hasPointerEvents(instance, prevTarget) && prevTarget !== nextTarget && (instance.dispatchUIEvent(prevTarget, "pointerout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init)));
        }, enter: () => {
          assertPointerEvents(instance, nextTarget), prevTarget !== nextTarget && (instance.dispatchUIEvent(nextTarget, "pointerover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init)));
        }, move: () => {
          instance.dispatchUIEvent(nextTarget, "pointermove", init);
        } };
      }
      down(instance, _keyDef) {
        if (this.isDown)
          return;
        let target = this.getTarget(instance);
        assertPointerEvents(instance, target), this.isDown = true, this.isPrevented = !instance.dispatchUIEvent(target, "pointerdown", this.getEventInit());
      }
      up(instance, _keyDef) {
        if (!this.isDown)
          return;
        let target = this.getTarget(instance);
        assertPointerEvents(instance, target), this.isDown = false, instance.dispatchUIEvent(target, "pointerup", this.getEventInit());
      }
      release(instance) {
        let target = this.getTarget(instance), [leave] = getTreeDiff(target, null), init = this.getEventInit();
        hasPointerEvents(instance, target) && (instance.dispatchUIEvent(target, "pointerout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init))), this.isCancelled = true;
      }
      getTarget(instance) {
        var _this_position_target;
        return (_this_position_target = this.position.target) !== null && _this_position_target !== void 0 ? _this_position_target : instance.config.document.body;
      }
      getEventInit() {
        return { ...this.position.coords, pointerId: this.pointerId, pointerType: this.pointerType, isPrimary: this.isPrimary };
      }
      constructor({ pointerId, pointerType, isPrimary }) {
        _define_property7(this, "pointerId", void 0), _define_property7(this, "pointerType", void 0), _define_property7(this, "isPrimary", void 0), _define_property7(this, "isMultitouch", false), _define_property7(this, "isCancelled", false), _define_property7(this, "isDown", false), _define_property7(this, "isPrevented", false), _define_property7(this, "position", {}), this.pointerId = pointerId, this.pointerType = pointerType, this.isPrimary = isPrimary, this.isMultitouch = !isPrimary;
      }
    };
    function _define_property8(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var PointerHost = class {
      isKeyPressed(keyDef) {
        return this.devices.get(keyDef.pointerType).isPressed(keyDef);
      }
      async press(instance, keyDef, position) {
        let pointerName = this.getPointerName(keyDef), pointer3 = keyDef.pointerType === "touch" ? this.pointers.new(pointerName, keyDef).init(instance, position) : this.pointers.get(pointerName);
        pointer3.position = position, pointer3.pointerType !== "touch" && (this.mouse.position = position), this.devices.get(keyDef.pointerType).addPressed(keyDef), this.buttons.down(keyDef), pointer3.down(instance, keyDef), pointer3.pointerType !== "touch" && !pointer3.isPrevented && this.mouse.down(instance, keyDef, pointer3);
      }
      async move(instance, pointerName, position) {
        let pointer3 = this.pointers.get(pointerName), pointermove = pointer3.move(instance, position), mousemove = pointer3.pointerType === "touch" || pointer3.isPrevented && pointer3.isDown ? void 0 : this.mouse.move(instance, position);
        pointermove == null ? void 0 : pointermove.leave(), mousemove == null ? void 0 : mousemove.leave(), pointermove == null ? void 0 : pointermove.enter(), mousemove == null ? void 0 : mousemove.enter(), pointermove == null ? void 0 : pointermove.move(), mousemove == null ? void 0 : mousemove.move();
      }
      async release(instance, keyDef, position) {
        let device = this.devices.get(keyDef.pointerType);
        device.removePressed(keyDef), this.buttons.up(keyDef);
        let pointer3 = this.pointers.get(this.getPointerName(keyDef));
        if (pointer3.position = position, pointer3.pointerType !== "touch" && (this.mouse.position = position), device.countPressed === 0 && pointer3.up(instance, keyDef), pointer3.pointerType === "touch" && pointer3.release(instance), !pointer3.isPrevented) {
          if (pointer3.pointerType === "touch" && !pointer3.isMultitouch) {
            let mousemove = this.mouse.move(instance, pointer3.position);
            mousemove == null ? void 0 : mousemove.leave(), mousemove == null ? void 0 : mousemove.enter(), mousemove == null ? void 0 : mousemove.move(), this.mouse.down(instance, keyDef, pointer3);
          }
          if (!pointer3.isMultitouch) {
            let mousemove = this.mouse.move(instance, pointer3.position);
            mousemove == null ? void 0 : mousemove.leave(), mousemove == null ? void 0 : mousemove.enter(), mousemove == null ? void 0 : mousemove.move(), this.mouse.up(instance, keyDef, pointer3);
          }
        }
      }
      getPointerName(keyDef) {
        return keyDef.pointerType === "touch" ? keyDef.name : keyDef.pointerType;
      }
      getPreviousPosition(pointerName) {
        return this.pointers.has(pointerName) ? this.pointers.get(pointerName).position : void 0;
      }
      resetClickCount() {
        this.mouse.resetClickCount();
      }
      getMouseTarget(instance) {
        var _this_mouse_position_target;
        return (_this_mouse_position_target = this.mouse.position.target) !== null && _this_mouse_position_target !== void 0 ? _this_mouse_position_target : instance.config.document.body;
      }
      setMousePosition(position) {
        this.mouse.position = position, this.pointers.get("mouse").position = position;
      }
      constructor(system) {
        _define_property8(this, "system", void 0), _define_property8(this, "mouse", void 0), _define_property8(this, "buttons", void 0), _define_property8(this, "devices", new class {
          get(k) {
            var _this_registry, _k, _;
            return (_ = (_this_registry = this.registry)[_k = k]) !== null && _ !== void 0 || (_this_registry[_k] = new Device()), this.registry[k];
          }
          constructor() {
            _define_property8(this, "registry", {});
          }
        }()), _define_property8(this, "pointers", new class {
          new(pointerName, keyDef) {
            let isPrimary = keyDef.pointerType !== "touch" || !Object.values(this.registry).some((p2) => p2.pointerType === "touch" && !p2.isCancelled);
            return isPrimary || Object.values(this.registry).forEach((p2) => {
              p2.pointerType === keyDef.pointerType && !p2.isCancelled && (p2.isMultitouch = true);
            }), this.registry[pointerName] = new Pointer({ pointerId: this.nextId++, pointerType: keyDef.pointerType, isPrimary }), this.registry[pointerName];
          }
          get(pointerName) {
            if (!this.has(pointerName))
              throw new Error(`Trying to access pointer "${pointerName}" which does not exist.`);
            return this.registry[pointerName];
          }
          has(pointerName) {
            return pointerName in this.registry;
          }
          constructor() {
            _define_property8(this, "registry", { mouse: new Pointer({ pointerId: 1, pointerType: "mouse", isPrimary: true }) }), _define_property8(this, "nextId", 2);
          }
        }()), this.system = system, this.buttons = new Buttons(), this.mouse = new Mouse();
      }
    };
    function _define_property9(obj, key2, value2) {
      return key2 in obj ? Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true }) : obj[key2] = value2, obj;
    }
    var System = class {
      getUIEventModifiers() {
        return { altKey: this.keyboard.modifiers.Alt, ctrlKey: this.keyboard.modifiers.Control, metaKey: this.keyboard.modifiers.Meta, shiftKey: this.keyboard.modifiers.Shift, modifierAltGraph: this.keyboard.modifiers.AltGraph, modifierCapsLock: this.keyboard.modifiers.CapsLock, modifierFn: this.keyboard.modifiers.Fn, modifierFnLock: this.keyboard.modifiers.FnLock, modifierNumLock: this.keyboard.modifiers.NumLock, modifierScrollLock: this.keyboard.modifiers.ScrollLock, modifierSymbol: this.keyboard.modifiers.Symbol, modifierSymbolLock: this.keyboard.modifiers.SymbolLock };
      }
      constructor() {
        _define_property9(this, "keyboard", new KeyboardHost(this)), _define_property9(this, "pointer", new PointerHost(this));
      }
    };
    async function click(element) {
      let pointerIn = [];
      return this.config.skipHover || pointerIn.push({ target: element }), pointerIn.push({ keys: "[MouseLeft]", target: element }), this.pointer(pointerIn);
    }
    async function dblClick(element) {
      return this.pointer([{ target: element }, "[MouseLeft][MouseLeft]"]);
    }
    async function tripleClick(element) {
      return this.pointer([{ target: element }, "[MouseLeft][MouseLeft][MouseLeft]"]);
    }
    async function hover(element) {
      return this.pointer({ target: element });
    }
    async function unhover(element) {
      return assertPointerEvents(this, this.system.pointer.getMouseTarget(this)), this.pointer({ target: element.ownerDocument.body });
    }
    async function tab({ shift } = {}) {
      return this.keyboard(shift === true ? "{Shift>}{Tab}{/Shift}" : shift === false ? "[/ShiftLeft][/ShiftRight]{Tab}" : "{Tab}");
    }
    function parseKeyDef(keyboardMap, text) {
      let defs = [];
      do {
        let { type: type3, descriptor, consumedLength, releasePrevious, releaseSelf = true, repeat } = readNextDescriptor(text, "keyboard");
        var _keyboardMap_find;
        let keyDef = (_keyboardMap_find = keyboardMap.find((def) => {
          if (type3 === "[") {
            var _def_code;
            return ((_def_code = def.code) === null || _def_code === void 0 ? void 0 : _def_code.toLowerCase()) === descriptor.toLowerCase();
          } else if (type3 === "{") {
            var _def_key;
            return ((_def_key = def.key) === null || _def_key === void 0 ? void 0 : _def_key.toLowerCase()) === descriptor.toLowerCase();
          }
          return def.key === descriptor;
        })) !== null && _keyboardMap_find !== void 0 ? _keyboardMap_find : { key: "Unknown", code: "Unknown", [type3 === "[" ? "code" : "key"]: descriptor };
        defs.push({ keyDef, releasePrevious, releaseSelf, repeat }), text = text.slice(consumedLength);
      } while (text);
      return defs;
    }
    async function keyboard(text) {
      let actions = parseKeyDef(this.config.keyboardMap, text);
      for (let i = 0; i < actions.length; i++)
        await wait(this.config), await keyboardAction(this, actions[i]);
    }
    async function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {
      let { system } = instance;
      if (system.keyboard.isKeyPressed(keyDef) && await system.keyboard.keyup(instance, keyDef), !releasePrevious) {
        for (let i = 1; i <= repeat; i++)
          await system.keyboard.keydown(instance, keyDef), i < repeat && await wait(instance.config);
        releaseSelf && await system.keyboard.keyup(instance, keyDef);
      }
    }
    async function releaseAllKeys(instance) {
      for (let k of instance.system.keyboard.getPressedKeys())
        await instance.system.keyboard.keyup(instance, k);
    }
    function copySelection(target) {
      let data = hasOwnSelection(target) ? { "text/plain": readSelectedValueFromInput(target) } : { "text/plain": String(target.ownerDocument.getSelection()) }, dt = createDataTransfer(getWindow(target));
      for (let type3 in data)
        data[type3] && dt.setData(type3, data[type3]);
      return dt;
    }
    function readSelectedValueFromInput(target) {
      let sel = getUISelection(target);
      return getUIValue(target).substring(sel.startOffset, sel.endOffset);
    }
    async function copy() {
      let doc = this.config.document;
      var _doc_activeElement;
      let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body, clipboardData = copySelection(target);
      if (clipboardData.items.length !== 0)
        return this.dispatchUIEvent(target, "copy", { clipboardData }) && this.config.writeToClipboard && await writeDataTransferToClipboard(doc, clipboardData), clipboardData;
    }
    async function cut() {
      let doc = this.config.document;
      var _doc_activeElement;
      let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body, clipboardData = copySelection(target);
      if (clipboardData.items.length !== 0)
        return this.dispatchUIEvent(target, "cut", { clipboardData }) && this.config.writeToClipboard && await writeDataTransferToClipboard(target.ownerDocument, clipboardData), clipboardData;
    }
    async function paste(clipboardData) {
      let doc = this.config.document;
      var _doc_activeElement;
      let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body;
      var _ref;
      let dataTransfer = (_ref = typeof clipboardData == "string" ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && _ref !== void 0 ? _ref : await readDataTransferFromClipboard(doc).catch(() => {
        throw new Error("`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.");
      });
      this.dispatchUIEvent(target, "paste", { clipboardData: dataTransfer });
    }
    function getClipboardDataFromString(doc, text) {
      let dt = createDataTransfer(getWindow(doc));
      return dt.setData("text", text), dt;
    }
    function parseKeyDef2(pointerMap, keys2) {
      let defs = [];
      do {
        let { descriptor, consumedLength, releasePrevious, releaseSelf = true } = readNextDescriptor(keys2, "pointer"), keyDef = pointerMap.find((p2) => p2.name === descriptor);
        keyDef && defs.push({ keyDef, releasePrevious, releaseSelf }), keys2 = keys2.slice(consumedLength);
      } while (keys2);
      return defs;
    }
    async function pointer(input2) {
      let { pointerMap } = this.config, actions = [];
      (Array.isArray(input2) ? input2 : [input2]).forEach((actionInput) => {
        typeof actionInput == "string" ? actions.push(...parseKeyDef2(pointerMap, actionInput)) : "keys" in actionInput ? actions.push(...parseKeyDef2(pointerMap, actionInput.keys).map((i) => ({ ...actionInput, ...i }))) : actions.push(actionInput);
      });
      for (let i = 0; i < actions.length; i++)
        await wait(this.config), await pointerAction(this, actions[i]);
      this.system.pointer.resetClickCount();
    }
    async function pointerAction(instance, action) {
      var _previousPosition_caret, _previousPosition_caret1;
      let pointerName = "pointerName" in action && action.pointerName ? action.pointerName : "keyDef" in action ? instance.system.pointer.getPointerName(action.keyDef) : "mouse", previousPosition = instance.system.pointer.getPreviousPosition(pointerName);
      var _action_target, _action_coords, _action_node, _action_offset;
      let position = { target: (_action_target = action.target) !== null && _action_target !== void 0 ? _action_target : getPrevTarget(instance, previousPosition), coords: (_action_coords = action.coords) !== null && _action_coords !== void 0 ? _action_coords : previousPosition == null ? void 0 : previousPosition.coords, caret: { node: (_action_node = action.node) !== null && _action_node !== void 0 ? _action_node : hasCaretPosition(action) || previousPosition == null || (_previousPosition_caret = previousPosition.caret) === null || _previousPosition_caret === void 0 ? void 0 : _previousPosition_caret.node, offset: (_action_offset = action.offset) !== null && _action_offset !== void 0 ? _action_offset : hasCaretPosition(action) || previousPosition == null || (_previousPosition_caret1 = previousPosition.caret) === null || _previousPosition_caret1 === void 0 ? void 0 : _previousPosition_caret1.offset } };
      "keyDef" in action ? (instance.system.pointer.isKeyPressed(action.keyDef) && (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.release(instance, action.keyDef, position)), action.releasePrevious || (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.press(instance, action.keyDef, position), action.releaseSelf && (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.release(instance, action.keyDef, position)))) : (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.move(instance, pointerName, position));
    }
    function hasCaretPosition(action) {
      var _action_target, _ref;
      return !!((_ref = (_action_target = action.target) !== null && _action_target !== void 0 ? _action_target : action.node) !== null && _ref !== void 0 ? _ref : action.offset !== void 0);
    }
    function getPrevTarget(instance, position) {
      if (!position)
        throw new Error("This pointer has no previous position. Provide a target property!");
      var _position_target;
      return (_position_target = position.target) !== null && _position_target !== void 0 ? _position_target : instance.config.document.body;
    }
    async function clear(element) {
      if (!isEditable(element) || isDisabled2(element))
        throw new Error("clear()` is only supported on editable elements.");
      if (focusElement(element), element.ownerDocument.activeElement !== element)
        throw new Error("The element to be cleared could not be focused.");
      if (selectAll(element), !isAllSelected(element))
        throw new Error("The element content to be cleared could not be selected.");
      input(this, element, "", "deleteContentBackward");
    }
    async function selectOptions(select, values) {
      return selectOptionsBase.call(this, true, select, values);
    }
    async function deselectOptions(select, values) {
      return selectOptionsBase.call(this, false, select, values);
    }
    async function selectOptionsBase(newValue, select, values) {
      if (!newValue && !select.multiple)
        throw getConfig().getElementError("Unable to deselect an option in a non-multiple select. Use selectOptions to change the selection instead.", select);
      let valArray = Array.isArray(values) ? values : [values], allOptions = Array.from(select.querySelectorAll('option, [role="option"]')), selectedOptions = valArray.map((val) => {
        if (typeof val != "string" && allOptions.includes(val))
          return val;
        {
          let matchingOption = allOptions.find((o) => o.value === val || o.innerHTML === val);
          if (matchingOption)
            return matchingOption;
          throw getConfig().getElementError(`Value "${String(val)}" not found in options`, select);
        }
      }).filter((option) => !isDisabled2(option));
      if (isDisabled2(select) || !selectedOptions.length)
        return;
      let selectOption = (option) => {
        option.selected = newValue, this.dispatchUIEvent(select, "input", { bubbles: true, cancelable: false, composed: true }), this.dispatchUIEvent(select, "change");
      };
      if (isElementType(select, "select"))
        if (select.multiple)
          for (let option of selectedOptions) {
            let withPointerEvents = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, option);
            withPointerEvents && (this.dispatchUIEvent(option, "pointerover"), this.dispatchUIEvent(select, "pointerenter"), this.dispatchUIEvent(option, "mouseover"), this.dispatchUIEvent(select, "mouseenter"), this.dispatchUIEvent(option, "pointermove"), this.dispatchUIEvent(option, "mousemove"), this.dispatchUIEvent(option, "pointerdown"), this.dispatchUIEvent(option, "mousedown")), focusElement(select), withPointerEvents && (this.dispatchUIEvent(option, "pointerup"), this.dispatchUIEvent(option, "mouseup")), selectOption(option), withPointerEvents && this.dispatchUIEvent(option, "click"), await wait(this.config);
          }
        else if (selectedOptions.length === 1) {
          let withPointerEvents = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, select);
          withPointerEvents ? await this.click(select) : focusElement(select), selectOption(selectedOptions[0]), withPointerEvents && (this.dispatchUIEvent(select, "pointerover"), this.dispatchUIEvent(select, "pointerenter"), this.dispatchUIEvent(select, "mouseover"), this.dispatchUIEvent(select, "mouseenter"), this.dispatchUIEvent(select, "pointerup"), this.dispatchUIEvent(select, "mouseup"), this.dispatchUIEvent(select, "click")), await wait(this.config);
        } else
          throw getConfig().getElementError("Cannot select multiple options on a non-multiple select", select);
      else if (select.getAttribute("role") === "listbox")
        for (let option of selectedOptions)
          await this.click(option), await this.unhover(option);
      else
        throw getConfig().getElementError("Cannot select options on elements that are neither select nor listbox elements", select);
    }
    async function type(element, text, { skipClick = this.config.skipClick, skipAutoClose = this.config.skipAutoClose, initialSelectionStart, initialSelectionEnd } = {}) {
      element.disabled || (skipClick || await this.click(element), initialSelectionStart !== void 0 && setSelectionRange(element, initialSelectionStart, initialSelectionEnd ?? initialSelectionStart), await this.keyboard(text), skipAutoClose || await releaseAllKeys(this));
    }
    var fakeFiles = Symbol("files and value properties are mocked");
    function restoreProperty(obj, prop, descriptor) {
      descriptor ? Object.defineProperty(obj, prop, descriptor) : delete obj[prop];
    }
    function setFiles(el, files) {
      var _el_fakeFiles;
      (_el_fakeFiles = el[fakeFiles]) === null || _el_fakeFiles === void 0 || _el_fakeFiles.restore();
      let typeDescr = Object.getOwnPropertyDescriptor(el, "type"), valueDescr = Object.getOwnPropertyDescriptor(el, "value"), filesDescr = Object.getOwnPropertyDescriptor(el, "files");
      function restore() {
        restoreProperty(el, "type", typeDescr), restoreProperty(el, "value", valueDescr), restoreProperty(el, "files", filesDescr);
      }
      el[fakeFiles] = { restore }, Object.defineProperties(el, { files: { configurable: true, get: () => files }, value: { configurable: true, get: () => files.length ? `C:\\fakepath\\${files[0].name}` : "", set(v2) {
        if (v2 === "")
          restore();
        else {
          var _valueDescr_set;
          valueDescr == null || (_valueDescr_set = valueDescr.set) === null || _valueDescr_set === void 0 || _valueDescr_set.call(el, v2);
        }
      } }, type: { configurable: true, get: () => "file", set(v2) {
        v2 !== "file" && (restore(), el.type = v2);
      } } });
    }
    async function upload(element, fileOrFiles) {
      let input2 = isElementType(element, "label") ? element.control : element;
      if (!input2 || !isElementType(input2, "input", { type: "file" }))
        throw new TypeError(`The ${input2 === element ? "given" : "associated"} ${input2 == null ? void 0 : input2.tagName} element does not accept file uploads`);
      if (isDisabled2(element))
        return;
      let files = (Array.isArray(fileOrFiles) ? fileOrFiles : [fileOrFiles]).filter((file) => !this.config.applyAccept || isAcceptableFile(file, input2.accept)).slice(0, input2.multiple ? void 0 : 1), fileDialog = () => {
        var _input_files;
        files.length === ((_input_files = input2.files) === null || _input_files === void 0 ? void 0 : _input_files.length) && files.every((f2, i) => {
          var _input_files2;
          return f2 === ((_input_files2 = input2.files) === null || _input_files2 === void 0 ? void 0 : _input_files2.item(i));
        }) || (setFiles(input2, createFileList(getWindow(element), files)), this.dispatchUIEvent(input2, "input"), this.dispatchUIEvent(input2, "change"));
      };
      input2.addEventListener("fileDialog", fileDialog), await this.click(element), input2.removeEventListener("fileDialog", fileDialog);
    }
    function isAcceptableFile(file, accept) {
      if (!accept)
        return true;
      let wildcards = ["audio/*", "image/*", "video/*"];
      return accept.split(",").some((acceptToken) => acceptToken.startsWith(".") ? file.name.endsWith(acceptToken) : wildcards.includes(acceptToken) ? file.type.startsWith(acceptToken.substr(0, acceptToken.length - 1)) : file.type === acceptToken);
    }
    var userEventApi = { click, dblClick, tripleClick, hover, unhover, tab, keyboard, copy, cut, paste, pointer, clear, deselectOptions, selectOptions, type, upload };
    function wrapAsync(implementation) {
      return getConfig().asyncWrapper(implementation);
    }
    var defaultOptionsDirect = { applyAccept: true, autoModify: true, delay: 0, document: globalThis.document, keyboardMap: defaultKeyMap, pointerMap: defaultKeyMap2, pointerEventsCheck: PointerEventsCheckLevel.EachApiCall, skipAutoClose: false, skipClick: false, skipHover: false, writeToClipboard: false, advanceTimers: () => Promise.resolve() };
    var defaultOptionsSetup = { ...defaultOptionsDirect, writeToClipboard: true };
    function createConfig(options2 = {}, defaults = defaultOptionsSetup, node) {
      let document2 = getDocument2(options2, node, defaults);
      return { ...defaults, ...options2, document: document2 };
    }
    function setupMain(options2 = {}) {
      let config3 = createConfig(options2);
      prepareDocument(config3.document);
      var _config_document_defaultView;
      let view = (_config_document_defaultView = config3.document.defaultView) !== null && _config_document_defaultView !== void 0 ? _config_document_defaultView : globalThis.window;
      return attachClipboardStubToView(view), createInstance(config3).api;
    }
    function setupDirect({ keyboardState, pointerState, ...options2 } = {}, node) {
      let config3 = createConfig(options2, defaultOptionsDirect, node);
      prepareDocument(config3.document);
      var _ref;
      let system = (_ref = pointerState ?? keyboardState) !== null && _ref !== void 0 ? _ref : new System();
      return { api: createInstance(config3, system).api, system };
    }
    function setupSub(options2) {
      return createInstance({ ...this.config, ...options2 }, this.system).api;
    }
    function wrapAndBindImpl(instance, impl) {
      function method(...args2) {
        return setLevelRef(instance, ApiLevel.Call), wrapAsync(() => impl.apply(instance, args2).then(async (ret) => (await wait(instance.config), ret)));
      }
      return Object.defineProperty(method, "name", { get: () => impl.name }), method;
    }
    function createInstance(config3, system = new System()) {
      let instance = {};
      return Object.assign(instance, { config: config3, dispatchEvent: dispatchEvent.bind(instance), dispatchUIEvent: dispatchUIEvent.bind(instance), system, levelRefs: {}, ...userEventApi }), { instance, api: { ...Object.fromEntries(Object.entries(userEventApi).map(([name2, api]) => [name2, wrapAndBindImpl(instance, api)])), setup: setupSub.bind(instance) } };
    }
    function getDocument2(options2, node, defaults) {
      var _options_document, _ref;
      return (_ref = (_options_document = options2.document) !== null && _options_document !== void 0 ? _options_document : node && getDocumentFromNode(node)) !== null && _ref !== void 0 ? _ref : defaults.document;
    }
    var directApi_exports = {};
    __export2(directApi_exports, { clear: () => clear2, click: () => click2, copy: () => copy2, cut: () => cut2, dblClick: () => dblClick2, deselectOptions: () => deselectOptions2, hover: () => hover2, keyboard: () => keyboard2, paste: () => paste2, pointer: () => pointer2, selectOptions: () => selectOptions2, tab: () => tab2, tripleClick: () => tripleClick2, type: () => type2, unhover: () => unhover2, upload: () => upload2 });
    function clear2(element) {
      return setupDirect().api.clear(element);
    }
    function click2(element, options2 = {}) {
      return setupDirect(options2, element).api.click(element);
    }
    function copy2(options2 = {}) {
      return setupDirect(options2).api.copy();
    }
    function cut2(options2 = {}) {
      return setupDirect(options2).api.cut();
    }
    function dblClick2(element, options2 = {}) {
      return setupDirect(options2).api.dblClick(element);
    }
    function deselectOptions2(select, values, options2 = {}) {
      return setupDirect(options2).api.deselectOptions(select, values);
    }
    function hover2(element, options2 = {}) {
      return setupDirect(options2).api.hover(element);
    }
    async function keyboard2(text, options2 = {}) {
      let { api, system } = setupDirect(options2);
      return api.keyboard(text).then(() => system);
    }
    async function pointer2(input2, options2 = {}) {
      let { api, system } = setupDirect(options2);
      return api.pointer(input2).then(() => system);
    }
    function paste2(clipboardData, options2) {
      return setupDirect(options2).api.paste(clipboardData);
    }
    function selectOptions2(select, values, options2 = {}) {
      return setupDirect(options2).api.selectOptions(select, values);
    }
    function tripleClick2(element, options2 = {}) {
      return setupDirect(options2).api.tripleClick(element);
    }
    function type2(element, text, options2 = {}) {
      return setupDirect(options2, element).api.type(element, text, options2);
    }
    function unhover2(element, options2 = {}) {
      let { api, system } = setupDirect(options2);
      return system.pointer.setMousePosition({ target: element }), api.unhover(element);
    }
    function upload2(element, fileOrFiles, options2 = {}) {
      return setupDirect(options2).api.upload(element, fileOrFiles);
    }
    function tab2(options2 = {}) {
      return setupDirect().api.tab(options2);
    }
    var userEvent = { ...directApi_exports, setup: setupMain };
    function dedent2(templ) {
      for (var values = [], _i = 1; _i < arguments.length; _i++)
        values[_i - 1] = arguments[_i];
      var strings = Array.from(typeof templ == "string" ? [templ] : templ);
      strings[strings.length - 1] = strings[strings.length - 1].replace(/\r?\n([\t ]*)$/, "");
      var indentLengths = strings.reduce(function(arr, str) {
        var matches3 = str.match(/\n([\t ]+|(?!\s).)/g);
        return matches3 ? arr.concat(matches3.map(function(match) {
          var _a, _b;
          return (_b = (_a = match.match(/[\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
        })) : arr;
      }, []);
      if (indentLengths.length) {
        var pattern_1 = new RegExp(`
[	 ]{` + Math.min.apply(Math, indentLengths) + "}", "g");
        strings = strings.map(function(str) {
          return str.replace(pattern_1, `
`);
        });
      }
      strings[0] = strings[0].replace(/^\r?\n/, "");
      var string2 = strings[0];
      return values.forEach(function(value2, i) {
        var endentations = string2.match(/(?:^|\n)( *)$/), endentation = endentations ? endentations[1] : "", indentedValue = value2;
        typeof value2 == "string" && value2.includes(`
`) && (indentedValue = String(value2).split(`
`).map(function(str, i2) {
          return i2 === 0 ? str : "" + endentation + str;
        }).join(`
`)), string2 += indentedValue + strings[i + 1];
      }), string2;
    }
    var esm_default2 = dedent2;
    var testingLibrary = (0, import_instrumenter.instrument)({ ...dom_esm_exports }, { intercept: (method, path) => path[0] === "fireEvent" || method.startsWith("find") || method.startsWith("waitFor") });
    testingLibrary.screen = new Proxy(testingLibrary.screen, { get(target, prop, receiver) {
      return import_client_logger.once.warn(esm_default2`
          You are using Testing Library's \`screen\` object. Use \`within(canvasElement)\` instead.
          More info: https://storybook.js.org/docs/react/essentials/interactions
        `), Reflect.get(target, prop, receiver);
    } });
    var { buildQueries: buildQueries2, configure: configure2, createEvent: createEvent3, fireEvent: fireEvent2, findAllByAltText: findAllByAltText2, findAllByDisplayValue: findAllByDisplayValue2, findAllByLabelText: findAllByLabelText2, findAllByPlaceholderText: findAllByPlaceholderText2, findAllByRole: findAllByRole2, findAllByTestId: findAllByTestId2, findAllByText: findAllByText2, findAllByTitle: findAllByTitle2, findByAltText: findByAltText2, findByDisplayValue: findByDisplayValue2, findByLabelText: findByLabelText2, findByPlaceholderText: findByPlaceholderText2, findByRole: findByRole2, findByTestId: findByTestId2, findByText: findByText2, findByTitle: findByTitle2, getAllByAltText: getAllByAltText2, getAllByDisplayValue: getAllByDisplayValue2, getAllByLabelText: getAllByLabelText2, getAllByPlaceholderText: getAllByPlaceholderText2, getAllByRole: getAllByRole2, getAllByTestId: getAllByTestId2, getAllByText: getAllByText2, getAllByTitle: getAllByTitle2, getByAltText: getByAltText2, getByDisplayValue: getByDisplayValue2, getByLabelText: getByLabelText2, getByPlaceholderText: getByPlaceholderText2, getByRole: getByRole2, getByTestId: getByTestId2, getByText: getByText2, getByTitle: getByTitle2, getConfig: getConfig2, getDefaultNormalizer: getDefaultNormalizer2, getElementError: getElementError2, getNodeText: getNodeText2, getQueriesForElement: getQueriesForElement2, getRoles: getRoles2, getSuggestedQuery: getSuggestedQuery2, isInaccessible: isInaccessible2, logDOM: logDOM2, logRoles: logRoles2, prettyDOM: prettyDOM2, queries: queries2, queryAllByAltText: queryAllByAltText2, queryAllByAttribute: queryAllByAttribute2, queryAllByDisplayValue: queryAllByDisplayValue2, queryAllByLabelText: queryAllByLabelText2, queryAllByPlaceholderText: queryAllByPlaceholderText2, queryAllByRole: queryAllByRole2, queryAllByTestId: queryAllByTestId2, queryAllByText: queryAllByText2, queryAllByTitle: queryAllByTitle2, queryByAltText: queryByAltText2, queryByAttribute: queryByAttribute2, queryByDisplayValue: queryByDisplayValue2, queryByLabelText: queryByLabelText2, queryByPlaceholderText: queryByPlaceholderText2, queryByRole: queryByRole2, queryByTestId: queryByTestId2, queryByText: queryByText2, queryByTitle: queryByTitle2, queryHelpers: queryHelpers2, screen: screen2, waitFor: waitFor2, waitForElementToBeRemoved: waitForElementToBeRemoved2, within, prettyFormat: prettyFormat2 } = testingLibrary;
    var { userEvent: userEvent2 } = (0, import_instrumenter.instrument)({ userEvent }, { intercept: true });
    var { expect: expect3 } = (0, import_instrumenter2.instrument)({ expect: expect2 }, { getKeys: (obj, depth) => {
      let privateApi = ["assert", "__methods", "__flags", "_obj"];
      if (obj.constructor === chai_default.Assertion) {
        let keys2 = Object.keys(Object.getPrototypeOf(obj)).filter((it) => !privateApi.includes(it));
        return depth > 2 ? keys2 : [...keys2, "not"];
      }
      return Object.keys(obj);
    }, intercept: (method) => method !== "expect" });
    var resetAllMocksLoader = ({ parameters }) => {
      var _a, _b, _c;
      ((_a = parameters == null ? void 0 : parameters.test) == null ? void 0 : _a.mockReset) === true ? resetAllMocks() : ((_b = parameters == null ? void 0 : parameters.test) == null ? void 0 : _b.clearMocks) === true ? clearAllMocks() : ((_c = parameters == null ? void 0 : parameters.test) == null ? void 0 : _c.restoreMocks) !== false && restoreAllMocks();
    };
    var traverseArgs = (value2, depth = 0, key2) => {
      var _a;
      if (depth > 5 || value2 == null)
        return value2;
      if (isMockFunction(value2))
        return key2 && value2.mockName(key2), value2;
      if (typeof value2 == "function" && "isAction" in value2 && value2.isAction && !("implicit" in value2 && value2.implicit)) {
        let mock = fn22(value2);
        return key2 && mock.mockName(key2), mock;
      }
      if (Array.isArray(value2))
        return depth++, value2.map((item) => traverseArgs(item, depth));
      if (typeof value2 == "object" && value2.constructor === Object) {
        depth++;
        for (let [k, v2] of Object.entries(value2))
          ((_a = Object.getOwnPropertyDescriptor(value2, k)) == null ? void 0 : _a.writable) && (value2[k] = traverseArgs(v2, depth, k));
        return value2;
      }
      return value2;
    };
    var nameSpiesAndWrapActionsInSpies = ({ initialArgs }) => {
      traverseArgs(initialArgs);
    };
    scope.__STORYBOOK_TEST_LOADERS__ = [resetAllMocksLoader, nameSpiesAndWrapActionsInSpies];
    scope.__STORYBOOK_TEST_ON_MOCK_CALL__ = onMockCall;
  }
});

// stories/button.stories.ts
var button_stories_exports = {};
__export(button_stories_exports, {
  Dark: () => Dark,
  Gray: () => Gray,
  Primary: () => Primary,
  default: () => button_stories_default
});
module.exports = __toCommonJS(button_stories_exports);
var import_test = __toESM(require_dist9());

// stories/button.tsx
var import_class_variance_authority = require("class-variance-authority");
var import_react = __toESM(require("react"));

// app/lib/utils.ts
var import_clsx = require("clsx");
var import_tailwind_merge = require("tailwind-merge");
var twMerge = (0, import_tailwind_merge.extendTailwindMerge)({
  extend: {
    classGroups: {
      "font-size": [{ text: ["12", "14", "16", "18", "20", "24", "28", "34"] }]
    }
  }
});
function cn(...inputs) {
  return twMerge((0, import_clsx.clsx)(inputs));
}

// stories/button.tsx
var buttonVariants = (0, import_class_variance_authority.cva)(
  "rounded-1 px-2.5 font-bold transition-colors duration-200 ease-in-out disabled:cursor-not-allowed",
  {
    variants: {
      color: {
        gray: "bg-gray-100 text-[#555] disabled:bg-gray-400",
        dark: "bg-[#555] text-white disabled:bg-gray-400",
        primary: "bg-primary text-white disabled:bg-gray-400"
      },
      outlineColor: {
        gray: "border border-gray-500 bg-white text-gray-500 disabled:border-gray-400 disabled:text-gray-400",
        dark: "border border-gray-500 bg-white text-gray-500 disabled:border-gray-400 disabled:text-gray-400",
        primary: "border border-primary bg-white text-primary disabled:border-gray-400 disabled:text-gray-400"
      },
      size: {
        "56": "h-[56px] py-4 text-16",
        "48": "h-12 py-[14px] text-14",
        "40": "h-10 py-2.5 text-14",
        "36": "h-9 py-2 text-14",
        "32": "h-8 py-1.5 text-14",
        "30": "h-[30px] py-1.5 text-12"
      }
    }
  }
);
var Button = import_react.default.forwardRef(
  ({
    children: children2,
    size = "40",
    color = "primary",
    outline = false,
    className,
    ...props
  }, ref) => {
    return /* @__PURE__ */ import_react.default.createElement(
      "button",
      {
        ref,
        className: cn(
          buttonVariants({
            size,
            ...outline ? { outlineColor: color } : { color }
          }),
          className
        ),
        ...props
      },
      children2
    );
  }
);
Button.displayName = "Button";
var button_default = Button;

// stories/button.stories.ts
var meta = {
  title: "Components/Button",
  component: button_default,
  tags: ["autodocs"],
  argTypes: {
    color: {
      control: "select",
      options: ["primary", "gray", "dark"]
    },
    size: {
      control: "select",
      options: ["56", "48", "40", "36", "32", "30"]
    },
    className: {
      options: ["w-fit", "px-6", "w-full"],
      control: {
        type: "select",
        labels: {
          "w-fit": "\uD14D\uC2A4\uD2B8\uC5D0 \uB9DE\uAC8C",
          "px-6": "\uAE30\uBCF8\uD328\uB529 (24px)",
          "w-full": "width 100%"
        }
      }
    },
    disabled: {
      control: "boolean"
    },
    outline: {
      control: "boolean"
    }
  },
  args: { onClick: (0, import_test.fn)() }
};
var button_stories_default = meta;
var children = "\uBC84\uD2BC";
var Primary = {
  args: {
    color: "primary",
    size: "40",
    children
  }
};
var Gray = {
  args: {
    color: "gray",
    size: "40",
    children
  }
};
var Dark = {
  args: {
    color: "dark",
    size: "40",
    children
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dark,
  Gray,
  Primary
});
/*! Bundled license information:

telejson/dist/index.mjs:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
